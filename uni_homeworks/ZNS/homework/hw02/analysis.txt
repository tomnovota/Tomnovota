Pravidlo modus ponens: z A, A⇒B odvoď B

Pravidlo modus tollens: z A⇒B, ¬B odvoď ¬A

Pravidlo modus ponendo tollens: z ¬(A ⋀ B), A odvoď ¬B

Neúplná indukce, Abdukce

Báze znalostí = báze faktů(pes(Rek)) + báze pravidel (if pes(X) then steka(X))

======================================================================================================================================================

DOPŘEDNÉ ŘETĚZENÍ PRAVIDEL

Odvození všech odvoditelných faktů z báze znalostí pomocí dopředného řetězení pravidel:

1, Porovnání (matching): zjišťuje se, u kterých pravidel jsou levé části (předpoklady) splněné, porovnáváním s fakty v bázi faktů.
    (s proměnnými) - před porovnáním se zavolá unifikace na porovnávané termy

2, Výběr pravidel, jejichž aplikace má za následek odvození nového faktu do báze faktů.

3, Strategie pro pořadí aplikování pravidel
- řešení konfliktu (conflict resolution): z pravidel se splněnými předpoklady se vybírá podle priority
- u stejnoprioritních podle strategie (depth strategy, breath strategy, complexity strategy, simplicity strategy, random selection, ban strategy)

4, Provedení (execution): Vybrané pravidlo má za následek přidání/odebrání faktu / znalosti

5, Opakování výše, dokud lze nějaké fakty odvodit.

PSEUDOKÓD (Odvození všech odvoditelných faktů z báze znalostí pomocí dopředného řetězení pravidel):
read ( RULEBASE );
    read ( FACTBASE );
    while true
    {
	    RULES := {};
	    for each r in RULEBASE do {
		    if r.eval( FACTBASE )
            {
			    newFact := r . inference();
			    if not ( newFact in FACTBASE )
                    RULES . add ( r );
            }
	    }
	    if RULES . empty()
            break;
	    RULES . sortBySelectedStrategy();
	    r = RULES . first();
	    FACTBASE . add( r.inference() );
    }

-------------------------------------------------------------------------------------------------------------------------------------------------------

Pro zjištění, které fakty z báze faktů se rovnají termům v pravidlech -> Porovnání
Pseudokód Porovnání:
f1, f2 ... predikáty, jejichž argumenty jsou konstanty

   Evaluation(f1, f2)
   1. if f1 and f2 have different predicate names or different
      numbers of arguments then return "fail".
   2. For each argument, a1, in f1, with corresponding argument a2 in f2 do:
            if a1 != a2
                then return 'fail'
   3. return "true".

V případě proměnných je nutné dosazení..

Lze využít pro zjištění, zda konkrétní fakt plyne z báze faktů a znalostí:
- V každém kroku kontrolovat, zda se odvozené pravidlo rovná dokazovanému faktu.

======================================================================================================================================================

UNIFIKACE
- při porovnávání levé strany pravidla s proměnnými musíme najít nejobecnější substituci

-------------------------------------------------------------------------------------------------------------------------------------------------------

ZJEDNODUŠENÝ ALGORITMUS PRO UNIFIKACI (v bázi faktů nejsou proměnné)

Při unifikaci porovnáváme termy obsažené v pravidlech s termy z báze faktů.

Argumenty a_i termu _t_ obsaženého v pravidle mohou být proměnné a konstanty.
Argumenty b_i termu _s_ z báze faktů mohou být pouze konstanty.

Unifikace termu _t_ z pravidla a termu _s_ z báze faktů v této úloze obsahuje evaluaci:

1. Je název termů stejný? +
2. Je počet argumentů termů t a s stejný? +
3. Pro každý a_i termu t a b_i termu s vyhodnoďte: +
    jestliže a_i je proměnná:
       - je a_i vázána na jinam než na b_i?  (pokud není, tak je možné povést substituci a_i=b_i)
    jestliže a_i je konstanta
       - je  a_i rovna b_i?

-------------------------------------------------------------------------------------------------------------------------------------------------------

OBECNÝ ALGORITMUS PRO UNIFIKACI (v bázi faktů jsou proměnné)

function Unify ( term1, term2 )
	returns set of substitutions
{
	var E = equation( term1, term2);
start:
	foreach e in E do
	{
		// akce 1
		if (e.left is function) and (e.right is function) and (e.left.name == e.right.name) then
		{
			for i=1 to e.left.argCount do
			{
				E.add( equation( e.left.arg[i], e.right.arg[i] ));
			}
			E.remove( e );
			goto start;
		}
		// akce 2
		if (e.left is function) and (e.right is function) and (e.left.name != e.right.name) then
		{
			return failure;
		}
		// akce 3
		if (e.left == e.right) then
		{
			E.remove( e );
			goto start;
		}
		// akce 4
		if (e.left is constant) and (e.right is not constant) then
		{
			E.add( equation( e.right, e.left ) );
			E.remove( e );
			goto start;
		}
		// akce 5
		if (e.left is variable) and not e.right.contains( e.left) then
		{
			foreach ee in E do
			{
				var changed = false;
				if ee.left.contains( e.left) then
				{
					ee.left.replace( e.left, e.right);
					changed = true;
				}
				if ee.right.contains( e.left) then
				{
					ee.right.replace( e.left, e.right);
					changed = true;
				}
				if changed then
				{
					E.add( ee );
					goto start;
				}
			}
		}
		// akce 6
		if (e.left is variable) and e.right.contains( e.left) and (e.left != e.right) then
		{
			return failure;
		}
	}
	return E;
}
