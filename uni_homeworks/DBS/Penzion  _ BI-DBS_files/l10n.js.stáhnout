/**
 * Based on https://github.com/willdurand/BazingaJsTranslationBundle
 * @author William DURAND <william.durand1@gmail.com>
 * @license MIT Licensed
 */


/**
 * May not be loaded before $(document).ready()
 * 
 * Example: l10n("x.y.z"), l10n("x.y.z", 1), l10n("x.y.z", {"a": "b"}), l10n("x.y.z", 1, {"a": "b"})
 *
 * @param id key for translation
 * @param parameter1 optional number for plural or object with placeholder mapping
 * @param parameter2 optional object with placeholder mapping if parameter1 contains number for plural
 */
function l10n(id, parameter1, parameter2) {
    return Translator.translate(id, parameter1, parameter2);
}

var Translator = {
    language: $('head meta[name="l10n-script-meta"]').data("language"),
    translations: {}
};

$.holdReady(true);
$.ajax({
    url: "/translations/" + Translator.language + "?v=" + $('head meta[name="l10n-script-meta"]').data("version"),
    cache: true,
    dataType: "json"
}).done(function (data) {
    Translator.translations = JSON.parse(data);
    $.holdReady(false);
});

Translator.translate = function (id, parameter1, parameter2) {
    if (Number.isInteger(parameter1)) {
        parameter2 = parameter2 || {};
        if (parameter2.count === undefined) {
            parameter2.count = parameter1;
        }
        var result = this.replacePlaceholders(this.pluralize(this.getRawTranslation(id), parameter1), parameter2);
        if (result !== undefined) {
            return result;
        } else {
            return id;
        }
    } else {
        return this.replacePlaceholders(this.getRawTranslation(id), parameter1 || {});
    }
};

Translator.getRawTranslation = function (id) {
    if (id in this.translations) {
        return this.translations[id];
    } else {
        console.error("Missing translation: " + id + " for language " + this.language + ".");
        return id;
    }
};

Translator.replacePlaceholders = function (translation, placeholders) {
    for (var placeholder in placeholders) {
        var regex = new RegExp('%' + placeholder + '%', 'g');
        if (regex.test(translation)) {
            // noinspection JSUnfilteredForInLoop
            var value = String(placeholders[placeholder]).replace(new RegExp('\\$', 'g'), '$$$$');
            translation = translation.replace(regex, value);
        }
    }
    return translation;
};

Translator.standardPluralRegex = new RegExp(/^\w+\: +(.+)$/);
Translator.explicitPluralRegex = new RegExp(/^\s*((\{\s*(\-?\d+[\s*,\s*\-?\d+]*)\s*\})|([\[\]])\s*(-Inf|\-?\d+)\s*,\s*(\+?Inf|\-?\d+)\s*([\[\]]))\s?(.+?)$/);
Translator.intervalPluralRegex = new RegExp(/^\s*(\{\s*(\-?\d+[\s*,\s*\-?\d+]*)\s*\})|([\[\]])\s*(-Inf|\-?\d+)\s*,\s*(\+?Inf|\-?\d+)\s*([\[\]])/);

Translator.pluralize = function (translation, number) {
    var parts = translation.split('|');

    var explicitRules = [];
    var standardRules = [];
    for (var i = 0; i < parts.length; i++) {
        var part = parts[i];
        if (this.explicitPluralRegex.test(part)) {
            var matches = part.match(this.explicitPluralRegex);
            explicitRules[matches[0]] = matches[matches.length - 1];
        } else if (this.standardPluralRegex.test(part)) {
            standardRules.push(part.match(this.standardPluralRegex)[1]);
        } else {
            standardRules.push(part);
        }
    }

    for (var explicitRule in explicitRules) {
        if (this.intervalPluralRegex.test(explicitRule)) {
            matches = explicitRule.match(this.intervalPluralRegex);
            if (matches[1]) {
                var numbers = matches[2].split(',');
                for (var key in numbers) {
                    // noinspection EqualityComparisonWithCoercionJS
                    if (number == numbers[key]) {
                        return explicitRules[explicitRule];
                    }
                }
            } else {
                var leftNumber = this.convertNumber(matches[4]);
                var rightNumber = this.convertNumber(matches[5]);

                if ((matches[3] === '[' ? number >= leftNumber : number > leftNumber) &&
                    (matches[6] === ']' ? number <= rightNumber : number < rightNumber)) {
                    return explicitRules[explicitRule];
                }
            }
        }
    }

    return standardRules[this.pluralPosition(number)] || standardRules[0] || undefined;
};

Translator.convertNumber = function (number) {
    if (number === '-Inf') {
        return Number.NEGATIVE_INFINITY;
    } else if (number === '+Inf' || number === 'Inf') {
        return Number.POSITIVE_INFINITY;
    } else {
        return parseInt(number);
    }
};

Translator.pluralPosition = function (number) {
    var language = this.language;
    if (language === 'pt_BR') {
        language = 'xbr';
    }

    if (language.length > 3) {
        language = language.split('_')[0];
    }

    switch (language) {
        case 'bo':
        case 'dz':
        case 'id':
        case 'ja':
        case 'jv':
        case 'ka':
        case 'km':
        case 'kn':
        case 'ko':
        case 'ms':
        case 'th':
        case 'tr':
        case 'vi':
        case 'zh':
            return 0;
        case 'af':
        case 'az':
        case 'bn':
        case 'bg':
        case 'ca':
        case 'da':
        case 'de':
        case 'el':
        case 'en':
        case 'eo':
        case 'es':
        case 'et':
        case 'eu':
        case 'fa':
        case 'fi':
        case 'fo':
        case 'fur':
        case 'fy':
        case 'gl':
        case 'gu':
        case 'ha':
        case 'he':
        case 'hu':
        case 'is':
        case 'it':
        case 'ku':
        case 'lb':
        case 'ml':
        case 'mn':
        case 'mr':
        case 'nah':
        case 'nb':
        case 'ne':
        case 'nl':
        case 'nn':
        case 'no':
        case 'om':
        case 'or':
        case 'pa':
        case 'pap':
        case 'ps':
        case 'pt':
        case 'so':
        case 'sq':
        case 'sv':
        case 'sw':
        case 'ta':
        case 'te':
        case 'tk':
        case 'ur':
        case 'zu':
            return (number === 1) ? 0 : 1;

        case 'am':
        case 'bh':
        case 'fil':
        case 'fr':
        case 'gun':
        case 'hi':
        case 'ln':
        case 'mg':
        case 'nso':
        case 'xbr':
        case 'ti':
        case 'wa':
            return ((number === 0) || (number === 1)) ? 0 : 1;

        case 'be':
        case 'bs':
        case 'hr':
        case 'ru':
        case 'sr':
        case 'uk':
            return ((number % 10 === 1) && (number % 100 !== 11)) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2);

        case 'cs':
        case 'sk':
            return (number === 1) ? 0 : (((number >= 2) && (number <= 4)) ? 1 : 2);

        case 'ga':
            return (number === 1) ? 0 : ((number === 2) ? 1 : 2);

        case 'lt':
            return ((number % 10 === 1) && (number % 100 !== 11)) ? 0 : (((number % 10 >= 2) && ((number % 100 < 10) || (number % 100 >= 20))) ? 1 : 2);

        case 'sl':
            return (number % 100 === 1) ? 0 : ((number % 100 === 2) ? 1 : (((number % 100 === 3) || (number % 100 === 4)) ? 2 : 3));

        case 'mk':
            return (number % 10 === 1) ? 0 : 1;

        case 'mt':
            return (number === 1) ? 0 : (((number === 0) || ((number % 100 > 1) && (number % 100 < 11))) ? 1 : (((number % 100 > 10) && (number % 100 < 20)) ? 2 : 3));

        case 'lv':
            return (number === 0) ? 0 : (((number % 10 === 1) && (number % 100 !== 11)) ? 1 : 2);

        case 'pl':
            return (number === 1) ? 0 : (((number % 10 >= 2) && (number % 10 <= 4) && ((number % 100 < 12) || (number % 100 > 14))) ? 1 : 2);

        case 'cy':
            return (number === 1) ? 0 : ((number === 2) ? 1 : (((number === 8) || (number === 11)) ? 2 : 3));

        case 'ro':
            return (number === 1) ? 0 : (((number === 0) || ((number % 100 > 0) && (number % 100 < 20))) ? 1 : 2);

        case 'ar':
            return (number === 0) ? 0 : ((number === 1) ? 1 : ((number === 2) ? 2 : (((number >= 3) && (number <= 10)) ? 3 : (((number >= 11) && (number <= 99)) ? 4 : 5))));

        default:
            return 0;
    }
};