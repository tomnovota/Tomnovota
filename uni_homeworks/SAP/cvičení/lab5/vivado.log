#-----------------------------------------------------------
# Vivado v2018.2.1 (64-bit)
# SW Build 2288692 on Thu Jul 26 18:24:02 MDT 2018
# IP Build 2289599 on Thu Jul 26 21:09:20 MDT 2018
# Start of session at: Tue Mar 15 07:34:26 2022
# Process ID: 14424
# Current directory: X:/SAP/lab5
# Command line: vivado.exe -gui_launcher_event rodinguilauncherevent12004 X:\SAP\lab5\lab5.xpr
# Log file: X:/SAP/lab5/vivado.log
# Journal file: X:/SAP/lab5\vivado.jou
#-----------------------------------------------------------
start_gui
open_project X:/SAP/lab5/lab5.xpr
Scanning sources...
Finished scanning sources
INFO: [IP_Flow 19-234] Refreshing IP repositories
INFO: [IP_Flow 19-1700] Loaded user IP repository 'x:/SAP/lib_SAP_2022_02_02'.
INFO: [IP_Flow 19-2313] Loaded Vivado IP repository 'C:/Xilinx/Vivado/2018.2/data/ip'.
open_project: Time (s): cpu = 00:00:14 ; elapsed = 00:00:12 . Memory (MB): peak = 867.418 ; gain = 149.148
update_compile_order -fileset sources_1
export_ip_user_files -of_objects  [get_files X:/SAP/lab5/lab5.srcs/sources_1/imports/SAP/l5_output_logic.vhd] -no_script -reset -force -quiet
remove_files  X:/SAP/lab5/lab5.srcs/sources_1/imports/SAP/l5_output_logic.vhd
import_files -norecurse X:/SAP/l4_output_logic.vhd
update_compile_order -fileset sources_1
set_property top output_logic [current_fileset]
update_compile_order -fileset sources_1
source X:/SAP/lib_SAP_2022_02_02/gen_bd_vhdl.tcl
# proc sortPorts { ports &bus &bit } {
# 
#   upvar ${&bus} busPorts
#   upvar ${&bit} bitPorts
#   array set busPorts [list]
#   set bitPorts [list]
# 
#   foreach port $ports {
#     set name [get_property -quiet NAME [get_bd_ports $port]]
# 	set busStart [get_property -quiet LEFT [get_bd_ports $port]]
#     set busStop  [get_property -quiet RIGHT  [get_bd_ports $port]]
#     if {$busStart != {}} {
#     #   set busWidth [get_property -quiet BUS_WIDTH [get_ports $port]]
#       array set busPorts [list $name [list $busStop $busStart]]
#     } else {
#       lappend bitPorts $name
#     }
#   }
#   return 0
# }
# proc sortPins { pins &bus &bit } {
# 
#   upvar ${&bus} busPins
#   upvar ${&bit} bitPins
#   array set busPins [list]
#   array set bitPins [list]
# 
#   foreach pin $pins {
#     set name [get_property -quiet NAME [get_bd_pins $pin]]
# 	set dir [get_property -quiet DIR [get_bd_pins $pin]]
# 	set busStart [get_property -quiet LEFT [get_bd_pins $pin]]
#     set busStop  [get_property -quiet RIGHT  [get_bd_pins $pin]]
# 	set net [get_bd_nets -quiet -of_objects [get_bd_pins $pin]]
# 	if {$net != ""} {
# 		set net_name [get_property -quiet NAME $net]
# 	} else {
# 		if {$dir == "I"} {
# 			if {$busStart != {}} {
# 				set net_name "(others => '0')"
# 				catch {common::send_msg_id "bd2vhdl    pin-2" "CRITICAL WARNING" "${pin}: nepripojen, bude pripojen k '0'"}
# 			} else {
# 				set net_name "'0'"
# 				catch {common::send_msg_id "bd2vhdl    pin-2" "CRITICAL WARNING" "${pin}: nepripojen, bude pripojen k '0'"}
# 			}
# 		} else {
# 			set net_name "open"
# 			catch {common::send_msg_id "bd2vhdl    pin-3" "CRITICAL WARNING" "${pin}: pin odstranen, vystup neni pripojen!"}
# 		}
# 	}
# 	if {$busStart != {}} {
# 		array set busPins [list $name [list $busStop $busStart $net_name]]
# 	} else {
# 		array set bitPins [list $name $net_name]
# 	}
#   }
#   return 0
# }
# proc sortNets { nets &bus &bit } {
# 
#   upvar ${&bus} busNets
#   upvar ${&bit} bitNets
#   array set busNets [list ]
#   set bitNets [list]
# 
#   foreach net $nets {
#     set name [get_property -quiet NAME [get_bd_nets $net]]
# 	set pin [lindex [get_bd_pins -of_objects [get_bd_nets $net]] 0]
# 	set busStart [get_property -quiet LEFT [get_bd_pins $pin]]
#     set busStop  [get_property -quiet RIGHT  [get_bd_pins $pin]]
#     if {$busStart != {}} {
#     #   set busWidth [get_property -quiet BUS_WIDTH [get_ports $port]]
#       array set busNets [list $name [list $busStop $busStart]]
#     } else {
#       lappend bitNets $name
#     }
#   }
#   return 0
# }
# proc array2sortedList { &ar } {
# 
#   upvar ${&ar} ar
#   set sortedList [list]
#   foreach key [lsort -dictionary [array names ar]] {
#     lappend sortedList $key
#     lappend sortedList $ar($key)
#   }
#   return $sortedList
# }
# proc getInPinNet { cell pin default_value} {
# 	set pin [get_bd_pins -quiet $pin]
# 	set net [get_bd_nets -quiet -of_objects $pin]
# 	if {$net == ""} {
# 		catch {common::send_msg_id "bd2vhdl    pin-2" "CRITICAL WARNING" "${pin} nepripojen, bude pripojeno k $default_value"}
# 		set net_name $default_value
# 	} else {
# 		set net_name [get_property NAME $net]
# 	}
# 	return $net_name
# }
# proc getGate { cell  function} {
# 	set inputs_count [get_property CONFIG.Inputs [get_bd_cells -quiet $cell]]
# 	set content {}
# 	set prom {}
# 	set name [get_property NAME $cell]
# 	append content [format "\n\t-- %s\n" $name]
# 	for {set i 0} { $i < $inputs_count } { incr i } {
# 		set cfg [format "CONFIG.I%u_Inverted" $i]
# 		set pin [format "%s/I%u" $cell $i]
# 		set inverted [get_property $cfg  [get_bd_cells -quiet $cell]]
# 		#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 		set net_name [getInPinNet $cell $pin "\'0\'"]
# 		#set net_name [get_property NAME $net]
# 		if {$inverted == "true"} {
# 			append prom [format "not(%s)" $net_name]
# 		} else {
# 			append prom [format "%s" $net_name]
# 		}
# 		if {$i < ($inputs_count-1)} {
# 			append prom [format " %s " $function]
# 		}
# 	}
# 	set cfg [format "CONFIG.O_Inverted" $i]
# 	set pin [format "%s/O" $cell]
# 	set inverted [get_property $cfg  [get_bd_cells -quiet $cell]]
# 	set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 	if {$net != ""} {
# 		set out_name [get_property NAME $net]
# 		if {$inverted == "true"} {
# 			append content [format "\t%s <= not(%s);\n" $out_name $prom];	
# 		} else {
# 			append content [format "\t%s <= %s;\n" $out_name $prom];
# 		}
# 		return $content
# 	} else {
# 		catch {common::send_msg_id "bd2vhdl  jadro-3" "CRITICAL WARNING" "${cell}: odstraneno, vystup neni pripojen!"}
# 		return [append content "\t-- odstraneno, vystup neni pripojen\n"]
# 	}
# }
# proc getBuf { cell  function } {
# 	set content {}
# 	set name [get_property NAME $cell]
# 	append content [format "\n\t-- %s\n" $name]
# 
# 	set pin [format "%s/I" $cell]
# 	#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 	#set net_name [get_property NAME $net]
# 	set net_name [getInPinNet $cell $pin "\'0\'"]
# 
# 	set pin [format "%s/O" $cell]
# 	set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 	if {$net != ""} {
# 		set out_name [get_property NAME $net]
# 		if {$function == true} {
# 			append content [format "\t%s <= not(%s);\n" $out_name $net_name];	
# 		} else {
# 			append content  [format "\t%s <= %s;\n" $out_name $net_name];
# 		}
# 		return $content
# 	} else {
# 		catch {common::send_msg_id "bd2vhdl  jadro-3" "CRITICAL WARNING" "${cell}: odstraneno, vystup neni pripojen!"}
# 		return [append content "\t-- odstraneno, vystup neni pripojen\n"]
# 	}
# }
# proc getSource { cell  function } {
# 	set content {}
# 	set name [get_property NAME $cell]
# 	append content [format "\n\t-- %s\n" $name]
# 
# 	set pin [format "%s/O" $cell]
# 	set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 	if {$net != ""} {
# 		set out_name [get_property NAME $net]
# 		if {$function == true} {
# 			append content [format "\t%s <= '1';\n" $out_name];	
# 		} else {
# 			append content [format "\t%s <= '0';\n" $out_name];
# 		}
# 		return $content
# 	} else {
# 		catch {common::send_msg_id "bd2vhdl  jadro-3" "CRITICAL WARNING" "${cell}: odstraneno, vystup neni pripojen!"}
# 		return [append content "\t-- odstraneno, vystup neni pripojen\n"]
# 	}
# }
# proc getSplitter { cell } {
# 	set width [get_property CONFIG.WIDTH [get_bd_cells -quiet $cell]]
# 	set pin [format "%s/I" $cell]
# 	set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 	if {$net != ""} {
# 		set in_name [get_property NAME $net]
# 		set content {}
# 		set name [get_property NAME $cell]
# 		append content [format "\n\t-- %s\n" $name]
# 		for {set i 0} { $i < $width } { incr i } {
# 			set pin [format "%s/O%u" $cell $i]
# 			set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 			if {$net != ""} {
# 				set net_name [get_property NAME $net]
# 				append content [format "\t%s <= %s(%u);\n" $net_name $in_name $i]
# 			} else {
# 				catch {common::send_msg_id "bd2vhdl  jadro-3" "CRITICAL WARNING" "${cell}: ${pin} odstranen, vystup neni pripojen!"}
# 			}
# 		}
# 	} else {
# 		set content {}
# 		set name [get_property NAME $cell]
# 		append content [format "\n\t-- %s\n" $name]
# 		for {set i 0} { $i < $width } { incr i } {
# 			set pin [format "%s/O%u" $cell $i]
# 			set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 			if {$net != ""} {
# 				set net_name [get_property NAME $net]
# 				append content [format "\t%s <= \'0\';\n" $net_name $i]
# 				catch {common::send_msg_id "bd2vhdl  jadro-2" "CRITICAL WARNING" "${cell} nepripojen vstup, ${net_name} bude pripojeno k \'0\'"}
# 			} else {
# 				catch {common::send_msg_id "bd2vhdl  jadro-3" "CRITICAL WARNING" "${cell}: ${pin} odstranen, vystup neni pripojen!"}
# 			}
# 		}
# 	}
# 	return $content
# }
# proc getDff { cell } {
# 	set ce [get_property CONFIG.CE [get_bd_cells -quiet $cell]]
# 	set reset [get_property CONFIG.Reset [get_bd_cells -quiet $cell]]
# 
# 	set content {}
# 	set name [get_property NAME $cell]
# 	append content [format "\n\t-- %s\n" $name]
# 
# 	set pin [format "%s/q" $cell]
# 	set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 	if {$net != ""} {
# 		set out_name [get_property NAME $net]
# 
# 		set pin [format "%s/clk" $cell]
# 		set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 		if {$net == ""} {
# 			catch {common::send_msg_id "bd2vhdl  jadro-3" "CRITICAL WARNING" "${cell}: odstraneno, nejsou pripojene hodiny!"}
# 			return [append content "\t-- odstraneno, , nejsou pripojene hodiny!\n"]
# 		}
# 		#set clk_name [get_property NAME $net]
# 		set clk_name [getInPinNet $cell $pin "\'0\'"]
# 
# 		set pin [format "%s/d" $cell]
# 		#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 		#set in_name [get_property NAME $net]
# 		set in_name [getInPinNet $cell $pin "\'0\'"]
# 
# 		if {$ce == "true"} {
# 			set pin [format "%s/ce" $cell]
# 			#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 			#set ce_name [get_property NAME $net]
# 			set ce_name [getInPinNet $cell $pin "\'1\'"]
# 		}
# 
# 		if {$reset == "true"} {
# 			set pin [format "%s/reset" $cell]
# 			#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 			#set reset_name [get_property NAME $net]
# 			set reset_name [getInPinNet $cell $pin "\'0\'"]
# 		}
# 
# 		append content [format "\tprocess (%s)\n\tbegin\n" $clk_name]
# 		append content [format "\t\tif rising_edge(%s) then\n" $clk_name]
# 		if {$reset == "true"} {
# 			append content [format "\t\t\tif %s = '1' then\n\t\t\t\t%s <= '0';\n\t\t\tels" $reset_name $out_name]
# 		} else {
# 			append content "\t\t\t"
# 		}
# 
# 		if {$ce == "true"} {
# 			append content [format "if %s = '1' then\n" $ce_name]
# 			append content [format "\t\t\t\t%s <= %s;\n" $out_name $in_name]
# 			append content "\t\t\tend if;\n"
# 		} else {
# 			if {$reset == "true"} {
# 				append content [format "e\n\t\t\t\t%s <= %s;\n" $out_name $in_name]
# 				append content "\t\t\tend if;\n"
# 			} else {
# 				append content [format "%s <= %s;\n" $out_name $in_name]
# 			}
# 		}
# 
# 		append content "\t\tend if;\n\tend process;\n";
# 	} else {
# 		catch {common::send_msg_id "bd2vhdl jadro-3" "CRITICAL WARNING" "${cell}: odstraneno, vystup neni pripojen!"}
# 		return [append content "\t-- odstraneno, vystup neni pripojen\n"]
# 	}
# 	return $content
# }
# proc getMux { cell } {
# 	set ports_count [get_property CONFIG.Data_Ports [get_bd_cells -quiet $cell]]
# 	set width [get_property CONFIG.WIDTH [get_bd_cells -quiet $cell]]
# 	set i0_bus [get_property CONFIG.I0_BUS [get_bd_cells -quiet $cell]]
# 	set i1_bus [get_property CONFIG.I1_BUS [get_bd_cells -quiet $cell]]
# 	set i2_bus [get_property CONFIG.I2_BUS [get_bd_cells -quiet $cell]]
# 	set i3_bus [get_property CONFIG.I3_BUS [get_bd_cells -quiet $cell]]
# 	set o_bus [get_property CONFIG.O_BUS [get_bd_cells -quiet $cell]]
# 
# 	set content {}
# 	set name [get_property NAME $cell]
# 	append content [format "\n\t-- %s\n" $name]
# 
# 	for {set i 0} { $i < $width } { incr i } {
# 		if {$o_bus == "true"} {
# 			set pin [format "%s/O" $cell]
# 			set vecO [format "(%u)" $i]
# 		} else {
# 			set pin [format "%s/O_%u" $cell $i]
# 			set vecO ""
# 		}
# 		set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 		if {$net != ""} {
# 			set out_name [get_property NAME $net]
# 
# 			if {$i0_bus == "true"} {
# 				set pin [format "%s/I0" $cell]
# 				set vec0 [format "(%u)" $i]
# 			} else {
# 				set pin [format "%s/I0_%u" $cell $i]
# 				set vec0 ""
# 			}
# 			#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 			#set i0_name [get_property NAME $net]
# 			set i0_name [getInPinNet $cell $pin "\'0\'"]
# 			if {$i0_name == "'0'"} {
# 				set vec0 ""
# 			}
# 
# 			if {$i1_bus == "true"} {
# 				set pin [format "%s/I1" $cell]
# 				set vec1 [format "(%u)" $i]
# 			} else {
# 				set pin [format "%s/I1_%u" $cell $i]
# 				set vec1 ""
# 			}
# 			#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 			#set i1_name [get_property NAME $net]
# 			set i1_name [getInPinNet $cell $pin "\'0\'"]
# 			if {$i1_name == "'0'"} {
# 				set vec1 ""
# 			}
# 
# 			set pin [format "%s/Sel0" $cell]
# 			#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 			#set sel0_name [get_property NAME $net]
# 			set sel0_name [getInPinNet $cell $pin "\'0\'"]
# 
# 			if {$ports_count > 2} {
# 				if {$i2_bus == "true"} {
# 					set pin [format "%s/I2" $cell]
# 					set vec2 [format "(%u)" $i]
# 				} else {
# 					set pin [format "%s/I2_%u" $cell $i]
# 					set vec2 ""
# 				}
# 				#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 				#set i2_name [get_property NAME $net]
# 				set i2_name [getInPinNet $cell $pin "\'0\'"]
# 				if {$i2_name == "'0'"} {
# 					set vec2 ""
# 				}
# 
# 				if {$i3_bus == "true"} {
# 					set pin [format "%s/I3" $cell]
# 					set vec3 [format "(%u)" $i]
# 				} else {
# 					set pin [format "%s/I3_%u" $cell $i]
# 					set vec3 ""
# 				}
# 				#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 				#set i3_name [get_property NAME $net]
# 				set i3_name [getInPinNet $cell $pin "\'0\'"]
# 				if {$i3_name == "'0'"} {
# 					set vec3 ""
# 				}
# 
# 				set pin [format "%s/Sel1" $cell]
# 				#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 				#set sel1_name [get_property NAME $net]
# 				set sel1_name [getInPinNet $cell $pin "\'0\'"]
# 				
# 				if {$sel0_name != "'0'" && $sel1_name != "'0'"} {
# 					append content [format "\t%s%s <= %s%s when %s = '0' and %s = '0' else\n" $out_name $vecO $i0_name $vec0 $sel1_name $sel0_name]
# 					append content [format "\t\t%s%s when %s = '0' and %s = '1' else\n" $i1_name $vec1 $sel1_name $sel0_name]
# 					append content [format "\t\t%s%s when %s = '1' and %s = '0' else\n" $i2_name $vec2 $sel1_name $sel0_name]
# 					append content [format "\t\t%s%s when %s = '1' and %s = '1' else '0';\n\n" $i3_name $vec3 $sel1_name $sel0_name]
# 				} else {
# 					append content [format "\t%s%s <= %s%s;\n" $out_name $vecO $i0_name $vec0]
# 				}
# 			} else {
# 				if {$sel0_name != "'0'"} {
# 					append content [format "\t%s%s <= %s%s when (%s = '1') else %s%s;\n" $out_name $vecO $i1_name $vec1 $sel0_name $i0_name $vec0]
# 				} else {
# 					append content [format "\t%s%s <= %s%s;\n" $out_name $vecO $i0_name $vec0]
# 				}
# 			}
# 		} else {
# 			catch {common::send_msg_id "bd2vhdl  jadro-3" "CRITICAL WARNING" " ${cell}: pin ${pin} odstranen, vystup neni pripojen!"}
# 			return [append content "\t-- ${pin} odstranen, vystup neni pripojen\n"]
# 		}
# 		
# 	}
# 	return $content
# }
# proc getDebounce { cell } {
# 	set width [get_property CONFIG.width [get_bd_cells -quiet $cell]]
# 
# 	set content {}
# 	set name [get_property NAME $cell]
# 	append content [format "\n\t-- %s\n" $name]
# 
# 	set pin [format "%s/tl_out" $cell]
# 	set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 	if {$net != ""} {
# 		set tl_out [get_property NAME $net]
# 
# 		set pin [format "%s/clk" $cell]
# 		set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 		if {$net != ""} {
# 			set clk [get_property NAME $net]
# 
# 			set pin [format "%s/tl_in" $cell]
# 			#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 			#set tl_in [get_property NAME $net]
# 			set tl_in [getInPinNet $cell $pin "\'0\'"]
# 
# 			append content [ format "\t%s : debounce\n\t\tgeneric map (\n\t\t\twidth => %s\n\t\t)\n\t\tport map (\n\t\t\tclk	=> %s,\n\t\t\ttl_in	=> %s,\n\t\t\ttl_out	=> %s\n\t\t);\n" $name $width $clk $tl_in $tl_out]
# 		} else {
# 			catch {common::send_msg_id "bd2vhdl  jadro-3" "CRITICAL WARNING" "${cell}: odstraneno, nejsou pripojene hodiny!"}
# 			return [append content "\t-- odstraneno, , nejsou pripojene hodiny!\n"]	
# 		}
# 	} else {
# 		catch {common::send_msg_id "bd2vhdl  jadro-3" "CRITICAL WARNING" "${cell}: odstraneno, vystup neni pripojen!"}
# 		return [append content "\t-- odstraneno, vystup neni pripojen\n"]
# 	}
# 	
# 	return $content
# }
# set debounce_component "\tcomponent debounce
# \t\tgeneric (
# \t\t\twidth: integer := 22
# \t\t);
# \t\tport (
# \t\t\tclk    : in  std_logic;
# \t\t\ttl_in  : in  std_logic;
# \t\t\ttl_out : out std_logic
# \t\t);
# \tend component;\n"
# proc getModule_ref { cell components component_name} {
# 	upvar $components comps
# 
# 	set inPins [lsort [get_bd_pins -quiet -of_objects [get_bd_cells $cell] -filter DIR==I]]
# 	array set inputBusPins [list]
# 	array set inputBitPins [list]
# 	sortPins $inPins inputBusPins inputBitPins
# 
# 	set outPins [lsort [get_bd_pins -quiet -of_objects [get_bd_cells $cell] -filter DIR==O]]
# 	array set outputBusPins [list]
# 	array set outputBitPins [list]
# 	sortPins $outPins outputBusPins outputBitPins
# 
# 	set content {}
# 	set name [get_property NAME $cell]
# 	append content [format "\n\t-- %s\n" $name]
# 
# 	set lines [list]
# 	foreach {pin net} [array2sortedList inputBitPins] {
#     	lappend lines [list "$pin" "in  std_logic;" "$net"]
#   	}
# 	foreach {pin busInfo} [array2sortedList inputBusPins] {
# 		lassign $busInfo stop start net
# 		if {$start>$stop} {
# 			lappend lines [list "$pin" "in  std_logic_vector($start downto $stop);" "$net"]
# 		} else {
# 			lappend lines [list "$pin" "in  std_logic_vector($start to $stop);" "$net"]
# 		}
#   	}
# 	foreach {pin net} [array2sortedList outputBitPins] {
#     	lappend lines [list "$pin" "out std_logic;" "$net"]
# 	}
# 	foreach {pin busInfo} [array2sortedList outputBusPins] {
# 		lassign $busInfo stop start net
# 		if {$start>$stop} {
# 			lappend lines [list "$pin"  "out std_logic_vector($start downto $stop);" "$net"]
# 		} else {
# 			lappend lines [list "$pin" "out std_logic_vector($start to $stop);" "$net"]
# 		}
# 	}
# 	# Detect maximum column width to align columns
# 	foreach line $lines {
# 		set width [string length [lindex $line 0]]
# 		if {![info exist maxWidth] || $maxWidth < $width} {
# 			set maxWidth $width
# 		}
# 	}
# 	set ports {}
# 	set port_map {}
# 	foreach line $lines {
# 		append ports [format "\n\t\t\t%-${maxWidth}s :  %-${maxWidth}s" [lindex $line 0] [lindex $line 1]]
# 		append port_map [format "\n\t\t\t%-${maxWidth}s =>  %-${maxWidth}s," [lindex $line 0] [lindex $line 2]]
# 	}
# 	# Remove the last semi-colon
#   	set index [string last {;} $ports]
#   	set ports [string replace $ports $index $index {}]
# 	# Remove the last ,
#   	set index [string last {,} $port_map]
#   	set port_map [string replace $port_map $index $index {}]
# 
# 	# nepridavat pokud uz tam ta komponenta je
# 	if {[string first $component_name $comps] < 0} {
# 		append comps "\tcomponent ${component_name}\n\t\tport ("
# 		append comps $ports
# 		append comps "\n\t\t);\n\tend component;\n\n"
# 	}
# 	append content "\tinst_${name} : ${component_name}\n"
# 	append content "\t\tport map ("
# 	append content $port_map
# 	append content "\n\t\t);\n"
# }
# proc getHier { cell debounce components modules} {
# 	global debounce_component
# 	upvar $components comps
# 	upvar $modules mods
# 	upvar $debounce debs
# 
# 	set inPins [lsort [get_bd_pins -quiet -of_objects [get_bd_cells $cell] -filter DIR==I]]
# 	array set inputBusPins [list]
# 	array set inputBitPins [list]
# 	sortPins $inPins inputBusPins inputBitPins
# 
# 	set outPins [lsort [get_bd_pins -quiet -of_objects [get_bd_cells $cell] -filter DIR==O]]
# 	array set outputBusPins [list]
# 	array set outputBitPins [list]
# 	sortPins $outPins outputBusPins outputBitPins
# 
# 	set content {}
# 	set name [get_property NAME $cell]
# 	append content [format "\n\t-- %s\n" $name]
# 
# 	set lines [list]
# 	foreach {pin net} [array2sortedList inputBitPins] {
#     	lappend lines [list "$pin" "in  std_logic;" "$net"]
#   	}
# 	foreach {pin busInfo} [array2sortedList inputBusPins] {
# 		lassign $busInfo stop start net
# 		if {$start>$stop} {
# 			lappend lines [list "$pin" "in  std_logic_vector($start downto $stop);" "$net"]
# 		} else {
# 			lappend lines [list "$pin" "in  std_logic_vector($start to $stop);" "$net"]
# 		}
#   	}
# 	foreach {pin net} [array2sortedList outputBitPins] {
#     	lappend lines [list "$pin" "out std_logic;" "$net"]
# 	}
# 	foreach {pin busInfo} [array2sortedList outputBusPins] {
# 		lassign $busInfo stop start net
# 		if {$start>$stop} {
# 			lappend lines [list "$pin"  "out std_logic_vector($start downto $stop);" "$net"]
# 		} else {
# 			lappend lines [list "$pin" "out std_logic_vector($start to $stop);" "$net"]
# 		}
# 	}
# 	# Detect maximum column width to align columns
# 	foreach line $lines {
# 		set width [string length [lindex $line 0]]
# 		if {![info exist maxWidth] || $maxWidth < $width} {
# 			set maxWidth $width
# 		}
# 	}
# 	set ports {}
# 	set port_map {}
# 	foreach line $lines {
# 		append ports [format "\n\t\t\t%-${maxWidth}s :  %-${maxWidth}s" [lindex $line 0] [lindex $line 1]]
# 		append port_map [format "\n\t\t\t%-${maxWidth}s =>  %-${maxWidth}s," [lindex $line 0] [lindex $line 2]]
# 	}
# 	# Remove the last semi-colon
#   	set index [string last {;} $ports]
#   	set ports [string replace $ports $index $index {}]
# 	# Remove the last ,
#   	set index [string last {,} $port_map]
#   	set port_map [string replace $port_map $index $index {}]
# 
# 	set filtr [format {PATH !~ "%s/.*/.*"} $cell]
# 	set nets [lsort [get_bd_nets -quiet -of_objects [get_bd_cells $cell] -regexp -filter $filtr]]
# 	array set busNets [list ]
# 	set bitNets [list]
# 	sortNets $nets busNets bitNets
# 
# 	set lines [list]
# 	# Process single bit nets
# 	foreach net [lsort -dictionary $bitNets] {
# 		lappend lines [list "$net" "  std_logic;"]
# 	}
# 	# Process bus nets
# 	foreach {net busInfo} [array2sortedList busNets] {
# 		lassign $busInfo stop start
# 		if {$start>$stop} {
# 		lappend lines [list "$net" "  std_logic_vector($start downto $stop);"]
# 		} else {
# 		lappend lines [list "$net" "  std_logic_vector($start to $stop);"]
# 		}
# 	}
# 
# 	# Detect maximum column width to align columns
# 	foreach line $lines {
# 		set width [string length [lindex $line 0]]
# 		if {![info exist maxWidth] || $maxWidth < $width} {
# 			set maxWidth $width
# 		}
# 	}
# 
# 	# Build the content of the stub:
# 	set signals {}
# 	foreach line $lines {
# 		append signals [format "\n\tsignal %-${maxWidth}s :  %-${maxWidth}s" [lindex $line 0] [lindex $line 1]]
# 	}
#   set ports2Signals {}
#     foreach net [lsort -dictionary $nets] {
#         set net_name [get_property NAME [get_bd_nets -quiet $net]]
#         set ports_b [get_bd_ports -quiet -of_objects [get_bd_nets -quiet $net]]
#         if {$ports == {}} {
#             break
#         }
#         foreach port [lsort -dictionary $ports_b] {
#             set port_name [get_property NAME [get_bd_pins -quiet $port]]
#             set dir [get_property DIR [get_bd_pins -quiet $port]]
#             if {$dir == "I"} {
#                 append ports2Signals "\t$net_name <= $port_name;\n"    
#             } else {
#                 append ports2Signals "\t$port_name <= $net_name;\n"
#             }
#         }
#     }
#   
# 	set debounce_inner false
#   	set components_inner {}
#   	set modules_inner {}
#   	set body [getIPs $cell debounce_inner components_inner modules_inner]
# 	if {$debounce_inner} {
# 		puts "######################################################################x"
# 		append components_inner $debounce_component
# 		set debs true
#     }
# 	
# 	set comp_name [string replace $cell 0 0 {}]
#     set comp_name [string map {/ _} $comp_name]
#     append comps "\tcomponent ${comp_name}\n\t\tport ("
#     append mods "\n\nlibrary IEEE;\nuse IEEE.std_logic_1164.all;\n\n"
#     append mods "entity ${comp_name} is\n\tport("
#     append mods $ports
#     append comps $ports
#     append mods "\n\t\t);\nend entity ${comp_name};\n\narchitecture Behavioral of ${comp_name} is\n"
#     append mods $components_inner
#     append mods $signals
#     append mods "\nbegin\n"
#     append mods $ports2Signals
#     append mods $body
#     append mods "\nend Behavioral;"
#     append comps "\n\t\t);\n\tend component;\n\n"
#     append content "\tinst_${comp_name} : ${comp_name}\n"
#     append content "\t\tport map ("
#     append content $port_map
#     append content "\n\t\t);\n"
#     append mods $modules_inner
# 
# 	return $content
# }
# proc getIPs { parent debounce components modules} {
#   upvar $debounce deb
#   upvar $components comps
#   upvar $modules mods
#   if {$parent == ""} {
# 	set cells [get_bd_cells]	  
#   } else {
# 	set filtr [format {PATH !~ "%s/.*/.*"} $parent]
# 	set cells [get_bd_cells -of_objects [get_bd_cells $parent] -regexp -filter $filtr]
#   }
#   
#   set content {}
#   foreach cell [lsort -dictionary $cells] {
# 	set type [get_property TYPE [get_bd_cells -quiet $cell]]
# 	set name [get_property NAME [get_bd_cells -quiet $cell]]
# 	set vlnv [get_property VLNV [get_bd_cells -quiet $cell]]
# 	if {$type == "ip"} {
# 		set vlnvs [split $vlnv ":"]
# 		if {[lindex $vlnvs 0] == "FIT"} {
# 		 	switch [lindex $vlnvs 2] {
# 				"or" {
# 					append content [getGate $cell "or"]
# 				}
# 				"and" {
# 					append content [getGate $cell "and"]
# 				}
# 				"xor" {
# 					append content [getGate $cell "xor"]
# 				}
# 				"buf" {
# 					append content [getBuf $cell false]
# 				}
# 				"inv" {
# 					append content [getBuf $cell true]
# 				}
# 				"gnd" {
# 					append content [getSource $cell false]
# 				}
# 				"vcc" {
# 					append content [getSource $cell true]
# 				}
# 				"splitter" {
# 					append content [getSplitter $cell]
# 				}
# 				"mux" {
# 					append content [getMux $cell]
# 				}
# 				"dff" {
# 					append content [getDff $cell]
# 				}
# 				"debounce" {
# 					append content [getDebounce $cell]
# 					set deb true
# 				}
# 			}
# 		} elseif {[lindex $vlnvs 0] == "xilinx.com" && [lindex $vlnvs 1] == "module_ref"} {
# 			append content [getModule_ref $cell comps [lindex $vlnvs 2]]
# 		}
# 			
# 	} elseif {$type == "hier"} {
# 		append content [getHier $cell deb comps mods]
# 	}
#   }
#   return $content
# }
# set debounce_code "\n\n\nlibrary IEEE;
# use IEEE.STD_LOGIC_1164.ALL;
# use ieee.std_logic_unsigned.all;
# 
# entity debounce is
#     generic (
# 		width: integer := 22 -- 100 MHz clock -> 4 - simulation (90 ns); 22 - synthesis (ca. 20 ms)
# 	);
#     port (
# 		clk : in STD_LOGIC;
#         tl_in : in STD_LOGIC;
#         tl_out : out STD_LOGIC
# 	);
# end entity debounce;
# 
# architecture Behavioral of debounce is
# 
# signal cnt       : std_logic_vector(width-1 downto 0) := (others => '0');
# signal reset, ce : std_logic := '0';
# signal tl_prev   : std_logic := '0';
# 
# 
# begin
# 
#     counter: process(clk) begin
#         if rising_edge(clk) then 
#             if (reset = '1') then
#                 cnt <= (others => '0');
#             elsif (ce = '1') then
#                 cnt <= cnt + 1;
#             end if;
#         end if;
#     end process;
# 
#     process(clk) begin
#         if rising_edge(clk) then
#             if (tl_prev /= tl_in) then
#                 reset <= '1';
#             else 
#                 reset <= '0';
#             end if;
#         end if;
#     end process;
#                 
#     process(clk) begin
#         if rising_edge(clk) then
#             if (reset = '1') then
#                 tl_prev <= tl_in;
#             end if;
#         end if;
#     end process;
#                 
#     process(clk) begin
#         if rising_edge(clk) then
#             if ((cnt(width-1) = '1') and (cnt(0) = '0')) then
#                 tl_out <= tl_prev;
#             end if;
#         end if;
#     end process;
#                 
# 
#     ce <= '0' when ((cnt(width-1) = '1') and (cnt(0) = '1'))
#                 else '1';
# 
# end Behavioral;\n"
# proc vhdlTemplate { module } {
#   global debounce_code
#   global debounce_component
# 
#   set inPorts [lsort [get_bd_ports -quiet -filter DIR==I]]
#   array set inputBusPorts [list ]
#   set inputBitPorts [list]
#   sortPorts $inPorts inputBusPorts inputBitPorts
# 
#   set outPorts [lsort [get_bd_ports -quiet -filter DIR==O]]
#   array set outputBusPorts [list ]
#   set outputBitPorts [list]
#   sortPorts $outPorts outputBusPorts outputBitPorts
# 
#   set inoutPorts [lsort [get_bd_ports -quiet -filter DIR==IO]]
#   array set inoutBusPorts [list ]
#   set inoutBitPorts [list]
#   sortPorts $inoutPorts inoutBusPorts inoutBitPorts
# 
#   set lines [list]
#   # Process input single bit ports
# #   lappend lines "-- Input Ports - Single Bit"
#   foreach port [lsort -dictionary $inputBitPorts] {
#     lappend lines [list "$port" "in  std_logic;"]
#   }
#   # Process input bus ports
# #   lappend lines "-- Input Ports - Busses"
#   foreach {port busInfo} [array2sortedList inputBusPorts] {
#     lassign $busInfo stop start
#     if {$start>$stop} {
#       lappend lines [list "$port" "in  std_logic_vector($start downto $stop);"]
#     } else {
#       lappend lines [list "$port" "in  std_logic_vector($start to $stop);"]
#     }
#   }
#   # Process output single bit ports
# #   lappend lines "-- Output Ports - Single Bit"
#   foreach port [lsort -dictionary $outputBitPorts] {
#     lappend lines [list "$port" "out std_logic;"]
#   }
#   # Process output bus ports
# #   lappend lines "-- Output Ports - Busses"
#   foreach {port busInfo} [array2sortedList outputBusPorts] {
#     lassign $busInfo stop start
#     if {$start>$stop} {
#       lappend lines [list "$port"  "out std_logic_vector($start downto $stop);"]
#     } else {
#       lappend lines [list "$port" "out std_logic_vector($start to $stop);"]
#     }
#   }
#   # Process inout single bit ports
# #   lappend lines "-- InOut Ports - Single Bit"
#   foreach port [lsort -dictionary $inoutBitPorts] {
#     lappend lines [list "$port" "inout  std_logic;"]
#   }
#   # Process inout bus ports
# #   lappend lines "-- InOut Ports - Busses"
#   foreach {port busInfo} [array2sortedList inoutBusPorts] {
#     lassign $busInfo stop start
#     if {$start>$stop} {
#       lappend lines [list "$port" "inout  std_logic_vector($start downto $stop);"]
#     } else {
#       lappend lines [list "$port" "inout  std_logic_vector($start to $stop);"]
#     }
#   }
# 
#   # Detect maximum column width to align columns
#   foreach line $lines {
#     if {[regexp {^\s*\-\-} $line]} {
#       # Skip lines that are just comments
#       continue
#     }
#     set width [string length [lindex $line 0]]
#     if {![info exist maxWidth] || $maxWidth < $width} {
#       set maxWidth $width
#     }
#   }
# 
#   # Build the content of the stub:
#   set content {}
#   foreach line $lines {
#     if {[regexp {^\s*\-\-} $line]} {
#       # Lines that are just comments
#       append content "\n      $line"
#       continue
#     }
#     append content [format "\n      %-${maxWidth}s :  %-${maxWidth}s" [lindex $line 0] [lindex $line 1]]
#   }
# 
#   # Remove the last semi-colon
#   set index [string last {;} $content]
#   set content [string replace $content $index $index {}]
# 
# 
#   set nets [lsort [get_bd_nets -quiet]]
#   array set busNets [list ]
#   set bitNets [list]
#   sortNets $nets busNets bitNets
# 
#   set lines [list]
#   # Process single bit nets
#   foreach net [lsort -dictionary $bitNets] {
#     lappend lines [list "$net" "  std_logic;"]
#   }
#   # Process bus nets
#   foreach {net busInfo} [array2sortedList busNets] {
#     lassign $busInfo stop start
#     if {$start>$stop} {
#       lappend lines [list "$net" "  std_logic_vector($start downto $stop);"]
#     } else {
#       lappend lines [list "$net" "  std_logic_vector($start to $stop);"]
#     }
#   }
# 
#   # Detect maximum column width to align columns
#   foreach line $lines {
#     if {[regexp {^\s*\-\-} $line]} {
#       # Skip lines that are just comments
#       continue
#     }
#     set width [string length [lindex $line 0]]
#     if {![info exist maxWidth] || $maxWidth < $width} {
#       set maxWidth $width
#     }
#   }
# 
#   # Build the content of the stub:
#   set signals {}
#   foreach line $lines {
#     if {[regexp {^\s*\-\-} $line]} {
#       # Lines that are just comments
#       append signals "\n      $line"
#       continue
#     }
#     append signals [format "\n      signal %-${maxWidth}s :  %-${maxWidth}s" [lindex $line 0] [lindex $line 1]]
#   }
#   set ports2Signals {}
#   foreach port [lsort -dictionary $inPorts] {
# 	set port_name [get_property NAME [get_bd_ports -quiet $port]]
# 	set net [get_bd_nets -quiet -of_objects [get_bd_ports -quiet $port]]
# 	if {$net != ""} {
# 		set net_name [get_property NAME $net]
# 		append ports2Signals "\t$net_name <= $port_name;\n"
# 	} else {
# 		catch {common::send_msg_id "bd2vhdl   port-2" "CRITICAL WARNING" "${port_name}: port nepripojen!"}
# 	}
#   }
#   foreach port [lsort -dictionary $outPorts] {
# 	set port_name [get_property NAME [get_bd_ports -quiet $port]]
# 	set net [get_bd_nets -quiet -of_objects [get_bd_ports -quiet $port]]
# 	if {$net != ""} {
# 		set net_name [get_property NAME $net]
# 		append ports2Signals "\t$port_name <= $net_name;\n"
# 	} else {
# 		catch {common::send_msg_id "bd2vhdl   port-3" "CRITICAL WARNING" "${port_name}: port nepripojen!"}
# 	}
#   }
#   set debounce false
#   set components {}
#   set modules {}
#   set body [getIPs "" debounce components modules]
#   
#   if {$debounce} {
# 	  append components $debounce_component
#   }
#   # Now that the last semi-colon is replaced, add the header and footer
#   set content [format "library IEEE;
# use IEEE.std_logic_1164.all;
# 
# library xil_defaultlib;
# use xil_defaultlib.all;
# 
# entity ${module}_vhdl is
#    port (%s
#    );
# end entity ${module}_vhdl;
# 
# architecture Behavioral of ${module}_vhdl is
# %s
# %s
# begin
# %s
# %s
# end Behavioral;" $content $components $signals $ports2Signals $body]
# 
#   append content $modules
# 
#   if {$debounce} {
# 	  append content $debounce_code
#   }
# 
#   return $content
# }
# set name [current_bd_design -quiet]
# if {$name == ""} {
#     common::send_msg_id -continue "bd2vhdl design-2" "ERROR" "Je potreba otevrit block design!"
# 	return
# }
ERROR: [bd2vhdl design-2] Je potreba otevrit block design!
open_bd_design {X:/SAP/lab5/lab5.srcs/sources_1/bd/counter/counter.bd}
Adding cell -- xilinx.com:module_ref:next_state_logic:1.0 - next_state_logic_0
Successfully read diagram <counter> from BD file <X:/SAP/lab5/lab5.srcs/sources_1/bd/counter/counter.bd>
open_bd_design: Time (s): cpu = 00:00:09 ; elapsed = 00:00:09 . Memory (MB): peak = 982.941 ; gain = 89.441
create_bd_cell -type module -reference output_logic output_logic_0
INFO: [IP_Flow 19-234] Refreshing IP repositories
INFO: [IP_Flow 19-1700] Loaded user IP repository 'x:/SAP/lib_SAP_2022_02_02'.
set_property location {1 55 237} [get_bd_cells output_logic_0]
set_property location {1 36 35} [get_bd_cells next_state_logic_0]
source X:/SAP/lib_SAP_2022_02_02/gen_bd_vhdl.tcl
# proc sortPorts { ports &bus &bit } {
# 
#   upvar ${&bus} busPorts
#   upvar ${&bit} bitPorts
#   array set busPorts [list]
#   set bitPorts [list]
# 
#   foreach port $ports {
#     set name [get_property -quiet NAME [get_bd_ports $port]]
# 	set busStart [get_property -quiet LEFT [get_bd_ports $port]]
#     set busStop  [get_property -quiet RIGHT  [get_bd_ports $port]]
#     if {$busStart != {}} {
#     #   set busWidth [get_property -quiet BUS_WIDTH [get_ports $port]]
#       array set busPorts [list $name [list $busStop $busStart]]
#     } else {
#       lappend bitPorts $name
#     }
#   }
#   return 0
# }
# proc sortPins { pins &bus &bit } {
# 
#   upvar ${&bus} busPins
#   upvar ${&bit} bitPins
#   array set busPins [list]
#   array set bitPins [list]
# 
#   foreach pin $pins {
#     set name [get_property -quiet NAME [get_bd_pins $pin]]
# 	set dir [get_property -quiet DIR [get_bd_pins $pin]]
# 	set busStart [get_property -quiet LEFT [get_bd_pins $pin]]
#     set busStop  [get_property -quiet RIGHT  [get_bd_pins $pin]]
# 	set net [get_bd_nets -quiet -of_objects [get_bd_pins $pin]]
# 	if {$net != ""} {
# 		set net_name [get_property -quiet NAME $net]
# 	} else {
# 		if {$dir == "I"} {
# 			if {$busStart != {}} {
# 				set net_name "(others => '0')"
# 				catch {common::send_msg_id "bd2vhdl    pin-2" "CRITICAL WARNING" "${pin}: nepripojen, bude pripojen k '0'"}
# 			} else {
# 				set net_name "'0'"
# 				catch {common::send_msg_id "bd2vhdl    pin-2" "CRITICAL WARNING" "${pin}: nepripojen, bude pripojen k '0'"}
# 			}
# 		} else {
# 			set net_name "open"
# 			catch {common::send_msg_id "bd2vhdl    pin-3" "CRITICAL WARNING" "${pin}: pin odstranen, vystup neni pripojen!"}
# 		}
# 	}
# 	if {$busStart != {}} {
# 		array set busPins [list $name [list $busStop $busStart $net_name]]
# 	} else {
# 		array set bitPins [list $name $net_name]
# 	}
#   }
#   return 0
# }
# proc sortNets { nets &bus &bit } {
# 
#   upvar ${&bus} busNets
#   upvar ${&bit} bitNets
#   array set busNets [list ]
#   set bitNets [list]
# 
#   foreach net $nets {
#     set name [get_property -quiet NAME [get_bd_nets $net]]
# 	set pin [lindex [get_bd_pins -of_objects [get_bd_nets $net]] 0]
# 	set busStart [get_property -quiet LEFT [get_bd_pins $pin]]
#     set busStop  [get_property -quiet RIGHT  [get_bd_pins $pin]]
#     if {$busStart != {}} {
#     #   set busWidth [get_property -quiet BUS_WIDTH [get_ports $port]]
#       array set busNets [list $name [list $busStop $busStart]]
#     } else {
#       lappend bitNets $name
#     }
#   }
#   return 0
# }
# proc array2sortedList { &ar } {
# 
#   upvar ${&ar} ar
#   set sortedList [list]
#   foreach key [lsort -dictionary [array names ar]] {
#     lappend sortedList $key
#     lappend sortedList $ar($key)
#   }
#   return $sortedList
# }
# proc getInPinNet { cell pin default_value} {
# 	set pin [get_bd_pins -quiet $pin]
# 	set net [get_bd_nets -quiet -of_objects $pin]
# 	if {$net == ""} {
# 		catch {common::send_msg_id "bd2vhdl    pin-2" "CRITICAL WARNING" "${pin} nepripojen, bude pripojeno k $default_value"}
# 		set net_name $default_value
# 	} else {
# 		set net_name [get_property NAME $net]
# 	}
# 	return $net_name
# }
# proc getGate { cell  function} {
# 	set inputs_count [get_property CONFIG.Inputs [get_bd_cells -quiet $cell]]
# 	set content {}
# 	set prom {}
# 	set name [get_property NAME $cell]
# 	append content [format "\n\t-- %s\n" $name]
# 	for {set i 0} { $i < $inputs_count } { incr i } {
# 		set cfg [format "CONFIG.I%u_Inverted" $i]
# 		set pin [format "%s/I%u" $cell $i]
# 		set inverted [get_property $cfg  [get_bd_cells -quiet $cell]]
# 		#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 		set net_name [getInPinNet $cell $pin "\'0\'"]
# 		#set net_name [get_property NAME $net]
# 		if {$inverted == "true"} {
# 			append prom [format "not(%s)" $net_name]
# 		} else {
# 			append prom [format "%s" $net_name]
# 		}
# 		if {$i < ($inputs_count-1)} {
# 			append prom [format " %s " $function]
# 		}
# 	}
# 	set cfg [format "CONFIG.O_Inverted" $i]
# 	set pin [format "%s/O" $cell]
# 	set inverted [get_property $cfg  [get_bd_cells -quiet $cell]]
# 	set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 	if {$net != ""} {
# 		set out_name [get_property NAME $net]
# 		if {$inverted == "true"} {
# 			append content [format "\t%s <= not(%s);\n" $out_name $prom];	
# 		} else {
# 			append content [format "\t%s <= %s;\n" $out_name $prom];
# 		}
# 		return $content
# 	} else {
# 		catch {common::send_msg_id "bd2vhdl  jadro-3" "CRITICAL WARNING" "${cell}: odstraneno, vystup neni pripojen!"}
# 		return [append content "\t-- odstraneno, vystup neni pripojen\n"]
# 	}
# }
# proc getBuf { cell  function } {
# 	set content {}
# 	set name [get_property NAME $cell]
# 	append content [format "\n\t-- %s\n" $name]
# 
# 	set pin [format "%s/I" $cell]
# 	#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 	#set net_name [get_property NAME $net]
# 	set net_name [getInPinNet $cell $pin "\'0\'"]
# 
# 	set pin [format "%s/O" $cell]
# 	set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 	if {$net != ""} {
# 		set out_name [get_property NAME $net]
# 		if {$function == true} {
# 			append content [format "\t%s <= not(%s);\n" $out_name $net_name];	
# 		} else {
# 			append content  [format "\t%s <= %s;\n" $out_name $net_name];
# 		}
# 		return $content
# 	} else {
# 		catch {common::send_msg_id "bd2vhdl  jadro-3" "CRITICAL WARNING" "${cell}: odstraneno, vystup neni pripojen!"}
# 		return [append content "\t-- odstraneno, vystup neni pripojen\n"]
# 	}
# }
# proc getSource { cell  function } {
# 	set content {}
# 	set name [get_property NAME $cell]
# 	append content [format "\n\t-- %s\n" $name]
# 
# 	set pin [format "%s/O" $cell]
# 	set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 	if {$net != ""} {
# 		set out_name [get_property NAME $net]
# 		if {$function == true} {
# 			append content [format "\t%s <= '1';\n" $out_name];	
# 		} else {
# 			append content [format "\t%s <= '0';\n" $out_name];
# 		}
# 		return $content
# 	} else {
# 		catch {common::send_msg_id "bd2vhdl  jadro-3" "CRITICAL WARNING" "${cell}: odstraneno, vystup neni pripojen!"}
# 		return [append content "\t-- odstraneno, vystup neni pripojen\n"]
# 	}
# }
# proc getSplitter { cell } {
# 	set width [get_property CONFIG.WIDTH [get_bd_cells -quiet $cell]]
# 	set pin [format "%s/I" $cell]
# 	set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 	if {$net != ""} {
# 		set in_name [get_property NAME $net]
# 		set content {}
# 		set name [get_property NAME $cell]
# 		append content [format "\n\t-- %s\n" $name]
# 		for {set i 0} { $i < $width } { incr i } {
# 			set pin [format "%s/O%u" $cell $i]
# 			set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 			if {$net != ""} {
# 				set net_name [get_property NAME $net]
# 				append content [format "\t%s <= %s(%u);\n" $net_name $in_name $i]
# 			} else {
# 				catch {common::send_msg_id "bd2vhdl  jadro-3" "CRITICAL WARNING" "${cell}: ${pin} odstranen, vystup neni pripojen!"}
# 			}
# 		}
# 	} else {
# 		set content {}
# 		set name [get_property NAME $cell]
# 		append content [format "\n\t-- %s\n" $name]
# 		for {set i 0} { $i < $width } { incr i } {
# 			set pin [format "%s/O%u" $cell $i]
# 			set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 			if {$net != ""} {
# 				set net_name [get_property NAME $net]
# 				append content [format "\t%s <= \'0\';\n" $net_name $i]
# 				catch {common::send_msg_id "bd2vhdl  jadro-2" "CRITICAL WARNING" "${cell} nepripojen vstup, ${net_name} bude pripojeno k \'0\'"}
# 			} else {
# 				catch {common::send_msg_id "bd2vhdl  jadro-3" "CRITICAL WARNING" "${cell}: ${pin} odstranen, vystup neni pripojen!"}
# 			}
# 		}
# 	}
# 	return $content
# }
# proc getDff { cell } {
# 	set ce [get_property CONFIG.CE [get_bd_cells -quiet $cell]]
# 	set reset [get_property CONFIG.Reset [get_bd_cells -quiet $cell]]
# 
# 	set content {}
# 	set name [get_property NAME $cell]
# 	append content [format "\n\t-- %s\n" $name]
# 
# 	set pin [format "%s/q" $cell]
# 	set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 	if {$net != ""} {
# 		set out_name [get_property NAME $net]
# 
# 		set pin [format "%s/clk" $cell]
# 		set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 		if {$net == ""} {
# 			catch {common::send_msg_id "bd2vhdl  jadro-3" "CRITICAL WARNING" "${cell}: odstraneno, nejsou pripojene hodiny!"}
# 			return [append content "\t-- odstraneno, , nejsou pripojene hodiny!\n"]
# 		}
# 		#set clk_name [get_property NAME $net]
# 		set clk_name [getInPinNet $cell $pin "\'0\'"]
# 
# 		set pin [format "%s/d" $cell]
# 		#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 		#set in_name [get_property NAME $net]
# 		set in_name [getInPinNet $cell $pin "\'0\'"]
# 
# 		if {$ce == "true"} {
# 			set pin [format "%s/ce" $cell]
# 			#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 			#set ce_name [get_property NAME $net]
# 			set ce_name [getInPinNet $cell $pin "\'1\'"]
# 		}
# 
# 		if {$reset == "true"} {
# 			set pin [format "%s/reset" $cell]
# 			#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 			#set reset_name [get_property NAME $net]
# 			set reset_name [getInPinNet $cell $pin "\'0\'"]
# 		}
# 
# 		append content [format "\tprocess (%s)\n\tbegin\n" $clk_name]
# 		append content [format "\t\tif rising_edge(%s) then\n" $clk_name]
# 		if {$reset == "true"} {
# 			append content [format "\t\t\tif %s = '1' then\n\t\t\t\t%s <= '0';\n\t\t\tels" $reset_name $out_name]
# 		} else {
# 			append content "\t\t\t"
# 		}
# 
# 		if {$ce == "true"} {
# 			append content [format "if %s = '1' then\n" $ce_name]
# 			append content [format "\t\t\t\t%s <= %s;\n" $out_name $in_name]
# 			append content "\t\t\tend if;\n"
# 		} else {
# 			if {$reset == "true"} {
# 				append content [format "e\n\t\t\t\t%s <= %s;\n" $out_name $in_name]
# 				append content "\t\t\tend if;\n"
# 			} else {
# 				append content [format "%s <= %s;\n" $out_name $in_name]
# 			}
# 		}
# 
# 		append content "\t\tend if;\n\tend process;\n";
# 	} else {
# 		catch {common::send_msg_id "bd2vhdl jadro-3" "CRITICAL WARNING" "${cell}: odstraneno, vystup neni pripojen!"}
# 		return [append content "\t-- odstraneno, vystup neni pripojen\n"]
# 	}
# 	return $content
# }
# proc getMux { cell } {
# 	set ports_count [get_property CONFIG.Data_Ports [get_bd_cells -quiet $cell]]
# 	set width [get_property CONFIG.WIDTH [get_bd_cells -quiet $cell]]
# 	set i0_bus [get_property CONFIG.I0_BUS [get_bd_cells -quiet $cell]]
# 	set i1_bus [get_property CONFIG.I1_BUS [get_bd_cells -quiet $cell]]
# 	set i2_bus [get_property CONFIG.I2_BUS [get_bd_cells -quiet $cell]]
# 	set i3_bus [get_property CONFIG.I3_BUS [get_bd_cells -quiet $cell]]
# 	set o_bus [get_property CONFIG.O_BUS [get_bd_cells -quiet $cell]]
# 
# 	set content {}
# 	set name [get_property NAME $cell]
# 	append content [format "\n\t-- %s\n" $name]
# 
# 	for {set i 0} { $i < $width } { incr i } {
# 		if {$o_bus == "true"} {
# 			set pin [format "%s/O" $cell]
# 			set vecO [format "(%u)" $i]
# 		} else {
# 			set pin [format "%s/O_%u" $cell $i]
# 			set vecO ""
# 		}
# 		set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 		if {$net != ""} {
# 			set out_name [get_property NAME $net]
# 
# 			if {$i0_bus == "true"} {
# 				set pin [format "%s/I0" $cell]
# 				set vec0 [format "(%u)" $i]
# 			} else {
# 				set pin [format "%s/I0_%u" $cell $i]
# 				set vec0 ""
# 			}
# 			#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 			#set i0_name [get_property NAME $net]
# 			set i0_name [getInPinNet $cell $pin "\'0\'"]
# 			if {$i0_name == "'0'"} {
# 				set vec0 ""
# 			}
# 
# 			if {$i1_bus == "true"} {
# 				set pin [format "%s/I1" $cell]
# 				set vec1 [format "(%u)" $i]
# 			} else {
# 				set pin [format "%s/I1_%u" $cell $i]
# 				set vec1 ""
# 			}
# 			#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 			#set i1_name [get_property NAME $net]
# 			set i1_name [getInPinNet $cell $pin "\'0\'"]
# 			if {$i1_name == "'0'"} {
# 				set vec1 ""
# 			}
# 
# 			set pin [format "%s/Sel0" $cell]
# 			#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 			#set sel0_name [get_property NAME $net]
# 			set sel0_name [getInPinNet $cell $pin "\'0\'"]
# 
# 			if {$ports_count > 2} {
# 				if {$i2_bus == "true"} {
# 					set pin [format "%s/I2" $cell]
# 					set vec2 [format "(%u)" $i]
# 				} else {
# 					set pin [format "%s/I2_%u" $cell $i]
# 					set vec2 ""
# 				}
# 				#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 				#set i2_name [get_property NAME $net]
# 				set i2_name [getInPinNet $cell $pin "\'0\'"]
# 				if {$i2_name == "'0'"} {
# 					set vec2 ""
# 				}
# 
# 				if {$i3_bus == "true"} {
# 					set pin [format "%s/I3" $cell]
# 					set vec3 [format "(%u)" $i]
# 				} else {
# 					set pin [format "%s/I3_%u" $cell $i]
# 					set vec3 ""
# 				}
# 				#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 				#set i3_name [get_property NAME $net]
# 				set i3_name [getInPinNet $cell $pin "\'0\'"]
# 				if {$i3_name == "'0'"} {
# 					set vec3 ""
# 				}
# 
# 				set pin [format "%s/Sel1" $cell]
# 				#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 				#set sel1_name [get_property NAME $net]
# 				set sel1_name [getInPinNet $cell $pin "\'0\'"]
# 				
# 				if {$sel0_name != "'0'" && $sel1_name != "'0'"} {
# 					append content [format "\t%s%s <= %s%s when %s = '0' and %s = '0' else\n" $out_name $vecO $i0_name $vec0 $sel1_name $sel0_name]
# 					append content [format "\t\t%s%s when %s = '0' and %s = '1' else\n" $i1_name $vec1 $sel1_name $sel0_name]
# 					append content [format "\t\t%s%s when %s = '1' and %s = '0' else\n" $i2_name $vec2 $sel1_name $sel0_name]
# 					append content [format "\t\t%s%s when %s = '1' and %s = '1' else '0';\n\n" $i3_name $vec3 $sel1_name $sel0_name]
# 				} else {
# 					append content [format "\t%s%s <= %s%s;\n" $out_name $vecO $i0_name $vec0]
# 				}
# 			} else {
# 				if {$sel0_name != "'0'"} {
# 					append content [format "\t%s%s <= %s%s when (%s = '1') else %s%s;\n" $out_name $vecO $i1_name $vec1 $sel0_name $i0_name $vec0]
# 				} else {
# 					append content [format "\t%s%s <= %s%s;\n" $out_name $vecO $i0_name $vec0]
# 				}
# 			}
# 		} else {
# 			catch {common::send_msg_id "bd2vhdl  jadro-3" "CRITICAL WARNING" " ${cell}: pin ${pin} odstranen, vystup neni pripojen!"}
# 			return [append content "\t-- ${pin} odstranen, vystup neni pripojen\n"]
# 		}
# 		
# 	}
# 	return $content
# }
# proc getDebounce { cell } {
# 	set width [get_property CONFIG.width [get_bd_cells -quiet $cell]]
# 
# 	set content {}
# 	set name [get_property NAME $cell]
# 	append content [format "\n\t-- %s\n" $name]
# 
# 	set pin [format "%s/tl_out" $cell]
# 	set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 	if {$net != ""} {
# 		set tl_out [get_property NAME $net]
# 
# 		set pin [format "%s/clk" $cell]
# 		set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 		if {$net != ""} {
# 			set clk [get_property NAME $net]
# 
# 			set pin [format "%s/tl_in" $cell]
# 			#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 			#set tl_in [get_property NAME $net]
# 			set tl_in [getInPinNet $cell $pin "\'0\'"]
# 
# 			append content [ format "\t%s : debounce\n\t\tgeneric map (\n\t\t\twidth => %s\n\t\t)\n\t\tport map (\n\t\t\tclk	=> %s,\n\t\t\ttl_in	=> %s,\n\t\t\ttl_out	=> %s\n\t\t);\n" $name $width $clk $tl_in $tl_out]
# 		} else {
# 			catch {common::send_msg_id "bd2vhdl  jadro-3" "CRITICAL WARNING" "${cell}: odstraneno, nejsou pripojene hodiny!"}
# 			return [append content "\t-- odstraneno, , nejsou pripojene hodiny!\n"]	
# 		}
# 	} else {
# 		catch {common::send_msg_id "bd2vhdl  jadro-3" "CRITICAL WARNING" "${cell}: odstraneno, vystup neni pripojen!"}
# 		return [append content "\t-- odstraneno, vystup neni pripojen\n"]
# 	}
# 	
# 	return $content
# }
# set debounce_component "\tcomponent debounce
# \t\tgeneric (
# \t\t\twidth: integer := 22
# \t\t);
# \t\tport (
# \t\t\tclk    : in  std_logic;
# \t\t\ttl_in  : in  std_logic;
# \t\t\ttl_out : out std_logic
# \t\t);
# \tend component;\n"
# proc getModule_ref { cell components component_name} {
# 	upvar $components comps
# 
# 	set inPins [lsort [get_bd_pins -quiet -of_objects [get_bd_cells $cell] -filter DIR==I]]
# 	array set inputBusPins [list]
# 	array set inputBitPins [list]
# 	sortPins $inPins inputBusPins inputBitPins
# 
# 	set outPins [lsort [get_bd_pins -quiet -of_objects [get_bd_cells $cell] -filter DIR==O]]
# 	array set outputBusPins [list]
# 	array set outputBitPins [list]
# 	sortPins $outPins outputBusPins outputBitPins
# 
# 	set content {}
# 	set name [get_property NAME $cell]
# 	append content [format "\n\t-- %s\n" $name]
# 
# 	set lines [list]
# 	foreach {pin net} [array2sortedList inputBitPins] {
#     	lappend lines [list "$pin" "in  std_logic;" "$net"]
#   	}
# 	foreach {pin busInfo} [array2sortedList inputBusPins] {
# 		lassign $busInfo stop start net
# 		if {$start>$stop} {
# 			lappend lines [list "$pin" "in  std_logic_vector($start downto $stop);" "$net"]
# 		} else {
# 			lappend lines [list "$pin" "in  std_logic_vector($start to $stop);" "$net"]
# 		}
#   	}
# 	foreach {pin net} [array2sortedList outputBitPins] {
#     	lappend lines [list "$pin" "out std_logic;" "$net"]
# 	}
# 	foreach {pin busInfo} [array2sortedList outputBusPins] {
# 		lassign $busInfo stop start net
# 		if {$start>$stop} {
# 			lappend lines [list "$pin"  "out std_logic_vector($start downto $stop);" "$net"]
# 		} else {
# 			lappend lines [list "$pin" "out std_logic_vector($start to $stop);" "$net"]
# 		}
# 	}
# 	# Detect maximum column width to align columns
# 	foreach line $lines {
# 		set width [string length [lindex $line 0]]
# 		if {![info exist maxWidth] || $maxWidth < $width} {
# 			set maxWidth $width
# 		}
# 	}
# 	set ports {}
# 	set port_map {}
# 	foreach line $lines {
# 		append ports [format "\n\t\t\t%-${maxWidth}s :  %-${maxWidth}s" [lindex $line 0] [lindex $line 1]]
# 		append port_map [format "\n\t\t\t%-${maxWidth}s =>  %-${maxWidth}s," [lindex $line 0] [lindex $line 2]]
# 	}
# 	# Remove the last semi-colon
#   	set index [string last {;} $ports]
#   	set ports [string replace $ports $index $index {}]
# 	# Remove the last ,
#   	set index [string last {,} $port_map]
#   	set port_map [string replace $port_map $index $index {}]
# 
# 	# nepridavat pokud uz tam ta komponenta je
# 	if {[string first $component_name $comps] < 0} {
# 		append comps "\tcomponent ${component_name}\n\t\tport ("
# 		append comps $ports
# 		append comps "\n\t\t);\n\tend component;\n\n"
# 	}
# 	append content "\tinst_${name} : ${component_name}\n"
# 	append content "\t\tport map ("
# 	append content $port_map
# 	append content "\n\t\t);\n"
# }
# proc getHier { cell debounce components modules} {
# 	global debounce_component
# 	upvar $components comps
# 	upvar $modules mods
# 	upvar $debounce debs
# 
# 	set inPins [lsort [get_bd_pins -quiet -of_objects [get_bd_cells $cell] -filter DIR==I]]
# 	array set inputBusPins [list]
# 	array set inputBitPins [list]
# 	sortPins $inPins inputBusPins inputBitPins
# 
# 	set outPins [lsort [get_bd_pins -quiet -of_objects [get_bd_cells $cell] -filter DIR==O]]
# 	array set outputBusPins [list]
# 	array set outputBitPins [list]
# 	sortPins $outPins outputBusPins outputBitPins
# 
# 	set content {}
# 	set name [get_property NAME $cell]
# 	append content [format "\n\t-- %s\n" $name]
# 
# 	set lines [list]
# 	foreach {pin net} [array2sortedList inputBitPins] {
#     	lappend lines [list "$pin" "in  std_logic;" "$net"]
#   	}
# 	foreach {pin busInfo} [array2sortedList inputBusPins] {
# 		lassign $busInfo stop start net
# 		if {$start>$stop} {
# 			lappend lines [list "$pin" "in  std_logic_vector($start downto $stop);" "$net"]
# 		} else {
# 			lappend lines [list "$pin" "in  std_logic_vector($start to $stop);" "$net"]
# 		}
#   	}
# 	foreach {pin net} [array2sortedList outputBitPins] {
#     	lappend lines [list "$pin" "out std_logic;" "$net"]
# 	}
# 	foreach {pin busInfo} [array2sortedList outputBusPins] {
# 		lassign $busInfo stop start net
# 		if {$start>$stop} {
# 			lappend lines [list "$pin"  "out std_logic_vector($start downto $stop);" "$net"]
# 		} else {
# 			lappend lines [list "$pin" "out std_logic_vector($start to $stop);" "$net"]
# 		}
# 	}
# 	# Detect maximum column width to align columns
# 	foreach line $lines {
# 		set width [string length [lindex $line 0]]
# 		if {![info exist maxWidth] || $maxWidth < $width} {
# 			set maxWidth $width
# 		}
# 	}
# 	set ports {}
# 	set port_map {}
# 	foreach line $lines {
# 		append ports [format "\n\t\t\t%-${maxWidth}s :  %-${maxWidth}s" [lindex $line 0] [lindex $line 1]]
# 		append port_map [format "\n\t\t\t%-${maxWidth}s =>  %-${maxWidth}s," [lindex $line 0] [lindex $line 2]]
# 	}
# 	# Remove the last semi-colon
#   	set index [string last {;} $ports]
#   	set ports [string replace $ports $index $index {}]
# 	# Remove the last ,
#   	set index [string last {,} $port_map]
#   	set port_map [string replace $port_map $index $index {}]
# 
# 	set filtr [format {PATH !~ "%s/.*/.*"} $cell]
# 	set nets [lsort [get_bd_nets -quiet -of_objects [get_bd_cells $cell] -regexp -filter $filtr]]
# 	array set busNets [list ]
# 	set bitNets [list]
# 	sortNets $nets busNets bitNets
# 
# 	set lines [list]
# 	# Process single bit nets
# 	foreach net [lsort -dictionary $bitNets] {
# 		lappend lines [list "$net" "  std_logic;"]
# 	}
# 	# Process bus nets
# 	foreach {net busInfo} [array2sortedList busNets] {
# 		lassign $busInfo stop start
# 		if {$start>$stop} {
# 		lappend lines [list "$net" "  std_logic_vector($start downto $stop);"]
# 		} else {
# 		lappend lines [list "$net" "  std_logic_vector($start to $stop);"]
# 		}
# 	}
# 
# 	# Detect maximum column width to align columns
# 	foreach line $lines {
# 		set width [string length [lindex $line 0]]
# 		if {![info exist maxWidth] || $maxWidth < $width} {
# 			set maxWidth $width
# 		}
# 	}
# 
# 	# Build the content of the stub:
# 	set signals {}
# 	foreach line $lines {
# 		append signals [format "\n\tsignal %-${maxWidth}s :  %-${maxWidth}s" [lindex $line 0] [lindex $line 1]]
# 	}
#   set ports2Signals {}
#     foreach net [lsort -dictionary $nets] {
#         set net_name [get_property NAME [get_bd_nets -quiet $net]]
#         set ports_b [get_bd_ports -quiet -of_objects [get_bd_nets -quiet $net]]
#         if {$ports == {}} {
#             break
#         }
#         foreach port [lsort -dictionary $ports_b] {
#             set port_name [get_property NAME [get_bd_pins -quiet $port]]
#             set dir [get_property DIR [get_bd_pins -quiet $port]]
#             if {$dir == "I"} {
#                 append ports2Signals "\t$net_name <= $port_name;\n"    
#             } else {
#                 append ports2Signals "\t$port_name <= $net_name;\n"
#             }
#         }
#     }
#   
# 	set debounce_inner false
#   	set components_inner {}
#   	set modules_inner {}
#   	set body [getIPs $cell debounce_inner components_inner modules_inner]
# 	if {$debounce_inner} {
# 		puts "######################################################################x"
# 		append components_inner $debounce_component
# 		set debs true
#     }
# 	
# 	set comp_name [string replace $cell 0 0 {}]
#     set comp_name [string map {/ _} $comp_name]
#     append comps "\tcomponent ${comp_name}\n\t\tport ("
#     append mods "\n\nlibrary IEEE;\nuse IEEE.std_logic_1164.all;\n\n"
#     append mods "entity ${comp_name} is\n\tport("
#     append mods $ports
#     append comps $ports
#     append mods "\n\t\t);\nend entity ${comp_name};\n\narchitecture Behavioral of ${comp_name} is\n"
#     append mods $components_inner
#     append mods $signals
#     append mods "\nbegin\n"
#     append mods $ports2Signals
#     append mods $body
#     append mods "\nend Behavioral;"
#     append comps "\n\t\t);\n\tend component;\n\n"
#     append content "\tinst_${comp_name} : ${comp_name}\n"
#     append content "\t\tport map ("
#     append content $port_map
#     append content "\n\t\t);\n"
#     append mods $modules_inner
# 
# 	return $content
# }
# proc getIPs { parent debounce components modules} {
#   upvar $debounce deb
#   upvar $components comps
#   upvar $modules mods
#   if {$parent == ""} {
# 	set cells [get_bd_cells]	  
#   } else {
# 	set filtr [format {PATH !~ "%s/.*/.*"} $parent]
# 	set cells [get_bd_cells -of_objects [get_bd_cells $parent] -regexp -filter $filtr]
#   }
#   
#   set content {}
#   foreach cell [lsort -dictionary $cells] {
# 	set type [get_property TYPE [get_bd_cells -quiet $cell]]
# 	set name [get_property NAME [get_bd_cells -quiet $cell]]
# 	set vlnv [get_property VLNV [get_bd_cells -quiet $cell]]
# 	if {$type == "ip"} {
# 		set vlnvs [split $vlnv ":"]
# 		if {[lindex $vlnvs 0] == "FIT"} {
# 		 	switch [lindex $vlnvs 2] {
# 				"or" {
# 					append content [getGate $cell "or"]
# 				}
# 				"and" {
# 					append content [getGate $cell "and"]
# 				}
# 				"xor" {
# 					append content [getGate $cell "xor"]
# 				}
# 				"buf" {
# 					append content [getBuf $cell false]
# 				}
# 				"inv" {
# 					append content [getBuf $cell true]
# 				}
# 				"gnd" {
# 					append content [getSource $cell false]
# 				}
# 				"vcc" {
# 					append content [getSource $cell true]
# 				}
# 				"splitter" {
# 					append content [getSplitter $cell]
# 				}
# 				"mux" {
# 					append content [getMux $cell]
# 				}
# 				"dff" {
# 					append content [getDff $cell]
# 				}
# 				"debounce" {
# 					append content [getDebounce $cell]
# 					set deb true
# 				}
# 			}
# 		} elseif {[lindex $vlnvs 0] == "xilinx.com" && [lindex $vlnvs 1] == "module_ref"} {
# 			append content [getModule_ref $cell comps [lindex $vlnvs 2]]
# 		}
# 			
# 	} elseif {$type == "hier"} {
# 		append content [getHier $cell deb comps mods]
# 	}
#   }
#   return $content
# }
# set debounce_code "\n\n\nlibrary IEEE;
# use IEEE.STD_LOGIC_1164.ALL;
# use ieee.std_logic_unsigned.all;
# 
# entity debounce is
#     generic (
# 		width: integer := 22 -- 100 MHz clock -> 4 - simulation (90 ns); 22 - synthesis (ca. 20 ms)
# 	);
#     port (
# 		clk : in STD_LOGIC;
#         tl_in : in STD_LOGIC;
#         tl_out : out STD_LOGIC
# 	);
# end entity debounce;
# 
# architecture Behavioral of debounce is
# 
# signal cnt       : std_logic_vector(width-1 downto 0) := (others => '0');
# signal reset, ce : std_logic := '0';
# signal tl_prev   : std_logic := '0';
# 
# 
# begin
# 
#     counter: process(clk) begin
#         if rising_edge(clk) then 
#             if (reset = '1') then
#                 cnt <= (others => '0');
#             elsif (ce = '1') then
#                 cnt <= cnt + 1;
#             end if;
#         end if;
#     end process;
# 
#     process(clk) begin
#         if rising_edge(clk) then
#             if (tl_prev /= tl_in) then
#                 reset <= '1';
#             else 
#                 reset <= '0';
#             end if;
#         end if;
#     end process;
#                 
#     process(clk) begin
#         if rising_edge(clk) then
#             if (reset = '1') then
#                 tl_prev <= tl_in;
#             end if;
#         end if;
#     end process;
#                 
#     process(clk) begin
#         if rising_edge(clk) then
#             if ((cnt(width-1) = '1') and (cnt(0) = '0')) then
#                 tl_out <= tl_prev;
#             end if;
#         end if;
#     end process;
#                 
# 
#     ce <= '0' when ((cnt(width-1) = '1') and (cnt(0) = '1'))
#                 else '1';
# 
# end Behavioral;\n"
# proc vhdlTemplate { module } {
#   global debounce_code
#   global debounce_component
# 
#   set inPorts [lsort [get_bd_ports -quiet -filter DIR==I]]
#   array set inputBusPorts [list ]
#   set inputBitPorts [list]
#   sortPorts $inPorts inputBusPorts inputBitPorts
# 
#   set outPorts [lsort [get_bd_ports -quiet -filter DIR==O]]
#   array set outputBusPorts [list ]
#   set outputBitPorts [list]
#   sortPorts $outPorts outputBusPorts outputBitPorts
# 
#   set inoutPorts [lsort [get_bd_ports -quiet -filter DIR==IO]]
#   array set inoutBusPorts [list ]
#   set inoutBitPorts [list]
#   sortPorts $inoutPorts inoutBusPorts inoutBitPorts
# 
#   set lines [list]
#   # Process input single bit ports
# #   lappend lines "-- Input Ports - Single Bit"
#   foreach port [lsort -dictionary $inputBitPorts] {
#     lappend lines [list "$port" "in  std_logic;"]
#   }
#   # Process input bus ports
# #   lappend lines "-- Input Ports - Busses"
#   foreach {port busInfo} [array2sortedList inputBusPorts] {
#     lassign $busInfo stop start
#     if {$start>$stop} {
#       lappend lines [list "$port" "in  std_logic_vector($start downto $stop);"]
#     } else {
#       lappend lines [list "$port" "in  std_logic_vector($start to $stop);"]
#     }
#   }
#   # Process output single bit ports
# #   lappend lines "-- Output Ports - Single Bit"
#   foreach port [lsort -dictionary $outputBitPorts] {
#     lappend lines [list "$port" "out std_logic;"]
#   }
#   # Process output bus ports
# #   lappend lines "-- Output Ports - Busses"
#   foreach {port busInfo} [array2sortedList outputBusPorts] {
#     lassign $busInfo stop start
#     if {$start>$stop} {
#       lappend lines [list "$port"  "out std_logic_vector($start downto $stop);"]
#     } else {
#       lappend lines [list "$port" "out std_logic_vector($start to $stop);"]
#     }
#   }
#   # Process inout single bit ports
# #   lappend lines "-- InOut Ports - Single Bit"
#   foreach port [lsort -dictionary $inoutBitPorts] {
#     lappend lines [list "$port" "inout  std_logic;"]
#   }
#   # Process inout bus ports
# #   lappend lines "-- InOut Ports - Busses"
#   foreach {port busInfo} [array2sortedList inoutBusPorts] {
#     lassign $busInfo stop start
#     if {$start>$stop} {
#       lappend lines [list "$port" "inout  std_logic_vector($start downto $stop);"]
#     } else {
#       lappend lines [list "$port" "inout  std_logic_vector($start to $stop);"]
#     }
#   }
# 
#   # Detect maximum column width to align columns
#   foreach line $lines {
#     if {[regexp {^\s*\-\-} $line]} {
#       # Skip lines that are just comments
#       continue
#     }
#     set width [string length [lindex $line 0]]
#     if {![info exist maxWidth] || $maxWidth < $width} {
#       set maxWidth $width
#     }
#   }
# 
#   # Build the content of the stub:
#   set content {}
#   foreach line $lines {
#     if {[regexp {^\s*\-\-} $line]} {
#       # Lines that are just comments
#       append content "\n      $line"
#       continue
#     }
#     append content [format "\n      %-${maxWidth}s :  %-${maxWidth}s" [lindex $line 0] [lindex $line 1]]
#   }
# 
#   # Remove the last semi-colon
#   set index [string last {;} $content]
#   set content [string replace $content $index $index {}]
# 
# 
#   set nets [lsort [get_bd_nets -quiet]]
#   array set busNets [list ]
#   set bitNets [list]
#   sortNets $nets busNets bitNets
# 
#   set lines [list]
#   # Process single bit nets
#   foreach net [lsort -dictionary $bitNets] {
#     lappend lines [list "$net" "  std_logic;"]
#   }
#   # Process bus nets
#   foreach {net busInfo} [array2sortedList busNets] {
#     lassign $busInfo stop start
#     if {$start>$stop} {
#       lappend lines [list "$net" "  std_logic_vector($start downto $stop);"]
#     } else {
#       lappend lines [list "$net" "  std_logic_vector($start to $stop);"]
#     }
#   }
# 
#   # Detect maximum column width to align columns
#   foreach line $lines {
#     if {[regexp {^\s*\-\-} $line]} {
#       # Skip lines that are just comments
#       continue
#     }
#     set width [string length [lindex $line 0]]
#     if {![info exist maxWidth] || $maxWidth < $width} {
#       set maxWidth $width
#     }
#   }
# 
#   # Build the content of the stub:
#   set signals {}
#   foreach line $lines {
#     if {[regexp {^\s*\-\-} $line]} {
#       # Lines that are just comments
#       append signals "\n      $line"
#       continue
#     }
#     append signals [format "\n      signal %-${maxWidth}s :  %-${maxWidth}s" [lindex $line 0] [lindex $line 1]]
#   }
#   set ports2Signals {}
#   foreach port [lsort -dictionary $inPorts] {
# 	set port_name [get_property NAME [get_bd_ports -quiet $port]]
# 	set net [get_bd_nets -quiet -of_objects [get_bd_ports -quiet $port]]
# 	if {$net != ""} {
# 		set net_name [get_property NAME $net]
# 		append ports2Signals "\t$net_name <= $port_name;\n"
# 	} else {
# 		catch {common::send_msg_id "bd2vhdl   port-2" "CRITICAL WARNING" "${port_name}: port nepripojen!"}
# 	}
#   }
#   foreach port [lsort -dictionary $outPorts] {
# 	set port_name [get_property NAME [get_bd_ports -quiet $port]]
# 	set net [get_bd_nets -quiet -of_objects [get_bd_ports -quiet $port]]
# 	if {$net != ""} {
# 		set net_name [get_property NAME $net]
# 		append ports2Signals "\t$port_name <= $net_name;\n"
# 	} else {
# 		catch {common::send_msg_id "bd2vhdl   port-3" "CRITICAL WARNING" "${port_name}: port nepripojen!"}
# 	}
#   }
#   set debounce false
#   set components {}
#   set modules {}
#   set body [getIPs "" debounce components modules]
#   
#   if {$debounce} {
# 	  append components $debounce_component
#   }
#   # Now that the last semi-colon is replaced, add the header and footer
#   set content [format "library IEEE;
# use IEEE.std_logic_1164.all;
# 
# library xil_defaultlib;
# use xil_defaultlib.all;
# 
# entity ${module}_vhdl is
#    port (%s
#    );
# end entity ${module}_vhdl;
# 
# architecture Behavioral of ${module}_vhdl is
# %s
# %s
# begin
# %s
# %s
# end Behavioral;" $content $components $signals $ports2Signals $body]
# 
#   append content $modules
# 
#   if {$debounce} {
# 	  append content $debounce_code
#   }
# 
#   return $content
# }
# set name [current_bd_design -quiet]
# if {$name == ""} {
#     common::send_msg_id -continue "bd2vhdl design-2" "ERROR" "Je potreba otevrit block design!"
# 	return
# }
# save_bd_design $name
Wrote  : <X:/SAP/lab5/lab5.srcs/sources_1/bd/counter/counter.bd> 
Wrote  : <X:/SAP/lab5/lab5.srcs/sources_1/bd/counter/ui/bd_1aeeb13c.ui> 
# validate_bd_design -force
CRITICAL WARNING: [BD 41-759] The input pins (listed below) are either not connected or do not have a source port, and they don't have a tie-off specified. These pins are tied-off to all 0's to avoid error in Implementation flow.
Please check your design and connect them as needed: 
/next_state_logic_0/q0
/next_state_logic_0/q1
/next_state_logic_0/q2
/next_state_logic_0/inc
/next_state_logic_0/dir
/output_logic_0/q0
/output_logic_0/q1
/output_logic_0/q2
/output_logic_0/inc
/output_logic_0/dir

# if { [llength [get_bd_ports]] > 0 } {
# 	puts "\n##### ${name} #####"
# 	set content [vhdlTemplate $name]
# 	set PROJ_DIR [get_property DIRECTORY [current_project]]
# 	set PROJ_DIR [file normalize $PROJ_DIR]
# 	set tmp_dir [file join $PROJ_DIR "tmp"]
# 	file mkdir $tmp_dir
# 	set filename "${name}.vhd"
# 	set filename_path [file join $tmp_dir $filename]
# 	# Save the template
# 	set mode {w}
# 	puts "\nCreating VHDL for Design $name in [file normalize $filename]\n"
# 	set tfh [open $filename_path $mode]
# 	puts $tfh $content
# 	close $tfh
# 
# 	import_files -force -norecurse $filename_path
# 	common::send_msg_id "bd2vhdl design-1" "INFO" "${name}_vhdl.vhd vygenerovan"
# } else {
# 	common::send_msg_id -continue "bd2vhdl design-3" "ERROR" "${name} neobsahuje zadne porty!"
# }
WARNING: [BD 5-236] No ports matched 'get_bd_ports'
ERROR: [bd2vhdl design-3] counter neobsahuje zadne porty!
save_bd_design
Wrote  : <X:/SAP/lab5/lab5.srcs/sources_1/bd/counter/counter.bd> 
launch_simulation
INFO: [Vivado 12-5682] Launching behavioral simulation in 'X:/SAP/lab5/lab5.sim/sim_1/behav/xsim'
INFO: [SIM-utils-51] Simulation object is 'sim_1'
INFO: [USF-XSim-7] Finding pre-compiled libraries...
INFO: [USF-XSim-11] File 'C:/Xilinx/Vivado/2018.2/data/xsim/xsim.ini' copied to run dir:'X:/SAP/lab5/lab5.sim/sim_1/behav/xsim'
INFO: [SIM-utils-54] Inspecting design source files for 'automat_test' in fileset 'sim_1'...
INFO: [USF-XSim-97] Finding global include files...
INFO: [USF-XSim-98] Fetching design files from 'sim_1'...
INFO: [USF-XSim-2] XSim::Compile design
INFO: [USF-XSim-61] Executing 'COMPILE and ANALYZE' step in 'X:/SAP/lab5/lab5.sim/sim_1/behav/xsim'
"xvhdl --incr --relax -prj automat_test_vhdl.prj"
INFO: [VRFC 10-163] Analyzing VHDL file "X:/SAP/lab5/lab5.srcs/sources_1/imports/SAP/l4_next_state_logic.vhd" into library xil_defaultlib
INFO: [VRFC 10-307] analyzing entity next_state_logic
INFO: [VRFC 10-163] Analyzing VHDL file "X:/SAP/lab5/lab5.srcs/sources_1/imports/SAP/l4_output_logic.vhd" into library xil_defaultlib
INFO: [VRFC 10-307] analyzing entity output_logic
ERROR: [VRFC 10-91] c is not declared [X:/SAP/lab5/lab5.srcs/sources_1/imports/SAP/l4_output_logic.vhd:46]
ERROR: [VRFC 10-91] b is not declared [X:/SAP/lab5/lab5.srcs/sources_1/imports/SAP/l4_output_logic.vhd:47]
ERROR: [VRFC 10-91] a is not declared [X:/SAP/lab5/lab5.srcs/sources_1/imports/SAP/l4_output_logic.vhd:48]
ERROR: [VRFC 10-1504] unit behavioral ignored due to previous errors [X:/SAP/lab5/lab5.srcs/sources_1/imports/SAP/l4_output_logic.vhd:17]
INFO: [VRFC 10-240] VHDL file X:/SAP/lab5/lab5.srcs/sources_1/imports/SAP/l4_output_logic.vhd ignored due to errors
INFO: [USF-XSim-69] 'compile' step finished in '2' seconds
INFO: [USF-XSim-99] Step results log file:'X:/SAP/lab5/lab5.sim/sim_1/behav/xsim/xvhdl.log'
ERROR: [USF-XSim-62] 'compile' step failed with error(s). Please check the Tcl console output or 'X:/SAP/lab5/lab5.sim/sim_1/behav/xsim/xvhdl.log' file for more information.
ERROR: [Vivado 12-4473] Detected error while running simulation. Please correct the issue and retry this operation.
ERROR: [Common 17-39] 'launch_simulation' failed due to earlier errors.
startgroup
create_bd_cell -type ip -vlnv FIT:user:gnd:1.0 gnd_0
endgroup
delete_bd_objs [get_bd_cells gnd_0]
save_bd_design
Wrote  : <X:/SAP/lab5/lab5.srcs/sources_1/bd/counter/counter.bd> 
Wrote  : <X:/SAP/lab5/lab5.srcs/sources_1/bd/counter/ui/bd_1aeeb13c.ui> 
startgroup
create_bd_cell -type ip -vlnv FIT:user:dff:1.0 dff_0
endgroup
startgroup
create_bd_cell -type ip -vlnv FIT:user:dff:1.0 dff_1
endgroup
set_property location {0.5 -168 -74} [get_bd_cells next_state_logic_0]
set_property location {3.5 312 -70} [get_bd_cells output_logic_0]
set_property location {2 14 -117} [get_bd_cells dff_0]
set_property location {2.5 137 -53} [get_bd_cells output_logic_0]
startgroup
make_bd_pins_external  [get_bd_cells next_state_logic_0]
make_bd_intf_pins_external  [get_bd_cells next_state_logic_0]
INFO: [BD 5-409] No interface pins to be made external for /next_state_logic_0
endgroup
delete_bd_objs [get_bd_nets next_state_logic_0_d0] [get_bd_ports d0_0]
delete_bd_objs [get_bd_nets next_state_logic_0_d1] [get_bd_ports d1_0]
delete_bd_objs [get_bd_nets next_state_logic_0_d2] [get_bd_ports d2_0]
set_property name q0 [get_bd_ports q0_0]
set_property name q1 [get_bd_ports q1_0]
set_property name q2 [get_bd_ports q2_0]
set_property name inc [get_bd_ports inc_0]
set_property name dir [get_bd_ports dir_0]
set_property location {3.5 270 -55} [get_bd_cells output_logic_0]
startgroup
create_bd_cell -type ip -vlnv FIT:user:gnd:1.0 gnd_0
endgroup
startgroup
create_bd_cell -type ip -vlnv FIT:user:gnd:1.0 gnd_1
endgroup
delete_bd_objs [get_bd_nets dir_0_1] [get_bd_ports dir]
connect_bd_net [get_bd_pins gnd_0/O] [get_bd_pins next_state_logic_0/dir]
save_bd_design
Wrote  : <X:/SAP/lab5/lab5.srcs/sources_1/bd/counter/counter.bd> 
Wrote  : <X:/SAP/lab5/lab5.srcs/sources_1/bd/counter/ui/bd_1aeeb13c.ui> 
connect_bd_net [get_bd_pins gnd_1/O] [get_bd_pins output_logic_0/inc]
set_property location {4.5 397 -62} [get_bd_cells output_logic_0]
save_bd_design
Wrote  : <X:/SAP/lab5/lab5.srcs/sources_1/bd/counter/counter.bd> 
Wrote  : <X:/SAP/lab5/lab5.srcs/sources_1/bd/counter/ui/bd_1aeeb13c.ui> 
connect_bd_net [get_bd_pins next_state_logic_0/d0] [get_bd_pins dff_0/d]
connect_bd_net [get_bd_pins next_state_logic_0/d1] [get_bd_pins dff_1/d]
startgroup
create_bd_cell -type ip -vlnv FIT:user:dff:1.0 dff_2
endgroup
set_property location {4 192 -236} [get_bd_cells dff_0]
set_property location {4 218 -87} [get_bd_cells dff_1]
set_property location {4 213 70} [get_bd_cells dff_2]
connect_bd_net [get_bd_pins next_state_logic_0/d2] [get_bd_pins dff_2/d]
save_bd_design
Wrote  : <X:/SAP/lab5/lab5.srcs/sources_1/bd/counter/counter.bd> 
Wrote  : <X:/SAP/lab5/lab5.srcs/sources_1/bd/counter/ui/bd_1aeeb13c.ui> 
create_bd_port -dir I clk
create_bd_port -dir I reset
connect_bd_net [get_bd_ports clk] [get_bd_pins dff_0/clk]
connect_bd_net [get_bd_ports clk] [get_bd_pins dff_1/clk]
connect_bd_net [get_bd_ports clk] [get_bd_pins dff_2/clk]
connect_bd_net [get_bd_ports reset] [get_bd_pins dff_0/reset]
connect_bd_net [get_bd_ports reset] [get_bd_pins dff_1/reset]
connect_bd_net [get_bd_ports reset] [get_bd_pins dff_2/reset]
save_bd_design
Wrote  : <X:/SAP/lab5/lab5.srcs/sources_1/bd/counter/counter.bd> 
Wrote  : <X:/SAP/lab5/lab5.srcs/sources_1/bd/counter/ui/bd_1aeeb13c.ui> 
delete_bd_objs [get_bd_nets q0_0_1] [get_bd_ports q0]
delete_bd_objs [get_bd_nets q1_0_1] [get_bd_ports q1]
delete_bd_objs [get_bd_nets q2_0_1] [get_bd_ports q2]
connect_bd_net [get_bd_pins dff_0/q] [get_bd_pins next_state_logic_0/q0]
connect_bd_net [get_bd_pins dff_1/q] [get_bd_pins next_state_logic_0/q1]
connect_bd_net [get_bd_pins dff_2/q] [get_bd_pins next_state_logic_0/q2]
save_bd_design
Wrote  : <X:/SAP/lab5/lab5.srcs/sources_1/bd/counter/counter.bd> 
Wrote  : <X:/SAP/lab5/lab5.srcs/sources_1/bd/counter/ui/bd_1aeeb13c.ui> 
connect_bd_net [get_bd_pins dff_0/q] [get_bd_pins output_logic_0/q0]
connect_bd_net [get_bd_pins dff_1/q] [get_bd_pins output_logic_0/q1]
connect_bd_net [get_bd_pins dff_2/q] [get_bd_pins output_logic_0/q2]
save_bd_design
Wrote  : <X:/SAP/lab5/lab5.srcs/sources_1/bd/counter/counter.bd> 
Wrote  : <X:/SAP/lab5/lab5.srcs/sources_1/bd/counter/ui/bd_1aeeb13c.ui> 
startgroup
create_bd_cell -type ip -vlnv FIT:user:gnd:1.0 gnd_2
endgroup
set_property location {5 572 191} [get_bd_cells gnd_2]
connect_bd_net [get_bd_pins gnd_2/O] [get_bd_pins output_logic_0/dir]
delete_bd_objs [get_bd_nets gnd_2_O] [get_bd_cells gnd_2]
delete_bd_objs [get_bd_nets gnd_1_O] [get_bd_cells gnd_1]
connect_bd_net [get_bd_pins gnd_0/O] [get_bd_pins output_logic_0/inc]
connect_bd_net [get_bd_pins gnd_0/O] [get_bd_pins output_logic_0/dir]
save_bd_design
Wrote  : <X:/SAP/lab5/lab5.srcs/sources_1/bd/counter/counter.bd> 
Wrote  : <X:/SAP/lab5/lab5.srcs/sources_1/bd/counter/ui/bd_1aeeb13c.ui> 
validate_bd_design
source X:/SAP/lib_SAP_2022_02_02/gen_bd_vhdl.tcl
# proc sortPorts { ports &bus &bit } {
# 
#   upvar ${&bus} busPorts
#   upvar ${&bit} bitPorts
#   array set busPorts [list]
#   set bitPorts [list]
# 
#   foreach port $ports {
#     set name [get_property -quiet NAME [get_bd_ports $port]]
# 	set busStart [get_property -quiet LEFT [get_bd_ports $port]]
#     set busStop  [get_property -quiet RIGHT  [get_bd_ports $port]]
#     if {$busStart != {}} {
#     #   set busWidth [get_property -quiet BUS_WIDTH [get_ports $port]]
#       array set busPorts [list $name [list $busStop $busStart]]
#     } else {
#       lappend bitPorts $name
#     }
#   }
#   return 0
# }
# proc sortPins { pins &bus &bit } {
# 
#   upvar ${&bus} busPins
#   upvar ${&bit} bitPins
#   array set busPins [list]
#   array set bitPins [list]
# 
#   foreach pin $pins {
#     set name [get_property -quiet NAME [get_bd_pins $pin]]
# 	set dir [get_property -quiet DIR [get_bd_pins $pin]]
# 	set busStart [get_property -quiet LEFT [get_bd_pins $pin]]
#     set busStop  [get_property -quiet RIGHT  [get_bd_pins $pin]]
# 	set net [get_bd_nets -quiet -of_objects [get_bd_pins $pin]]
# 	if {$net != ""} {
# 		set net_name [get_property -quiet NAME $net]
# 	} else {
# 		if {$dir == "I"} {
# 			if {$busStart != {}} {
# 				set net_name "(others => '0')"
# 				catch {common::send_msg_id "bd2vhdl    pin-2" "CRITICAL WARNING" "${pin}: nepripojen, bude pripojen k '0'"}
# 			} else {
# 				set net_name "'0'"
# 				catch {common::send_msg_id "bd2vhdl    pin-2" "CRITICAL WARNING" "${pin}: nepripojen, bude pripojen k '0'"}
# 			}
# 		} else {
# 			set net_name "open"
# 			catch {common::send_msg_id "bd2vhdl    pin-3" "CRITICAL WARNING" "${pin}: pin odstranen, vystup neni pripojen!"}
# 		}
# 	}
# 	if {$busStart != {}} {
# 		array set busPins [list $name [list $busStop $busStart $net_name]]
# 	} else {
# 		array set bitPins [list $name $net_name]
# 	}
#   }
#   return 0
# }
# proc sortNets { nets &bus &bit } {
# 
#   upvar ${&bus} busNets
#   upvar ${&bit} bitNets
#   array set busNets [list ]
#   set bitNets [list]
# 
#   foreach net $nets {
#     set name [get_property -quiet NAME [get_bd_nets $net]]
# 	set pin [lindex [get_bd_pins -of_objects [get_bd_nets $net]] 0]
# 	set busStart [get_property -quiet LEFT [get_bd_pins $pin]]
#     set busStop  [get_property -quiet RIGHT  [get_bd_pins $pin]]
#     if {$busStart != {}} {
#     #   set busWidth [get_property -quiet BUS_WIDTH [get_ports $port]]
#       array set busNets [list $name [list $busStop $busStart]]
#     } else {
#       lappend bitNets $name
#     }
#   }
#   return 0
# }
# proc array2sortedList { &ar } {
# 
#   upvar ${&ar} ar
#   set sortedList [list]
#   foreach key [lsort -dictionary [array names ar]] {
#     lappend sortedList $key
#     lappend sortedList $ar($key)
#   }
#   return $sortedList
# }
# proc getInPinNet { cell pin default_value} {
# 	set pin [get_bd_pins -quiet $pin]
# 	set net [get_bd_nets -quiet -of_objects $pin]
# 	if {$net == ""} {
# 		catch {common::send_msg_id "bd2vhdl    pin-2" "CRITICAL WARNING" "${pin} nepripojen, bude pripojeno k $default_value"}
# 		set net_name $default_value
# 	} else {
# 		set net_name [get_property NAME $net]
# 	}
# 	return $net_name
# }
# proc getGate { cell  function} {
# 	set inputs_count [get_property CONFIG.Inputs [get_bd_cells -quiet $cell]]
# 	set content {}
# 	set prom {}
# 	set name [get_property NAME $cell]
# 	append content [format "\n\t-- %s\n" $name]
# 	for {set i 0} { $i < $inputs_count } { incr i } {
# 		set cfg [format "CONFIG.I%u_Inverted" $i]
# 		set pin [format "%s/I%u" $cell $i]
# 		set inverted [get_property $cfg  [get_bd_cells -quiet $cell]]
# 		#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 		set net_name [getInPinNet $cell $pin "\'0\'"]
# 		#set net_name [get_property NAME $net]
# 		if {$inverted == "true"} {
# 			append prom [format "not(%s)" $net_name]
# 		} else {
# 			append prom [format "%s" $net_name]
# 		}
# 		if {$i < ($inputs_count-1)} {
# 			append prom [format " %s " $function]
# 		}
# 	}
# 	set cfg [format "CONFIG.O_Inverted" $i]
# 	set pin [format "%s/O" $cell]
# 	set inverted [get_property $cfg  [get_bd_cells -quiet $cell]]
# 	set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 	if {$net != ""} {
# 		set out_name [get_property NAME $net]
# 		if {$inverted == "true"} {
# 			append content [format "\t%s <= not(%s);\n" $out_name $prom];	
# 		} else {
# 			append content [format "\t%s <= %s;\n" $out_name $prom];
# 		}
# 		return $content
# 	} else {
# 		catch {common::send_msg_id "bd2vhdl  jadro-3" "CRITICAL WARNING" "${cell}: odstraneno, vystup neni pripojen!"}
# 		return [append content "\t-- odstraneno, vystup neni pripojen\n"]
# 	}
# }
# proc getBuf { cell  function } {
# 	set content {}
# 	set name [get_property NAME $cell]
# 	append content [format "\n\t-- %s\n" $name]
# 
# 	set pin [format "%s/I" $cell]
# 	#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 	#set net_name [get_property NAME $net]
# 	set net_name [getInPinNet $cell $pin "\'0\'"]
# 
# 	set pin [format "%s/O" $cell]
# 	set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 	if {$net != ""} {
# 		set out_name [get_property NAME $net]
# 		if {$function == true} {
# 			append content [format "\t%s <= not(%s);\n" $out_name $net_name];	
# 		} else {
# 			append content  [format "\t%s <= %s;\n" $out_name $net_name];
# 		}
# 		return $content
# 	} else {
# 		catch {common::send_msg_id "bd2vhdl  jadro-3" "CRITICAL WARNING" "${cell}: odstraneno, vystup neni pripojen!"}
# 		return [append content "\t-- odstraneno, vystup neni pripojen\n"]
# 	}
# }
# proc getSource { cell  function } {
# 	set content {}
# 	set name [get_property NAME $cell]
# 	append content [format "\n\t-- %s\n" $name]
# 
# 	set pin [format "%s/O" $cell]
# 	set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 	if {$net != ""} {
# 		set out_name [get_property NAME $net]
# 		if {$function == true} {
# 			append content [format "\t%s <= '1';\n" $out_name];	
# 		} else {
# 			append content [format "\t%s <= '0';\n" $out_name];
# 		}
# 		return $content
# 	} else {
# 		catch {common::send_msg_id "bd2vhdl  jadro-3" "CRITICAL WARNING" "${cell}: odstraneno, vystup neni pripojen!"}
# 		return [append content "\t-- odstraneno, vystup neni pripojen\n"]
# 	}
# }
# proc getSplitter { cell } {
# 	set width [get_property CONFIG.WIDTH [get_bd_cells -quiet $cell]]
# 	set pin [format "%s/I" $cell]
# 	set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 	if {$net != ""} {
# 		set in_name [get_property NAME $net]
# 		set content {}
# 		set name [get_property NAME $cell]
# 		append content [format "\n\t-- %s\n" $name]
# 		for {set i 0} { $i < $width } { incr i } {
# 			set pin [format "%s/O%u" $cell $i]
# 			set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 			if {$net != ""} {
# 				set net_name [get_property NAME $net]
# 				append content [format "\t%s <= %s(%u);\n" $net_name $in_name $i]
# 			} else {
# 				catch {common::send_msg_id "bd2vhdl  jadro-3" "CRITICAL WARNING" "${cell}: ${pin} odstranen, vystup neni pripojen!"}
# 			}
# 		}
# 	} else {
# 		set content {}
# 		set name [get_property NAME $cell]
# 		append content [format "\n\t-- %s\n" $name]
# 		for {set i 0} { $i < $width } { incr i } {
# 			set pin [format "%s/O%u" $cell $i]
# 			set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 			if {$net != ""} {
# 				set net_name [get_property NAME $net]
# 				append content [format "\t%s <= \'0\';\n" $net_name $i]
# 				catch {common::send_msg_id "bd2vhdl  jadro-2" "CRITICAL WARNING" "${cell} nepripojen vstup, ${net_name} bude pripojeno k \'0\'"}
# 			} else {
# 				catch {common::send_msg_id "bd2vhdl  jadro-3" "CRITICAL WARNING" "${cell}: ${pin} odstranen, vystup neni pripojen!"}
# 			}
# 		}
# 	}
# 	return $content
# }
# proc getDff { cell } {
# 	set ce [get_property CONFIG.CE [get_bd_cells -quiet $cell]]
# 	set reset [get_property CONFIG.Reset [get_bd_cells -quiet $cell]]
# 
# 	set content {}
# 	set name [get_property NAME $cell]
# 	append content [format "\n\t-- %s\n" $name]
# 
# 	set pin [format "%s/q" $cell]
# 	set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 	if {$net != ""} {
# 		set out_name [get_property NAME $net]
# 
# 		set pin [format "%s/clk" $cell]
# 		set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 		if {$net == ""} {
# 			catch {common::send_msg_id "bd2vhdl  jadro-3" "CRITICAL WARNING" "${cell}: odstraneno, nejsou pripojene hodiny!"}
# 			return [append content "\t-- odstraneno, , nejsou pripojene hodiny!\n"]
# 		}
# 		#set clk_name [get_property NAME $net]
# 		set clk_name [getInPinNet $cell $pin "\'0\'"]
# 
# 		set pin [format "%s/d" $cell]
# 		#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 		#set in_name [get_property NAME $net]
# 		set in_name [getInPinNet $cell $pin "\'0\'"]
# 
# 		if {$ce == "true"} {
# 			set pin [format "%s/ce" $cell]
# 			#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 			#set ce_name [get_property NAME $net]
# 			set ce_name [getInPinNet $cell $pin "\'1\'"]
# 		}
# 
# 		if {$reset == "true"} {
# 			set pin [format "%s/reset" $cell]
# 			#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 			#set reset_name [get_property NAME $net]
# 			set reset_name [getInPinNet $cell $pin "\'0\'"]
# 		}
# 
# 		append content [format "\tprocess (%s)\n\tbegin\n" $clk_name]
# 		append content [format "\t\tif rising_edge(%s) then\n" $clk_name]
# 		if {$reset == "true"} {
# 			append content [format "\t\t\tif %s = '1' then\n\t\t\t\t%s <= '0';\n\t\t\tels" $reset_name $out_name]
# 		} else {
# 			append content "\t\t\t"
# 		}
# 
# 		if {$ce == "true"} {
# 			append content [format "if %s = '1' then\n" $ce_name]
# 			append content [format "\t\t\t\t%s <= %s;\n" $out_name $in_name]
# 			append content "\t\t\tend if;\n"
# 		} else {
# 			if {$reset == "true"} {
# 				append content [format "e\n\t\t\t\t%s <= %s;\n" $out_name $in_name]
# 				append content "\t\t\tend if;\n"
# 			} else {
# 				append content [format "%s <= %s;\n" $out_name $in_name]
# 			}
# 		}
# 
# 		append content "\t\tend if;\n\tend process;\n";
# 	} else {
# 		catch {common::send_msg_id "bd2vhdl jadro-3" "CRITICAL WARNING" "${cell}: odstraneno, vystup neni pripojen!"}
# 		return [append content "\t-- odstraneno, vystup neni pripojen\n"]
# 	}
# 	return $content
# }
# proc getMux { cell } {
# 	set ports_count [get_property CONFIG.Data_Ports [get_bd_cells -quiet $cell]]
# 	set width [get_property CONFIG.WIDTH [get_bd_cells -quiet $cell]]
# 	set i0_bus [get_property CONFIG.I0_BUS [get_bd_cells -quiet $cell]]
# 	set i1_bus [get_property CONFIG.I1_BUS [get_bd_cells -quiet $cell]]
# 	set i2_bus [get_property CONFIG.I2_BUS [get_bd_cells -quiet $cell]]
# 	set i3_bus [get_property CONFIG.I3_BUS [get_bd_cells -quiet $cell]]
# 	set o_bus [get_property CONFIG.O_BUS [get_bd_cells -quiet $cell]]
# 
# 	set content {}
# 	set name [get_property NAME $cell]
# 	append content [format "\n\t-- %s\n" $name]
# 
# 	for {set i 0} { $i < $width } { incr i } {
# 		if {$o_bus == "true"} {
# 			set pin [format "%s/O" $cell]
# 			set vecO [format "(%u)" $i]
# 		} else {
# 			set pin [format "%s/O_%u" $cell $i]
# 			set vecO ""
# 		}
# 		set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 		if {$net != ""} {
# 			set out_name [get_property NAME $net]
# 
# 			if {$i0_bus == "true"} {
# 				set pin [format "%s/I0" $cell]
# 				set vec0 [format "(%u)" $i]
# 			} else {
# 				set pin [format "%s/I0_%u" $cell $i]
# 				set vec0 ""
# 			}
# 			#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 			#set i0_name [get_property NAME $net]
# 			set i0_name [getInPinNet $cell $pin "\'0\'"]
# 			if {$i0_name == "'0'"} {
# 				set vec0 ""
# 			}
# 
# 			if {$i1_bus == "true"} {
# 				set pin [format "%s/I1" $cell]
# 				set vec1 [format "(%u)" $i]
# 			} else {
# 				set pin [format "%s/I1_%u" $cell $i]
# 				set vec1 ""
# 			}
# 			#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 			#set i1_name [get_property NAME $net]
# 			set i1_name [getInPinNet $cell $pin "\'0\'"]
# 			if {$i1_name == "'0'"} {
# 				set vec1 ""
# 			}
# 
# 			set pin [format "%s/Sel0" $cell]
# 			#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 			#set sel0_name [get_property NAME $net]
# 			set sel0_name [getInPinNet $cell $pin "\'0\'"]
# 
# 			if {$ports_count > 2} {
# 				if {$i2_bus == "true"} {
# 					set pin [format "%s/I2" $cell]
# 					set vec2 [format "(%u)" $i]
# 				} else {
# 					set pin [format "%s/I2_%u" $cell $i]
# 					set vec2 ""
# 				}
# 				#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 				#set i2_name [get_property NAME $net]
# 				set i2_name [getInPinNet $cell $pin "\'0\'"]
# 				if {$i2_name == "'0'"} {
# 					set vec2 ""
# 				}
# 
# 				if {$i3_bus == "true"} {
# 					set pin [format "%s/I3" $cell]
# 					set vec3 [format "(%u)" $i]
# 				} else {
# 					set pin [format "%s/I3_%u" $cell $i]
# 					set vec3 ""
# 				}
# 				#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 				#set i3_name [get_property NAME $net]
# 				set i3_name [getInPinNet $cell $pin "\'0\'"]
# 				if {$i3_name == "'0'"} {
# 					set vec3 ""
# 				}
# 
# 				set pin [format "%s/Sel1" $cell]
# 				#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 				#set sel1_name [get_property NAME $net]
# 				set sel1_name [getInPinNet $cell $pin "\'0\'"]
# 				
# 				if {$sel0_name != "'0'" && $sel1_name != "'0'"} {
# 					append content [format "\t%s%s <= %s%s when %s = '0' and %s = '0' else\n" $out_name $vecO $i0_name $vec0 $sel1_name $sel0_name]
# 					append content [format "\t\t%s%s when %s = '0' and %s = '1' else\n" $i1_name $vec1 $sel1_name $sel0_name]
# 					append content [format "\t\t%s%s when %s = '1' and %s = '0' else\n" $i2_name $vec2 $sel1_name $sel0_name]
# 					append content [format "\t\t%s%s when %s = '1' and %s = '1' else '0';\n\n" $i3_name $vec3 $sel1_name $sel0_name]
# 				} else {
# 					append content [format "\t%s%s <= %s%s;\n" $out_name $vecO $i0_name $vec0]
# 				}
# 			} else {
# 				if {$sel0_name != "'0'"} {
# 					append content [format "\t%s%s <= %s%s when (%s = '1') else %s%s;\n" $out_name $vecO $i1_name $vec1 $sel0_name $i0_name $vec0]
# 				} else {
# 					append content [format "\t%s%s <= %s%s;\n" $out_name $vecO $i0_name $vec0]
# 				}
# 			}
# 		} else {
# 			catch {common::send_msg_id "bd2vhdl  jadro-3" "CRITICAL WARNING" " ${cell}: pin ${pin} odstranen, vystup neni pripojen!"}
# 			return [append content "\t-- ${pin} odstranen, vystup neni pripojen\n"]
# 		}
# 		
# 	}
# 	return $content
# }
# proc getDebounce { cell } {
# 	set width [get_property CONFIG.width [get_bd_cells -quiet $cell]]
# 
# 	set content {}
# 	set name [get_property NAME $cell]
# 	append content [format "\n\t-- %s\n" $name]
# 
# 	set pin [format "%s/tl_out" $cell]
# 	set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 	if {$net != ""} {
# 		set tl_out [get_property NAME $net]
# 
# 		set pin [format "%s/clk" $cell]
# 		set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 		if {$net != ""} {
# 			set clk [get_property NAME $net]
# 
# 			set pin [format "%s/tl_in" $cell]
# 			#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 			#set tl_in [get_property NAME $net]
# 			set tl_in [getInPinNet $cell $pin "\'0\'"]
# 
# 			append content [ format "\t%s : debounce\n\t\tgeneric map (\n\t\t\twidth => %s\n\t\t)\n\t\tport map (\n\t\t\tclk	=> %s,\n\t\t\ttl_in	=> %s,\n\t\t\ttl_out	=> %s\n\t\t);\n" $name $width $clk $tl_in $tl_out]
# 		} else {
# 			catch {common::send_msg_id "bd2vhdl  jadro-3" "CRITICAL WARNING" "${cell}: odstraneno, nejsou pripojene hodiny!"}
# 			return [append content "\t-- odstraneno, , nejsou pripojene hodiny!\n"]	
# 		}
# 	} else {
# 		catch {common::send_msg_id "bd2vhdl  jadro-3" "CRITICAL WARNING" "${cell}: odstraneno, vystup neni pripojen!"}
# 		return [append content "\t-- odstraneno, vystup neni pripojen\n"]
# 	}
# 	
# 	return $content
# }
# set debounce_component "\tcomponent debounce
# \t\tgeneric (
# \t\t\twidth: integer := 22
# \t\t);
# \t\tport (
# \t\t\tclk    : in  std_logic;
# \t\t\ttl_in  : in  std_logic;
# \t\t\ttl_out : out std_logic
# \t\t);
# \tend component;\n"
# proc getModule_ref { cell components component_name} {
# 	upvar $components comps
# 
# 	set inPins [lsort [get_bd_pins -quiet -of_objects [get_bd_cells $cell] -filter DIR==I]]
# 	array set inputBusPins [list]
# 	array set inputBitPins [list]
# 	sortPins $inPins inputBusPins inputBitPins
# 
# 	set outPins [lsort [get_bd_pins -quiet -of_objects [get_bd_cells $cell] -filter DIR==O]]
# 	array set outputBusPins [list]
# 	array set outputBitPins [list]
# 	sortPins $outPins outputBusPins outputBitPins
# 
# 	set content {}
# 	set name [get_property NAME $cell]
# 	append content [format "\n\t-- %s\n" $name]
# 
# 	set lines [list]
# 	foreach {pin net} [array2sortedList inputBitPins] {
#     	lappend lines [list "$pin" "in  std_logic;" "$net"]
#   	}
# 	foreach {pin busInfo} [array2sortedList inputBusPins] {
# 		lassign $busInfo stop start net
# 		if {$start>$stop} {
# 			lappend lines [list "$pin" "in  std_logic_vector($start downto $stop);" "$net"]
# 		} else {
# 			lappend lines [list "$pin" "in  std_logic_vector($start to $stop);" "$net"]
# 		}
#   	}
# 	foreach {pin net} [array2sortedList outputBitPins] {
#     	lappend lines [list "$pin" "out std_logic;" "$net"]
# 	}
# 	foreach {pin busInfo} [array2sortedList outputBusPins] {
# 		lassign $busInfo stop start net
# 		if {$start>$stop} {
# 			lappend lines [list "$pin"  "out std_logic_vector($start downto $stop);" "$net"]
# 		} else {
# 			lappend lines [list "$pin" "out std_logic_vector($start to $stop);" "$net"]
# 		}
# 	}
# 	# Detect maximum column width to align columns
# 	foreach line $lines {
# 		set width [string length [lindex $line 0]]
# 		if {![info exist maxWidth] || $maxWidth < $width} {
# 			set maxWidth $width
# 		}
# 	}
# 	set ports {}
# 	set port_map {}
# 	foreach line $lines {
# 		append ports [format "\n\t\t\t%-${maxWidth}s :  %-${maxWidth}s" [lindex $line 0] [lindex $line 1]]
# 		append port_map [format "\n\t\t\t%-${maxWidth}s =>  %-${maxWidth}s," [lindex $line 0] [lindex $line 2]]
# 	}
# 	# Remove the last semi-colon
#   	set index [string last {;} $ports]
#   	set ports [string replace $ports $index $index {}]
# 	# Remove the last ,
#   	set index [string last {,} $port_map]
#   	set port_map [string replace $port_map $index $index {}]
# 
# 	# nepridavat pokud uz tam ta komponenta je
# 	if {[string first $component_name $comps] < 0} {
# 		append comps "\tcomponent ${component_name}\n\t\tport ("
# 		append comps $ports
# 		append comps "\n\t\t);\n\tend component;\n\n"
# 	}
# 	append content "\tinst_${name} : ${component_name}\n"
# 	append content "\t\tport map ("
# 	append content $port_map
# 	append content "\n\t\t);\n"
# }
# proc getHier { cell debounce components modules} {
# 	global debounce_component
# 	upvar $components comps
# 	upvar $modules mods
# 	upvar $debounce debs
# 
# 	set inPins [lsort [get_bd_pins -quiet -of_objects [get_bd_cells $cell] -filter DIR==I]]
# 	array set inputBusPins [list]
# 	array set inputBitPins [list]
# 	sortPins $inPins inputBusPins inputBitPins
# 
# 	set outPins [lsort [get_bd_pins -quiet -of_objects [get_bd_cells $cell] -filter DIR==O]]
# 	array set outputBusPins [list]
# 	array set outputBitPins [list]
# 	sortPins $outPins outputBusPins outputBitPins
# 
# 	set content {}
# 	set name [get_property NAME $cell]
# 	append content [format "\n\t-- %s\n" $name]
# 
# 	set lines [list]
# 	foreach {pin net} [array2sortedList inputBitPins] {
#     	lappend lines [list "$pin" "in  std_logic;" "$net"]
#   	}
# 	foreach {pin busInfo} [array2sortedList inputBusPins] {
# 		lassign $busInfo stop start net
# 		if {$start>$stop} {
# 			lappend lines [list "$pin" "in  std_logic_vector($start downto $stop);" "$net"]
# 		} else {
# 			lappend lines [list "$pin" "in  std_logic_vector($start to $stop);" "$net"]
# 		}
#   	}
# 	foreach {pin net} [array2sortedList outputBitPins] {
#     	lappend lines [list "$pin" "out std_logic;" "$net"]
# 	}
# 	foreach {pin busInfo} [array2sortedList outputBusPins] {
# 		lassign $busInfo stop start net
# 		if {$start>$stop} {
# 			lappend lines [list "$pin"  "out std_logic_vector($start downto $stop);" "$net"]
# 		} else {
# 			lappend lines [list "$pin" "out std_logic_vector($start to $stop);" "$net"]
# 		}
# 	}
# 	# Detect maximum column width to align columns
# 	foreach line $lines {
# 		set width [string length [lindex $line 0]]
# 		if {![info exist maxWidth] || $maxWidth < $width} {
# 			set maxWidth $width
# 		}
# 	}
# 	set ports {}
# 	set port_map {}
# 	foreach line $lines {
# 		append ports [format "\n\t\t\t%-${maxWidth}s :  %-${maxWidth}s" [lindex $line 0] [lindex $line 1]]
# 		append port_map [format "\n\t\t\t%-${maxWidth}s =>  %-${maxWidth}s," [lindex $line 0] [lindex $line 2]]
# 	}
# 	# Remove the last semi-colon
#   	set index [string last {;} $ports]
#   	set ports [string replace $ports $index $index {}]
# 	# Remove the last ,
#   	set index [string last {,} $port_map]
#   	set port_map [string replace $port_map $index $index {}]
# 
# 	set filtr [format {PATH !~ "%s/.*/.*"} $cell]
# 	set nets [lsort [get_bd_nets -quiet -of_objects [get_bd_cells $cell] -regexp -filter $filtr]]
# 	array set busNets [list ]
# 	set bitNets [list]
# 	sortNets $nets busNets bitNets
# 
# 	set lines [list]
# 	# Process single bit nets
# 	foreach net [lsort -dictionary $bitNets] {
# 		lappend lines [list "$net" "  std_logic;"]
# 	}
# 	# Process bus nets
# 	foreach {net busInfo} [array2sortedList busNets] {
# 		lassign $busInfo stop start
# 		if {$start>$stop} {
# 		lappend lines [list "$net" "  std_logic_vector($start downto $stop);"]
# 		} else {
# 		lappend lines [list "$net" "  std_logic_vector($start to $stop);"]
# 		}
# 	}
# 
# 	# Detect maximum column width to align columns
# 	foreach line $lines {
# 		set width [string length [lindex $line 0]]
# 		if {![info exist maxWidth] || $maxWidth < $width} {
# 			set maxWidth $width
# 		}
# 	}
# 
# 	# Build the content of the stub:
# 	set signals {}
# 	foreach line $lines {
# 		append signals [format "\n\tsignal %-${maxWidth}s :  %-${maxWidth}s" [lindex $line 0] [lindex $line 1]]
# 	}
#   set ports2Signals {}
#     foreach net [lsort -dictionary $nets] {
#         set net_name [get_property NAME [get_bd_nets -quiet $net]]
#         set ports_b [get_bd_ports -quiet -of_objects [get_bd_nets -quiet $net]]
#         if {$ports == {}} {
#             break
#         }
#         foreach port [lsort -dictionary $ports_b] {
#             set port_name [get_property NAME [get_bd_pins -quiet $port]]
#             set dir [get_property DIR [get_bd_pins -quiet $port]]
#             if {$dir == "I"} {
#                 append ports2Signals "\t$net_name <= $port_name;\n"    
#             } else {
#                 append ports2Signals "\t$port_name <= $net_name;\n"
#             }
#         }
#     }
#   
# 	set debounce_inner false
#   	set components_inner {}
#   	set modules_inner {}
#   	set body [getIPs $cell debounce_inner components_inner modules_inner]
# 	if {$debounce_inner} {
# 		puts "######################################################################x"
# 		append components_inner $debounce_component
# 		set debs true
#     }
# 	
# 	set comp_name [string replace $cell 0 0 {}]
#     set comp_name [string map {/ _} $comp_name]
#     append comps "\tcomponent ${comp_name}\n\t\tport ("
#     append mods "\n\nlibrary IEEE;\nuse IEEE.std_logic_1164.all;\n\n"
#     append mods "entity ${comp_name} is\n\tport("
#     append mods $ports
#     append comps $ports
#     append mods "\n\t\t);\nend entity ${comp_name};\n\narchitecture Behavioral of ${comp_name} is\n"
#     append mods $components_inner
#     append mods $signals
#     append mods "\nbegin\n"
#     append mods $ports2Signals
#     append mods $body
#     append mods "\nend Behavioral;"
#     append comps "\n\t\t);\n\tend component;\n\n"
#     append content "\tinst_${comp_name} : ${comp_name}\n"
#     append content "\t\tport map ("
#     append content $port_map
#     append content "\n\t\t);\n"
#     append mods $modules_inner
# 
# 	return $content
# }
# proc getIPs { parent debounce components modules} {
#   upvar $debounce deb
#   upvar $components comps
#   upvar $modules mods
#   if {$parent == ""} {
# 	set cells [get_bd_cells]	  
#   } else {
# 	set filtr [format {PATH !~ "%s/.*/.*"} $parent]
# 	set cells [get_bd_cells -of_objects [get_bd_cells $parent] -regexp -filter $filtr]
#   }
#   
#   set content {}
#   foreach cell [lsort -dictionary $cells] {
# 	set type [get_property TYPE [get_bd_cells -quiet $cell]]
# 	set name [get_property NAME [get_bd_cells -quiet $cell]]
# 	set vlnv [get_property VLNV [get_bd_cells -quiet $cell]]
# 	if {$type == "ip"} {
# 		set vlnvs [split $vlnv ":"]
# 		if {[lindex $vlnvs 0] == "FIT"} {
# 		 	switch [lindex $vlnvs 2] {
# 				"or" {
# 					append content [getGate $cell "or"]
# 				}
# 				"and" {
# 					append content [getGate $cell "and"]
# 				}
# 				"xor" {
# 					append content [getGate $cell "xor"]
# 				}
# 				"buf" {
# 					append content [getBuf $cell false]
# 				}
# 				"inv" {
# 					append content [getBuf $cell true]
# 				}
# 				"gnd" {
# 					append content [getSource $cell false]
# 				}
# 				"vcc" {
# 					append content [getSource $cell true]
# 				}
# 				"splitter" {
# 					append content [getSplitter $cell]
# 				}
# 				"mux" {
# 					append content [getMux $cell]
# 				}
# 				"dff" {
# 					append content [getDff $cell]
# 				}
# 				"debounce" {
# 					append content [getDebounce $cell]
# 					set deb true
# 				}
# 			}
# 		} elseif {[lindex $vlnvs 0] == "xilinx.com" && [lindex $vlnvs 1] == "module_ref"} {
# 			append content [getModule_ref $cell comps [lindex $vlnvs 2]]
# 		}
# 			
# 	} elseif {$type == "hier"} {
# 		append content [getHier $cell deb comps mods]
# 	}
#   }
#   return $content
# }
# set debounce_code "\n\n\nlibrary IEEE;
# use IEEE.STD_LOGIC_1164.ALL;
# use ieee.std_logic_unsigned.all;
# 
# entity debounce is
#     generic (
# 		width: integer := 22 -- 100 MHz clock -> 4 - simulation (90 ns); 22 - synthesis (ca. 20 ms)
# 	);
#     port (
# 		clk : in STD_LOGIC;
#         tl_in : in STD_LOGIC;
#         tl_out : out STD_LOGIC
# 	);
# end entity debounce;
# 
# architecture Behavioral of debounce is
# 
# signal cnt       : std_logic_vector(width-1 downto 0) := (others => '0');
# signal reset, ce : std_logic := '0';
# signal tl_prev   : std_logic := '0';
# 
# 
# begin
# 
#     counter: process(clk) begin
#         if rising_edge(clk) then 
#             if (reset = '1') then
#                 cnt <= (others => '0');
#             elsif (ce = '1') then
#                 cnt <= cnt + 1;
#             end if;
#         end if;
#     end process;
# 
#     process(clk) begin
#         if rising_edge(clk) then
#             if (tl_prev /= tl_in) then
#                 reset <= '1';
#             else 
#                 reset <= '0';
#             end if;
#         end if;
#     end process;
#                 
#     process(clk) begin
#         if rising_edge(clk) then
#             if (reset = '1') then
#                 tl_prev <= tl_in;
#             end if;
#         end if;
#     end process;
#                 
#     process(clk) begin
#         if rising_edge(clk) then
#             if ((cnt(width-1) = '1') and (cnt(0) = '0')) then
#                 tl_out <= tl_prev;
#             end if;
#         end if;
#     end process;
#                 
# 
#     ce <= '0' when ((cnt(width-1) = '1') and (cnt(0) = '1'))
#                 else '1';
# 
# end Behavioral;\n"
# proc vhdlTemplate { module } {
#   global debounce_code
#   global debounce_component
# 
#   set inPorts [lsort [get_bd_ports -quiet -filter DIR==I]]
#   array set inputBusPorts [list ]
#   set inputBitPorts [list]
#   sortPorts $inPorts inputBusPorts inputBitPorts
# 
#   set outPorts [lsort [get_bd_ports -quiet -filter DIR==O]]
#   array set outputBusPorts [list ]
#   set outputBitPorts [list]
#   sortPorts $outPorts outputBusPorts outputBitPorts
# 
#   set inoutPorts [lsort [get_bd_ports -quiet -filter DIR==IO]]
#   array set inoutBusPorts [list ]
#   set inoutBitPorts [list]
#   sortPorts $inoutPorts inoutBusPorts inoutBitPorts
# 
#   set lines [list]
#   # Process input single bit ports
# #   lappend lines "-- Input Ports - Single Bit"
#   foreach port [lsort -dictionary $inputBitPorts] {
#     lappend lines [list "$port" "in  std_logic;"]
#   }
#   # Process input bus ports
# #   lappend lines "-- Input Ports - Busses"
#   foreach {port busInfo} [array2sortedList inputBusPorts] {
#     lassign $busInfo stop start
#     if {$start>$stop} {
#       lappend lines [list "$port" "in  std_logic_vector($start downto $stop);"]
#     } else {
#       lappend lines [list "$port" "in  std_logic_vector($start to $stop);"]
#     }
#   }
#   # Process output single bit ports
# #   lappend lines "-- Output Ports - Single Bit"
#   foreach port [lsort -dictionary $outputBitPorts] {
#     lappend lines [list "$port" "out std_logic;"]
#   }
#   # Process output bus ports
# #   lappend lines "-- Output Ports - Busses"
#   foreach {port busInfo} [array2sortedList outputBusPorts] {
#     lassign $busInfo stop start
#     if {$start>$stop} {
#       lappend lines [list "$port"  "out std_logic_vector($start downto $stop);"]
#     } else {
#       lappend lines [list "$port" "out std_logic_vector($start to $stop);"]
#     }
#   }
#   # Process inout single bit ports
# #   lappend lines "-- InOut Ports - Single Bit"
#   foreach port [lsort -dictionary $inoutBitPorts] {
#     lappend lines [list "$port" "inout  std_logic;"]
#   }
#   # Process inout bus ports
# #   lappend lines "-- InOut Ports - Busses"
#   foreach {port busInfo} [array2sortedList inoutBusPorts] {
#     lassign $busInfo stop start
#     if {$start>$stop} {
#       lappend lines [list "$port" "inout  std_logic_vector($start downto $stop);"]
#     } else {
#       lappend lines [list "$port" "inout  std_logic_vector($start to $stop);"]
#     }
#   }
# 
#   # Detect maximum column width to align columns
#   foreach line $lines {
#     if {[regexp {^\s*\-\-} $line]} {
#       # Skip lines that are just comments
#       continue
#     }
#     set width [string length [lindex $line 0]]
#     if {![info exist maxWidth] || $maxWidth < $width} {
#       set maxWidth $width
#     }
#   }
# 
#   # Build the content of the stub:
#   set content {}
#   foreach line $lines {
#     if {[regexp {^\s*\-\-} $line]} {
#       # Lines that are just comments
#       append content "\n      $line"
#       continue
#     }
#     append content [format "\n      %-${maxWidth}s :  %-${maxWidth}s" [lindex $line 0] [lindex $line 1]]
#   }
# 
#   # Remove the last semi-colon
#   set index [string last {;} $content]
#   set content [string replace $content $index $index {}]
# 
# 
#   set nets [lsort [get_bd_nets -quiet]]
#   array set busNets [list ]
#   set bitNets [list]
#   sortNets $nets busNets bitNets
# 
#   set lines [list]
#   # Process single bit nets
#   foreach net [lsort -dictionary $bitNets] {
#     lappend lines [list "$net" "  std_logic;"]
#   }
#   # Process bus nets
#   foreach {net busInfo} [array2sortedList busNets] {
#     lassign $busInfo stop start
#     if {$start>$stop} {
#       lappend lines [list "$net" "  std_logic_vector($start downto $stop);"]
#     } else {
#       lappend lines [list "$net" "  std_logic_vector($start to $stop);"]
#     }
#   }
# 
#   # Detect maximum column width to align columns
#   foreach line $lines {
#     if {[regexp {^\s*\-\-} $line]} {
#       # Skip lines that are just comments
#       continue
#     }
#     set width [string length [lindex $line 0]]
#     if {![info exist maxWidth] || $maxWidth < $width} {
#       set maxWidth $width
#     }
#   }
# 
#   # Build the content of the stub:
#   set signals {}
#   foreach line $lines {
#     if {[regexp {^\s*\-\-} $line]} {
#       # Lines that are just comments
#       append signals "\n      $line"
#       continue
#     }
#     append signals [format "\n      signal %-${maxWidth}s :  %-${maxWidth}s" [lindex $line 0] [lindex $line 1]]
#   }
#   set ports2Signals {}
#   foreach port [lsort -dictionary $inPorts] {
# 	set port_name [get_property NAME [get_bd_ports -quiet $port]]
# 	set net [get_bd_nets -quiet -of_objects [get_bd_ports -quiet $port]]
# 	if {$net != ""} {
# 		set net_name [get_property NAME $net]
# 		append ports2Signals "\t$net_name <= $port_name;\n"
# 	} else {
# 		catch {common::send_msg_id "bd2vhdl   port-2" "CRITICAL WARNING" "${port_name}: port nepripojen!"}
# 	}
#   }
#   foreach port [lsort -dictionary $outPorts] {
# 	set port_name [get_property NAME [get_bd_ports -quiet $port]]
# 	set net [get_bd_nets -quiet -of_objects [get_bd_ports -quiet $port]]
# 	if {$net != ""} {
# 		set net_name [get_property NAME $net]
# 		append ports2Signals "\t$port_name <= $net_name;\n"
# 	} else {
# 		catch {common::send_msg_id "bd2vhdl   port-3" "CRITICAL WARNING" "${port_name}: port nepripojen!"}
# 	}
#   }
#   set debounce false
#   set components {}
#   set modules {}
#   set body [getIPs "" debounce components modules]
#   
#   if {$debounce} {
# 	  append components $debounce_component
#   }
#   # Now that the last semi-colon is replaced, add the header and footer
#   set content [format "library IEEE;
# use IEEE.std_logic_1164.all;
# 
# library xil_defaultlib;
# use xil_defaultlib.all;
# 
# entity ${module}_vhdl is
#    port (%s
#    );
# end entity ${module}_vhdl;
# 
# architecture Behavioral of ${module}_vhdl is
# %s
# %s
# begin
# %s
# %s
# end Behavioral;" $content $components $signals $ports2Signals $body]
# 
#   append content $modules
# 
#   if {$debounce} {
# 	  append content $debounce_code
#   }
# 
#   return $content
# }
# set name [current_bd_design -quiet]
# if {$name == ""} {
#     common::send_msg_id -continue "bd2vhdl design-2" "ERROR" "Je potreba otevrit block design!"
# 	return
# }
# save_bd_design $name
Wrote  : <X:/SAP/lab5/lab5.srcs/sources_1/bd/counter/counter.bd> 
# validate_bd_design -force
# if { [llength [get_bd_ports]] > 0 } {
# 	puts "\n##### ${name} #####"
# 	set content [vhdlTemplate $name]
# 	set PROJ_DIR [get_property DIRECTORY [current_project]]
# 	set PROJ_DIR [file normalize $PROJ_DIR]
# 	set tmp_dir [file join $PROJ_DIR "tmp"]
# 	file mkdir $tmp_dir
# 	set filename "${name}.vhd"
# 	set filename_path [file join $tmp_dir $filename]
# 	# Save the template
# 	set mode {w}
# 	puts "\nCreating VHDL for Design $name in [file normalize $filename]\n"
# 	set tfh [open $filename_path $mode]
# 	puts $tfh $content
# 	close $tfh
# 
# 	import_files -force -norecurse $filename_path
# 	common::send_msg_id "bd2vhdl design-1" "INFO" "${name}_vhdl.vhd vygenerovan"
# } else {
# 	common::send_msg_id -continue "bd2vhdl design-3" "ERROR" "${name} neobsahuje zadne porty!"
# }

##### counter #####
CRITICAL WARNING: [bd2vhdl    pin-3] /output_logic_0/y0: pin odstranen, vystup neni pripojen!
CRITICAL WARNING: [bd2vhdl    pin-3] /output_logic_0/y1: pin odstranen, vystup neni pripojen!
CRITICAL WARNING: [bd2vhdl    pin-3] /output_logic_0/y2: pin odstranen, vystup neni pripojen!

Creating VHDL for Design counter in X:/SAP/lab5/counter.vhd

INFO: [bd2vhdl design-1] counter_vhdl.vhd vygenerovan
update_compile_order -fileset sources_1
startgroup
make_bd_pins_external  [get_bd_cells output_logic_0]
make_bd_intf_pins_external  [get_bd_cells output_logic_0]
INFO: [BD 5-409] No interface pins to be made external for /output_logic_0
endgroup
set_property name y0 [get_bd_ports y0_0]
set_property name y1 [get_bd_ports y1_0]
set_property name y2 [get_bd_ports y2_0]
save_bd_design
Wrote  : <X:/SAP/lab5/lab5.srcs/sources_1/bd/counter/counter.bd> 
Wrote  : <X:/SAP/lab5/lab5.srcs/sources_1/bd/counter/ui/bd_1aeeb13c.ui> 
source X:/SAP/lib_SAP_2022_02_02/gen_bd_vhdl.tcl
# proc sortPorts { ports &bus &bit } {
# 
#   upvar ${&bus} busPorts
#   upvar ${&bit} bitPorts
#   array set busPorts [list]
#   set bitPorts [list]
# 
#   foreach port $ports {
#     set name [get_property -quiet NAME [get_bd_ports $port]]
# 	set busStart [get_property -quiet LEFT [get_bd_ports $port]]
#     set busStop  [get_property -quiet RIGHT  [get_bd_ports $port]]
#     if {$busStart != {}} {
#     #   set busWidth [get_property -quiet BUS_WIDTH [get_ports $port]]
#       array set busPorts [list $name [list $busStop $busStart]]
#     } else {
#       lappend bitPorts $name
#     }
#   }
#   return 0
# }
# proc sortPins { pins &bus &bit } {
# 
#   upvar ${&bus} busPins
#   upvar ${&bit} bitPins
#   array set busPins [list]
#   array set bitPins [list]
# 
#   foreach pin $pins {
#     set name [get_property -quiet NAME [get_bd_pins $pin]]
# 	set dir [get_property -quiet DIR [get_bd_pins $pin]]
# 	set busStart [get_property -quiet LEFT [get_bd_pins $pin]]
#     set busStop  [get_property -quiet RIGHT  [get_bd_pins $pin]]
# 	set net [get_bd_nets -quiet -of_objects [get_bd_pins $pin]]
# 	if {$net != ""} {
# 		set net_name [get_property -quiet NAME $net]
# 	} else {
# 		if {$dir == "I"} {
# 			if {$busStart != {}} {
# 				set net_name "(others => '0')"
# 				catch {common::send_msg_id "bd2vhdl    pin-2" "CRITICAL WARNING" "${pin}: nepripojen, bude pripojen k '0'"}
# 			} else {
# 				set net_name "'0'"
# 				catch {common::send_msg_id "bd2vhdl    pin-2" "CRITICAL WARNING" "${pin}: nepripojen, bude pripojen k '0'"}
# 			}
# 		} else {
# 			set net_name "open"
# 			catch {common::send_msg_id "bd2vhdl    pin-3" "CRITICAL WARNING" "${pin}: pin odstranen, vystup neni pripojen!"}
# 		}
# 	}
# 	if {$busStart != {}} {
# 		array set busPins [list $name [list $busStop $busStart $net_name]]
# 	} else {
# 		array set bitPins [list $name $net_name]
# 	}
#   }
#   return 0
# }
# proc sortNets { nets &bus &bit } {
# 
#   upvar ${&bus} busNets
#   upvar ${&bit} bitNets
#   array set busNets [list ]
#   set bitNets [list]
# 
#   foreach net $nets {
#     set name [get_property -quiet NAME [get_bd_nets $net]]
# 	set pin [lindex [get_bd_pins -of_objects [get_bd_nets $net]] 0]
# 	set busStart [get_property -quiet LEFT [get_bd_pins $pin]]
#     set busStop  [get_property -quiet RIGHT  [get_bd_pins $pin]]
#     if {$busStart != {}} {
#     #   set busWidth [get_property -quiet BUS_WIDTH [get_ports $port]]
#       array set busNets [list $name [list $busStop $busStart]]
#     } else {
#       lappend bitNets $name
#     }
#   }
#   return 0
# }
# proc array2sortedList { &ar } {
# 
#   upvar ${&ar} ar
#   set sortedList [list]
#   foreach key [lsort -dictionary [array names ar]] {
#     lappend sortedList $key
#     lappend sortedList $ar($key)
#   }
#   return $sortedList
# }
# proc getInPinNet { cell pin default_value} {
# 	set pin [get_bd_pins -quiet $pin]
# 	set net [get_bd_nets -quiet -of_objects $pin]
# 	if {$net == ""} {
# 		catch {common::send_msg_id "bd2vhdl    pin-2" "CRITICAL WARNING" "${pin} nepripojen, bude pripojeno k $default_value"}
# 		set net_name $default_value
# 	} else {
# 		set net_name [get_property NAME $net]
# 	}
# 	return $net_name
# }
# proc getGate { cell  function} {
# 	set inputs_count [get_property CONFIG.Inputs [get_bd_cells -quiet $cell]]
# 	set content {}
# 	set prom {}
# 	set name [get_property NAME $cell]
# 	append content [format "\n\t-- %s\n" $name]
# 	for {set i 0} { $i < $inputs_count } { incr i } {
# 		set cfg [format "CONFIG.I%u_Inverted" $i]
# 		set pin [format "%s/I%u" $cell $i]
# 		set inverted [get_property $cfg  [get_bd_cells -quiet $cell]]
# 		#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 		set net_name [getInPinNet $cell $pin "\'0\'"]
# 		#set net_name [get_property NAME $net]
# 		if {$inverted == "true"} {
# 			append prom [format "not(%s)" $net_name]
# 		} else {
# 			append prom [format "%s" $net_name]
# 		}
# 		if {$i < ($inputs_count-1)} {
# 			append prom [format " %s " $function]
# 		}
# 	}
# 	set cfg [format "CONFIG.O_Inverted" $i]
# 	set pin [format "%s/O" $cell]
# 	set inverted [get_property $cfg  [get_bd_cells -quiet $cell]]
# 	set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 	if {$net != ""} {
# 		set out_name [get_property NAME $net]
# 		if {$inverted == "true"} {
# 			append content [format "\t%s <= not(%s);\n" $out_name $prom];	
# 		} else {
# 			append content [format "\t%s <= %s;\n" $out_name $prom];
# 		}
# 		return $content
# 	} else {
# 		catch {common::send_msg_id "bd2vhdl  jadro-3" "CRITICAL WARNING" "${cell}: odstraneno, vystup neni pripojen!"}
# 		return [append content "\t-- odstraneno, vystup neni pripojen\n"]
# 	}
# }
# proc getBuf { cell  function } {
# 	set content {}
# 	set name [get_property NAME $cell]
# 	append content [format "\n\t-- %s\n" $name]
# 
# 	set pin [format "%s/I" $cell]
# 	#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 	#set net_name [get_property NAME $net]
# 	set net_name [getInPinNet $cell $pin "\'0\'"]
# 
# 	set pin [format "%s/O" $cell]
# 	set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 	if {$net != ""} {
# 		set out_name [get_property NAME $net]
# 		if {$function == true} {
# 			append content [format "\t%s <= not(%s);\n" $out_name $net_name];	
# 		} else {
# 			append content  [format "\t%s <= %s;\n" $out_name $net_name];
# 		}
# 		return $content
# 	} else {
# 		catch {common::send_msg_id "bd2vhdl  jadro-3" "CRITICAL WARNING" "${cell}: odstraneno, vystup neni pripojen!"}
# 		return [append content "\t-- odstraneno, vystup neni pripojen\n"]
# 	}
# }
# proc getSource { cell  function } {
# 	set content {}
# 	set name [get_property NAME $cell]
# 	append content [format "\n\t-- %s\n" $name]
# 
# 	set pin [format "%s/O" $cell]
# 	set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 	if {$net != ""} {
# 		set out_name [get_property NAME $net]
# 		if {$function == true} {
# 			append content [format "\t%s <= '1';\n" $out_name];	
# 		} else {
# 			append content [format "\t%s <= '0';\n" $out_name];
# 		}
# 		return $content
# 	} else {
# 		catch {common::send_msg_id "bd2vhdl  jadro-3" "CRITICAL WARNING" "${cell}: odstraneno, vystup neni pripojen!"}
# 		return [append content "\t-- odstraneno, vystup neni pripojen\n"]
# 	}
# }
# proc getSplitter { cell } {
# 	set width [get_property CONFIG.WIDTH [get_bd_cells -quiet $cell]]
# 	set pin [format "%s/I" $cell]
# 	set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 	if {$net != ""} {
# 		set in_name [get_property NAME $net]
# 		set content {}
# 		set name [get_property NAME $cell]
# 		append content [format "\n\t-- %s\n" $name]
# 		for {set i 0} { $i < $width } { incr i } {
# 			set pin [format "%s/O%u" $cell $i]
# 			set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 			if {$net != ""} {
# 				set net_name [get_property NAME $net]
# 				append content [format "\t%s <= %s(%u);\n" $net_name $in_name $i]
# 			} else {
# 				catch {common::send_msg_id "bd2vhdl  jadro-3" "CRITICAL WARNING" "${cell}: ${pin} odstranen, vystup neni pripojen!"}
# 			}
# 		}
# 	} else {
# 		set content {}
# 		set name [get_property NAME $cell]
# 		append content [format "\n\t-- %s\n" $name]
# 		for {set i 0} { $i < $width } { incr i } {
# 			set pin [format "%s/O%u" $cell $i]
# 			set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 			if {$net != ""} {
# 				set net_name [get_property NAME $net]
# 				append content [format "\t%s <= \'0\';\n" $net_name $i]
# 				catch {common::send_msg_id "bd2vhdl  jadro-2" "CRITICAL WARNING" "${cell} nepripojen vstup, ${net_name} bude pripojeno k \'0\'"}
# 			} else {
# 				catch {common::send_msg_id "bd2vhdl  jadro-3" "CRITICAL WARNING" "${cell}: ${pin} odstranen, vystup neni pripojen!"}
# 			}
# 		}
# 	}
# 	return $content
# }
# proc getDff { cell } {
# 	set ce [get_property CONFIG.CE [get_bd_cells -quiet $cell]]
# 	set reset [get_property CONFIG.Reset [get_bd_cells -quiet $cell]]
# 
# 	set content {}
# 	set name [get_property NAME $cell]
# 	append content [format "\n\t-- %s\n" $name]
# 
# 	set pin [format "%s/q" $cell]
# 	set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 	if {$net != ""} {
# 		set out_name [get_property NAME $net]
# 
# 		set pin [format "%s/clk" $cell]
# 		set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 		if {$net == ""} {
# 			catch {common::send_msg_id "bd2vhdl  jadro-3" "CRITICAL WARNING" "${cell}: odstraneno, nejsou pripojene hodiny!"}
# 			return [append content "\t-- odstraneno, , nejsou pripojene hodiny!\n"]
# 		}
# 		#set clk_name [get_property NAME $net]
# 		set clk_name [getInPinNet $cell $pin "\'0\'"]
# 
# 		set pin [format "%s/d" $cell]
# 		#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 		#set in_name [get_property NAME $net]
# 		set in_name [getInPinNet $cell $pin "\'0\'"]
# 
# 		if {$ce == "true"} {
# 			set pin [format "%s/ce" $cell]
# 			#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 			#set ce_name [get_property NAME $net]
# 			set ce_name [getInPinNet $cell $pin "\'1\'"]
# 		}
# 
# 		if {$reset == "true"} {
# 			set pin [format "%s/reset" $cell]
# 			#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 			#set reset_name [get_property NAME $net]
# 			set reset_name [getInPinNet $cell $pin "\'0\'"]
# 		}
# 
# 		append content [format "\tprocess (%s)\n\tbegin\n" $clk_name]
# 		append content [format "\t\tif rising_edge(%s) then\n" $clk_name]
# 		if {$reset == "true"} {
# 			append content [format "\t\t\tif %s = '1' then\n\t\t\t\t%s <= '0';\n\t\t\tels" $reset_name $out_name]
# 		} else {
# 			append content "\t\t\t"
# 		}
# 
# 		if {$ce == "true"} {
# 			append content [format "if %s = '1' then\n" $ce_name]
# 			append content [format "\t\t\t\t%s <= %s;\n" $out_name $in_name]
# 			append content "\t\t\tend if;\n"
# 		} else {
# 			if {$reset == "true"} {
# 				append content [format "e\n\t\t\t\t%s <= %s;\n" $out_name $in_name]
# 				append content "\t\t\tend if;\n"
# 			} else {
# 				append content [format "%s <= %s;\n" $out_name $in_name]
# 			}
# 		}
# 
# 		append content "\t\tend if;\n\tend process;\n";
# 	} else {
# 		catch {common::send_msg_id "bd2vhdl jadro-3" "CRITICAL WARNING" "${cell}: odstraneno, vystup neni pripojen!"}
# 		return [append content "\t-- odstraneno, vystup neni pripojen\n"]
# 	}
# 	return $content
# }
# proc getMux { cell } {
# 	set ports_count [get_property CONFIG.Data_Ports [get_bd_cells -quiet $cell]]
# 	set width [get_property CONFIG.WIDTH [get_bd_cells -quiet $cell]]
# 	set i0_bus [get_property CONFIG.I0_BUS [get_bd_cells -quiet $cell]]
# 	set i1_bus [get_property CONFIG.I1_BUS [get_bd_cells -quiet $cell]]
# 	set i2_bus [get_property CONFIG.I2_BUS [get_bd_cells -quiet $cell]]
# 	set i3_bus [get_property CONFIG.I3_BUS [get_bd_cells -quiet $cell]]
# 	set o_bus [get_property CONFIG.O_BUS [get_bd_cells -quiet $cell]]
# 
# 	set content {}
# 	set name [get_property NAME $cell]
# 	append content [format "\n\t-- %s\n" $name]
# 
# 	for {set i 0} { $i < $width } { incr i } {
# 		if {$o_bus == "true"} {
# 			set pin [format "%s/O" $cell]
# 			set vecO [format "(%u)" $i]
# 		} else {
# 			set pin [format "%s/O_%u" $cell $i]
# 			set vecO ""
# 		}
# 		set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 		if {$net != ""} {
# 			set out_name [get_property NAME $net]
# 
# 			if {$i0_bus == "true"} {
# 				set pin [format "%s/I0" $cell]
# 				set vec0 [format "(%u)" $i]
# 			} else {
# 				set pin [format "%s/I0_%u" $cell $i]
# 				set vec0 ""
# 			}
# 			#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 			#set i0_name [get_property NAME $net]
# 			set i0_name [getInPinNet $cell $pin "\'0\'"]
# 			if {$i0_name == "'0'"} {
# 				set vec0 ""
# 			}
# 
# 			if {$i1_bus == "true"} {
# 				set pin [format "%s/I1" $cell]
# 				set vec1 [format "(%u)" $i]
# 			} else {
# 				set pin [format "%s/I1_%u" $cell $i]
# 				set vec1 ""
# 			}
# 			#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 			#set i1_name [get_property NAME $net]
# 			set i1_name [getInPinNet $cell $pin "\'0\'"]
# 			if {$i1_name == "'0'"} {
# 				set vec1 ""
# 			}
# 
# 			set pin [format "%s/Sel0" $cell]
# 			#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 			#set sel0_name [get_property NAME $net]
# 			set sel0_name [getInPinNet $cell $pin "\'0\'"]
# 
# 			if {$ports_count > 2} {
# 				if {$i2_bus == "true"} {
# 					set pin [format "%s/I2" $cell]
# 					set vec2 [format "(%u)" $i]
# 				} else {
# 					set pin [format "%s/I2_%u" $cell $i]
# 					set vec2 ""
# 				}
# 				#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 				#set i2_name [get_property NAME $net]
# 				set i2_name [getInPinNet $cell $pin "\'0\'"]
# 				if {$i2_name == "'0'"} {
# 					set vec2 ""
# 				}
# 
# 				if {$i3_bus == "true"} {
# 					set pin [format "%s/I3" $cell]
# 					set vec3 [format "(%u)" $i]
# 				} else {
# 					set pin [format "%s/I3_%u" $cell $i]
# 					set vec3 ""
# 				}
# 				#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 				#set i3_name [get_property NAME $net]
# 				set i3_name [getInPinNet $cell $pin "\'0\'"]
# 				if {$i3_name == "'0'"} {
# 					set vec3 ""
# 				}
# 
# 				set pin [format "%s/Sel1" $cell]
# 				#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 				#set sel1_name [get_property NAME $net]
# 				set sel1_name [getInPinNet $cell $pin "\'0\'"]
# 				
# 				if {$sel0_name != "'0'" && $sel1_name != "'0'"} {
# 					append content [format "\t%s%s <= %s%s when %s = '0' and %s = '0' else\n" $out_name $vecO $i0_name $vec0 $sel1_name $sel0_name]
# 					append content [format "\t\t%s%s when %s = '0' and %s = '1' else\n" $i1_name $vec1 $sel1_name $sel0_name]
# 					append content [format "\t\t%s%s when %s = '1' and %s = '0' else\n" $i2_name $vec2 $sel1_name $sel0_name]
# 					append content [format "\t\t%s%s when %s = '1' and %s = '1' else '0';\n\n" $i3_name $vec3 $sel1_name $sel0_name]
# 				} else {
# 					append content [format "\t%s%s <= %s%s;\n" $out_name $vecO $i0_name $vec0]
# 				}
# 			} else {
# 				if {$sel0_name != "'0'"} {
# 					append content [format "\t%s%s <= %s%s when (%s = '1') else %s%s;\n" $out_name $vecO $i1_name $vec1 $sel0_name $i0_name $vec0]
# 				} else {
# 					append content [format "\t%s%s <= %s%s;\n" $out_name $vecO $i0_name $vec0]
# 				}
# 			}
# 		} else {
# 			catch {common::send_msg_id "bd2vhdl  jadro-3" "CRITICAL WARNING" " ${cell}: pin ${pin} odstranen, vystup neni pripojen!"}
# 			return [append content "\t-- ${pin} odstranen, vystup neni pripojen\n"]
# 		}
# 		
# 	}
# 	return $content
# }
# proc getDebounce { cell } {
# 	set width [get_property CONFIG.width [get_bd_cells -quiet $cell]]
# 
# 	set content {}
# 	set name [get_property NAME $cell]
# 	append content [format "\n\t-- %s\n" $name]
# 
# 	set pin [format "%s/tl_out" $cell]
# 	set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 	if {$net != ""} {
# 		set tl_out [get_property NAME $net]
# 
# 		set pin [format "%s/clk" $cell]
# 		set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 		if {$net != ""} {
# 			set clk [get_property NAME $net]
# 
# 			set pin [format "%s/tl_in" $cell]
# 			#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 			#set tl_in [get_property NAME $net]
# 			set tl_in [getInPinNet $cell $pin "\'0\'"]
# 
# 			append content [ format "\t%s : debounce\n\t\tgeneric map (\n\t\t\twidth => %s\n\t\t)\n\t\tport map (\n\t\t\tclk	=> %s,\n\t\t\ttl_in	=> %s,\n\t\t\ttl_out	=> %s\n\t\t);\n" $name $width $clk $tl_in $tl_out]
# 		} else {
# 			catch {common::send_msg_id "bd2vhdl  jadro-3" "CRITICAL WARNING" "${cell}: odstraneno, nejsou pripojene hodiny!"}
# 			return [append content "\t-- odstraneno, , nejsou pripojene hodiny!\n"]	
# 		}
# 	} else {
# 		catch {common::send_msg_id "bd2vhdl  jadro-3" "CRITICAL WARNING" "${cell}: odstraneno, vystup neni pripojen!"}
# 		return [append content "\t-- odstraneno, vystup neni pripojen\n"]
# 	}
# 	
# 	return $content
# }
# set debounce_component "\tcomponent debounce
# \t\tgeneric (
# \t\t\twidth: integer := 22
# \t\t);
# \t\tport (
# \t\t\tclk    : in  std_logic;
# \t\t\ttl_in  : in  std_logic;
# \t\t\ttl_out : out std_logic
# \t\t);
# \tend component;\n"
# proc getModule_ref { cell components component_name} {
# 	upvar $components comps
# 
# 	set inPins [lsort [get_bd_pins -quiet -of_objects [get_bd_cells $cell] -filter DIR==I]]
# 	array set inputBusPins [list]
# 	array set inputBitPins [list]
# 	sortPins $inPins inputBusPins inputBitPins
# 
# 	set outPins [lsort [get_bd_pins -quiet -of_objects [get_bd_cells $cell] -filter DIR==O]]
# 	array set outputBusPins [list]
# 	array set outputBitPins [list]
# 	sortPins $outPins outputBusPins outputBitPins
# 
# 	set content {}
# 	set name [get_property NAME $cell]
# 	append content [format "\n\t-- %s\n" $name]
# 
# 	set lines [list]
# 	foreach {pin net} [array2sortedList inputBitPins] {
#     	lappend lines [list "$pin" "in  std_logic;" "$net"]
#   	}
# 	foreach {pin busInfo} [array2sortedList inputBusPins] {
# 		lassign $busInfo stop start net
# 		if {$start>$stop} {
# 			lappend lines [list "$pin" "in  std_logic_vector($start downto $stop);" "$net"]
# 		} else {
# 			lappend lines [list "$pin" "in  std_logic_vector($start to $stop);" "$net"]
# 		}
#   	}
# 	foreach {pin net} [array2sortedList outputBitPins] {
#     	lappend lines [list "$pin" "out std_logic;" "$net"]
# 	}
# 	foreach {pin busInfo} [array2sortedList outputBusPins] {
# 		lassign $busInfo stop start net
# 		if {$start>$stop} {
# 			lappend lines [list "$pin"  "out std_logic_vector($start downto $stop);" "$net"]
# 		} else {
# 			lappend lines [list "$pin" "out std_logic_vector($start to $stop);" "$net"]
# 		}
# 	}
# 	# Detect maximum column width to align columns
# 	foreach line $lines {
# 		set width [string length [lindex $line 0]]
# 		if {![info exist maxWidth] || $maxWidth < $width} {
# 			set maxWidth $width
# 		}
# 	}
# 	set ports {}
# 	set port_map {}
# 	foreach line $lines {
# 		append ports [format "\n\t\t\t%-${maxWidth}s :  %-${maxWidth}s" [lindex $line 0] [lindex $line 1]]
# 		append port_map [format "\n\t\t\t%-${maxWidth}s =>  %-${maxWidth}s," [lindex $line 0] [lindex $line 2]]
# 	}
# 	# Remove the last semi-colon
#   	set index [string last {;} $ports]
#   	set ports [string replace $ports $index $index {}]
# 	# Remove the last ,
#   	set index [string last {,} $port_map]
#   	set port_map [string replace $port_map $index $index {}]
# 
# 	# nepridavat pokud uz tam ta komponenta je
# 	if {[string first $component_name $comps] < 0} {
# 		append comps "\tcomponent ${component_name}\n\t\tport ("
# 		append comps $ports
# 		append comps "\n\t\t);\n\tend component;\n\n"
# 	}
# 	append content "\tinst_${name} : ${component_name}\n"
# 	append content "\t\tport map ("
# 	append content $port_map
# 	append content "\n\t\t);\n"
# }
# proc getHier { cell debounce components modules} {
# 	global debounce_component
# 	upvar $components comps
# 	upvar $modules mods
# 	upvar $debounce debs
# 
# 	set inPins [lsort [get_bd_pins -quiet -of_objects [get_bd_cells $cell] -filter DIR==I]]
# 	array set inputBusPins [list]
# 	array set inputBitPins [list]
# 	sortPins $inPins inputBusPins inputBitPins
# 
# 	set outPins [lsort [get_bd_pins -quiet -of_objects [get_bd_cells $cell] -filter DIR==O]]
# 	array set outputBusPins [list]
# 	array set outputBitPins [list]
# 	sortPins $outPins outputBusPins outputBitPins
# 
# 	set content {}
# 	set name [get_property NAME $cell]
# 	append content [format "\n\t-- %s\n" $name]
# 
# 	set lines [list]
# 	foreach {pin net} [array2sortedList inputBitPins] {
#     	lappend lines [list "$pin" "in  std_logic;" "$net"]
#   	}
# 	foreach {pin busInfo} [array2sortedList inputBusPins] {
# 		lassign $busInfo stop start net
# 		if {$start>$stop} {
# 			lappend lines [list "$pin" "in  std_logic_vector($start downto $stop);" "$net"]
# 		} else {
# 			lappend lines [list "$pin" "in  std_logic_vector($start to $stop);" "$net"]
# 		}
#   	}
# 	foreach {pin net} [array2sortedList outputBitPins] {
#     	lappend lines [list "$pin" "out std_logic;" "$net"]
# 	}
# 	foreach {pin busInfo} [array2sortedList outputBusPins] {
# 		lassign $busInfo stop start net
# 		if {$start>$stop} {
# 			lappend lines [list "$pin"  "out std_logic_vector($start downto $stop);" "$net"]
# 		} else {
# 			lappend lines [list "$pin" "out std_logic_vector($start to $stop);" "$net"]
# 		}
# 	}
# 	# Detect maximum column width to align columns
# 	foreach line $lines {
# 		set width [string length [lindex $line 0]]
# 		if {![info exist maxWidth] || $maxWidth < $width} {
# 			set maxWidth $width
# 		}
# 	}
# 	set ports {}
# 	set port_map {}
# 	foreach line $lines {
# 		append ports [format "\n\t\t\t%-${maxWidth}s :  %-${maxWidth}s" [lindex $line 0] [lindex $line 1]]
# 		append port_map [format "\n\t\t\t%-${maxWidth}s =>  %-${maxWidth}s," [lindex $line 0] [lindex $line 2]]
# 	}
# 	# Remove the last semi-colon
#   	set index [string last {;} $ports]
#   	set ports [string replace $ports $index $index {}]
# 	# Remove the last ,
#   	set index [string last {,} $port_map]
#   	set port_map [string replace $port_map $index $index {}]
# 
# 	set filtr [format {PATH !~ "%s/.*/.*"} $cell]
# 	set nets [lsort [get_bd_nets -quiet -of_objects [get_bd_cells $cell] -regexp -filter $filtr]]
# 	array set busNets [list ]
# 	set bitNets [list]
# 	sortNets $nets busNets bitNets
# 
# 	set lines [list]
# 	# Process single bit nets
# 	foreach net [lsort -dictionary $bitNets] {
# 		lappend lines [list "$net" "  std_logic;"]
# 	}
# 	# Process bus nets
# 	foreach {net busInfo} [array2sortedList busNets] {
# 		lassign $busInfo stop start
# 		if {$start>$stop} {
# 		lappend lines [list "$net" "  std_logic_vector($start downto $stop);"]
# 		} else {
# 		lappend lines [list "$net" "  std_logic_vector($start to $stop);"]
# 		}
# 	}
# 
# 	# Detect maximum column width to align columns
# 	foreach line $lines {
# 		set width [string length [lindex $line 0]]
# 		if {![info exist maxWidth] || $maxWidth < $width} {
# 			set maxWidth $width
# 		}
# 	}
# 
# 	# Build the content of the stub:
# 	set signals {}
# 	foreach line $lines {
# 		append signals [format "\n\tsignal %-${maxWidth}s :  %-${maxWidth}s" [lindex $line 0] [lindex $line 1]]
# 	}
#   set ports2Signals {}
#     foreach net [lsort -dictionary $nets] {
#         set net_name [get_property NAME [get_bd_nets -quiet $net]]
#         set ports_b [get_bd_ports -quiet -of_objects [get_bd_nets -quiet $net]]
#         if {$ports == {}} {
#             break
#         }
#         foreach port [lsort -dictionary $ports_b] {
#             set port_name [get_property NAME [get_bd_pins -quiet $port]]
#             set dir [get_property DIR [get_bd_pins -quiet $port]]
#             if {$dir == "I"} {
#                 append ports2Signals "\t$net_name <= $port_name;\n"    
#             } else {
#                 append ports2Signals "\t$port_name <= $net_name;\n"
#             }
#         }
#     }
#   
# 	set debounce_inner false
#   	set components_inner {}
#   	set modules_inner {}
#   	set body [getIPs $cell debounce_inner components_inner modules_inner]
# 	if {$debounce_inner} {
# 		puts "######################################################################x"
# 		append components_inner $debounce_component
# 		set debs true
#     }
# 	
# 	set comp_name [string replace $cell 0 0 {}]
#     set comp_name [string map {/ _} $comp_name]
#     append comps "\tcomponent ${comp_name}\n\t\tport ("
#     append mods "\n\nlibrary IEEE;\nuse IEEE.std_logic_1164.all;\n\n"
#     append mods "entity ${comp_name} is\n\tport("
#     append mods $ports
#     append comps $ports
#     append mods "\n\t\t);\nend entity ${comp_name};\n\narchitecture Behavioral of ${comp_name} is\n"
#     append mods $components_inner
#     append mods $signals
#     append mods "\nbegin\n"
#     append mods $ports2Signals
#     append mods $body
#     append mods "\nend Behavioral;"
#     append comps "\n\t\t);\n\tend component;\n\n"
#     append content "\tinst_${comp_name} : ${comp_name}\n"
#     append content "\t\tport map ("
#     append content $port_map
#     append content "\n\t\t);\n"
#     append mods $modules_inner
# 
# 	return $content
# }
# proc getIPs { parent debounce components modules} {
#   upvar $debounce deb
#   upvar $components comps
#   upvar $modules mods
#   if {$parent == ""} {
# 	set cells [get_bd_cells]	  
#   } else {
# 	set filtr [format {PATH !~ "%s/.*/.*"} $parent]
# 	set cells [get_bd_cells -of_objects [get_bd_cells $parent] -regexp -filter $filtr]
#   }
#   
#   set content {}
#   foreach cell [lsort -dictionary $cells] {
# 	set type [get_property TYPE [get_bd_cells -quiet $cell]]
# 	set name [get_property NAME [get_bd_cells -quiet $cell]]
# 	set vlnv [get_property VLNV [get_bd_cells -quiet $cell]]
# 	if {$type == "ip"} {
# 		set vlnvs [split $vlnv ":"]
# 		if {[lindex $vlnvs 0] == "FIT"} {
# 		 	switch [lindex $vlnvs 2] {
# 				"or" {
# 					append content [getGate $cell "or"]
# 				}
# 				"and" {
# 					append content [getGate $cell "and"]
# 				}
# 				"xor" {
# 					append content [getGate $cell "xor"]
# 				}
# 				"buf" {
# 					append content [getBuf $cell false]
# 				}
# 				"inv" {
# 					append content [getBuf $cell true]
# 				}
# 				"gnd" {
# 					append content [getSource $cell false]
# 				}
# 				"vcc" {
# 					append content [getSource $cell true]
# 				}
# 				"splitter" {
# 					append content [getSplitter $cell]
# 				}
# 				"mux" {
# 					append content [getMux $cell]
# 				}
# 				"dff" {
# 					append content [getDff $cell]
# 				}
# 				"debounce" {
# 					append content [getDebounce $cell]
# 					set deb true
# 				}
# 			}
# 		} elseif {[lindex $vlnvs 0] == "xilinx.com" && [lindex $vlnvs 1] == "module_ref"} {
# 			append content [getModule_ref $cell comps [lindex $vlnvs 2]]
# 		}
# 			
# 	} elseif {$type == "hier"} {
# 		append content [getHier $cell deb comps mods]
# 	}
#   }
#   return $content
# }
# set debounce_code "\n\n\nlibrary IEEE;
# use IEEE.STD_LOGIC_1164.ALL;
# use ieee.std_logic_unsigned.all;
# 
# entity debounce is
#     generic (
# 		width: integer := 22 -- 100 MHz clock -> 4 - simulation (90 ns); 22 - synthesis (ca. 20 ms)
# 	);
#     port (
# 		clk : in STD_LOGIC;
#         tl_in : in STD_LOGIC;
#         tl_out : out STD_LOGIC
# 	);
# end entity debounce;
# 
# architecture Behavioral of debounce is
# 
# signal cnt       : std_logic_vector(width-1 downto 0) := (others => '0');
# signal reset, ce : std_logic := '0';
# signal tl_prev   : std_logic := '0';
# 
# 
# begin
# 
#     counter: process(clk) begin
#         if rising_edge(clk) then 
#             if (reset = '1') then
#                 cnt <= (others => '0');
#             elsif (ce = '1') then
#                 cnt <= cnt + 1;
#             end if;
#         end if;
#     end process;
# 
#     process(clk) begin
#         if rising_edge(clk) then
#             if (tl_prev /= tl_in) then
#                 reset <= '1';
#             else 
#                 reset <= '0';
#             end if;
#         end if;
#     end process;
#                 
#     process(clk) begin
#         if rising_edge(clk) then
#             if (reset = '1') then
#                 tl_prev <= tl_in;
#             end if;
#         end if;
#     end process;
#                 
#     process(clk) begin
#         if rising_edge(clk) then
#             if ((cnt(width-1) = '1') and (cnt(0) = '0')) then
#                 tl_out <= tl_prev;
#             end if;
#         end if;
#     end process;
#                 
# 
#     ce <= '0' when ((cnt(width-1) = '1') and (cnt(0) = '1'))
#                 else '1';
# 
# end Behavioral;\n"
# proc vhdlTemplate { module } {
#   global debounce_code
#   global debounce_component
# 
#   set inPorts [lsort [get_bd_ports -quiet -filter DIR==I]]
#   array set inputBusPorts [list ]
#   set inputBitPorts [list]
#   sortPorts $inPorts inputBusPorts inputBitPorts
# 
#   set outPorts [lsort [get_bd_ports -quiet -filter DIR==O]]
#   array set outputBusPorts [list ]
#   set outputBitPorts [list]
#   sortPorts $outPorts outputBusPorts outputBitPorts
# 
#   set inoutPorts [lsort [get_bd_ports -quiet -filter DIR==IO]]
#   array set inoutBusPorts [list ]
#   set inoutBitPorts [list]
#   sortPorts $inoutPorts inoutBusPorts inoutBitPorts
# 
#   set lines [list]
#   # Process input single bit ports
# #   lappend lines "-- Input Ports - Single Bit"
#   foreach port [lsort -dictionary $inputBitPorts] {
#     lappend lines [list "$port" "in  std_logic;"]
#   }
#   # Process input bus ports
# #   lappend lines "-- Input Ports - Busses"
#   foreach {port busInfo} [array2sortedList inputBusPorts] {
#     lassign $busInfo stop start
#     if {$start>$stop} {
#       lappend lines [list "$port" "in  std_logic_vector($start downto $stop);"]
#     } else {
#       lappend lines [list "$port" "in  std_logic_vector($start to $stop);"]
#     }
#   }
#   # Process output single bit ports
# #   lappend lines "-- Output Ports - Single Bit"
#   foreach port [lsort -dictionary $outputBitPorts] {
#     lappend lines [list "$port" "out std_logic;"]
#   }
#   # Process output bus ports
# #   lappend lines "-- Output Ports - Busses"
#   foreach {port busInfo} [array2sortedList outputBusPorts] {
#     lassign $busInfo stop start
#     if {$start>$stop} {
#       lappend lines [list "$port"  "out std_logic_vector($start downto $stop);"]
#     } else {
#       lappend lines [list "$port" "out std_logic_vector($start to $stop);"]
#     }
#   }
#   # Process inout single bit ports
# #   lappend lines "-- InOut Ports - Single Bit"
#   foreach port [lsort -dictionary $inoutBitPorts] {
#     lappend lines [list "$port" "inout  std_logic;"]
#   }
#   # Process inout bus ports
# #   lappend lines "-- InOut Ports - Busses"
#   foreach {port busInfo} [array2sortedList inoutBusPorts] {
#     lassign $busInfo stop start
#     if {$start>$stop} {
#       lappend lines [list "$port" "inout  std_logic_vector($start downto $stop);"]
#     } else {
#       lappend lines [list "$port" "inout  std_logic_vector($start to $stop);"]
#     }
#   }
# 
#   # Detect maximum column width to align columns
#   foreach line $lines {
#     if {[regexp {^\s*\-\-} $line]} {
#       # Skip lines that are just comments
#       continue
#     }
#     set width [string length [lindex $line 0]]
#     if {![info exist maxWidth] || $maxWidth < $width} {
#       set maxWidth $width
#     }
#   }
# 
#   # Build the content of the stub:
#   set content {}
#   foreach line $lines {
#     if {[regexp {^\s*\-\-} $line]} {
#       # Lines that are just comments
#       append content "\n      $line"
#       continue
#     }
#     append content [format "\n      %-${maxWidth}s :  %-${maxWidth}s" [lindex $line 0] [lindex $line 1]]
#   }
# 
#   # Remove the last semi-colon
#   set index [string last {;} $content]
#   set content [string replace $content $index $index {}]
# 
# 
#   set nets [lsort [get_bd_nets -quiet]]
#   array set busNets [list ]
#   set bitNets [list]
#   sortNets $nets busNets bitNets
# 
#   set lines [list]
#   # Process single bit nets
#   foreach net [lsort -dictionary $bitNets] {
#     lappend lines [list "$net" "  std_logic;"]
#   }
#   # Process bus nets
#   foreach {net busInfo} [array2sortedList busNets] {
#     lassign $busInfo stop start
#     if {$start>$stop} {
#       lappend lines [list "$net" "  std_logic_vector($start downto $stop);"]
#     } else {
#       lappend lines [list "$net" "  std_logic_vector($start to $stop);"]
#     }
#   }
# 
#   # Detect maximum column width to align columns
#   foreach line $lines {
#     if {[regexp {^\s*\-\-} $line]} {
#       # Skip lines that are just comments
#       continue
#     }
#     set width [string length [lindex $line 0]]
#     if {![info exist maxWidth] || $maxWidth < $width} {
#       set maxWidth $width
#     }
#   }
# 
#   # Build the content of the stub:
#   set signals {}
#   foreach line $lines {
#     if {[regexp {^\s*\-\-} $line]} {
#       # Lines that are just comments
#       append signals "\n      $line"
#       continue
#     }
#     append signals [format "\n      signal %-${maxWidth}s :  %-${maxWidth}s" [lindex $line 0] [lindex $line 1]]
#   }
#   set ports2Signals {}
#   foreach port [lsort -dictionary $inPorts] {
# 	set port_name [get_property NAME [get_bd_ports -quiet $port]]
# 	set net [get_bd_nets -quiet -of_objects [get_bd_ports -quiet $port]]
# 	if {$net != ""} {
# 		set net_name [get_property NAME $net]
# 		append ports2Signals "\t$net_name <= $port_name;\n"
# 	} else {
# 		catch {common::send_msg_id "bd2vhdl   port-2" "CRITICAL WARNING" "${port_name}: port nepripojen!"}
# 	}
#   }
#   foreach port [lsort -dictionary $outPorts] {
# 	set port_name [get_property NAME [get_bd_ports -quiet $port]]
# 	set net [get_bd_nets -quiet -of_objects [get_bd_ports -quiet $port]]
# 	if {$net != ""} {
# 		set net_name [get_property NAME $net]
# 		append ports2Signals "\t$port_name <= $net_name;\n"
# 	} else {
# 		catch {common::send_msg_id "bd2vhdl   port-3" "CRITICAL WARNING" "${port_name}: port nepripojen!"}
# 	}
#   }
#   set debounce false
#   set components {}
#   set modules {}
#   set body [getIPs "" debounce components modules]
#   
#   if {$debounce} {
# 	  append components $debounce_component
#   }
#   # Now that the last semi-colon is replaced, add the header and footer
#   set content [format "library IEEE;
# use IEEE.std_logic_1164.all;
# 
# library xil_defaultlib;
# use xil_defaultlib.all;
# 
# entity ${module}_vhdl is
#    port (%s
#    );
# end entity ${module}_vhdl;
# 
# architecture Behavioral of ${module}_vhdl is
# %s
# %s
# begin
# %s
# %s
# end Behavioral;" $content $components $signals $ports2Signals $body]
# 
#   append content $modules
# 
#   if {$debounce} {
# 	  append content $debounce_code
#   }
# 
#   return $content
# }
# set name [current_bd_design -quiet]
# if {$name == ""} {
#     common::send_msg_id -continue "bd2vhdl design-2" "ERROR" "Je potreba otevrit block design!"
# 	return
# }
# save_bd_design $name
# validate_bd_design -force
# if { [llength [get_bd_ports]] > 0 } {
# 	puts "\n##### ${name} #####"
# 	set content [vhdlTemplate $name]
# 	set PROJ_DIR [get_property DIRECTORY [current_project]]
# 	set PROJ_DIR [file normalize $PROJ_DIR]
# 	set tmp_dir [file join $PROJ_DIR "tmp"]
# 	file mkdir $tmp_dir
# 	set filename "${name}.vhd"
# 	set filename_path [file join $tmp_dir $filename]
# 	# Save the template
# 	set mode {w}
# 	puts "\nCreating VHDL for Design $name in [file normalize $filename]\n"
# 	set tfh [open $filename_path $mode]
# 	puts $tfh $content
# 	close $tfh
# 
# 	import_files -force -norecurse $filename_path
# 	common::send_msg_id "bd2vhdl design-1" "INFO" "${name}_vhdl.vhd vygenerovan"
# } else {
# 	common::send_msg_id -continue "bd2vhdl design-3" "ERROR" "${name} neobsahuje zadne porty!"
# }

##### counter #####

Creating VHDL for Design counter in X:/SAP/lab5/counter.vhd

INFO: [bd2vhdl design-1] counter_vhdl.vhd vygenerovan
update_compile_order -fileset sources_1
create_bd_design "counter_full"
Wrote  : <X:/SAP/lab5/lab5.srcs/sources_1/bd/counter_full/counter_full.bd> 
update_compile_order -fileset sources_1
create_bd_cell -type module -reference counter_vhdl counter_vhdl_0
INFO: [IP_Flow 19-5107] Inferred bus interface 'reset' of definition 'xilinx.com:signal:reset:1.0' (from Xilinx Repository).
INFO: [IP_Flow 19-5107] Inferred bus interface 'clk' of definition 'xilinx.com:signal:clock:1.0' (from Xilinx Repository).
INFO: [IP_Flow 19-4728] Bus Interface 'clk': Added interface parameter 'ASSOCIATED_RESET' with value 'reset'.
WARNING: [IP_Flow 19-3153] Bus Interface 'clk': ASSOCIATED_BUSIF bus parameter is missing.
INFO: [IP_Flow 19-234] Refreshing IP repositories
INFO: [IP_Flow 19-1700] Loaded user IP repository 'x:/SAP/lib_SAP_2022_02_02'.
startgroup
create_bd_cell -type ip -vlnv FIT:user:debounce:1.0 debounce_0
endgroup
set_property location {0.5 -247 66} [get_bd_cells debounce_0]
set_property location {1.5 173 -89} [get_bd_cells counter_vhdl_0]
import_files -norecurse X:/SAP/lab3/lab3.srcs/sources_1/bd/decoder/ip/decoder_decoder_7seg_0_0/decoder_decoder_7seg_0_0.xci
WARNING: [IP_Flow 19-3571] IP 'decoder_decoder_7seg_0_0' is restricted:
* Module reference source file(s) not found.
Please select 'Report IP Status' from the 'Tools/Report' menu or run Tcl command 'report_ip_status' for more information.
export_ip_user_files -of_objects  [get_files  X:/SAP/lab5/lab5.srcs/sources_1/ip/decoder_decoder_7seg_0_0/decoder_decoder_7seg_0_0.xci] -lib_map_path [list {modelsim=X:/SAP/lab5/lab5.cache/compile_simlib/modelsim} {questa=X:/SAP/lab5/lab5.cache/compile_simlib/questa} {riviera=X:/SAP/lab5/lab5.cache/compile_simlib/riviera} {activehdl=X:/SAP/lab5/lab5.cache/compile_simlib/activehdl}] -force -quiet
update_compile_order -fileset sources_1
INFO: [IP_Flow 19-234] Refreshing IP repositories
INFO: [IP_Flow 19-1700] Loaded user IP repository 'x:/SAP/lib_SAP_2022_02_02'.
source X:/SAP/lib_SAP_2022_02_02/gen_bd_vhdl.tcl
# proc sortPorts { ports &bus &bit } {
# 
#   upvar ${&bus} busPorts
#   upvar ${&bit} bitPorts
#   array set busPorts [list]
#   set bitPorts [list]
# 
#   foreach port $ports {
#     set name [get_property -quiet NAME [get_bd_ports $port]]
# 	set busStart [get_property -quiet LEFT [get_bd_ports $port]]
#     set busStop  [get_property -quiet RIGHT  [get_bd_ports $port]]
#     if {$busStart != {}} {
#     #   set busWidth [get_property -quiet BUS_WIDTH [get_ports $port]]
#       array set busPorts [list $name [list $busStop $busStart]]
#     } else {
#       lappend bitPorts $name
#     }
#   }
#   return 0
# }
# proc sortPins { pins &bus &bit } {
# 
#   upvar ${&bus} busPins
#   upvar ${&bit} bitPins
#   array set busPins [list]
#   array set bitPins [list]
# 
#   foreach pin $pins {
#     set name [get_property -quiet NAME [get_bd_pins $pin]]
# 	set dir [get_property -quiet DIR [get_bd_pins $pin]]
# 	set busStart [get_property -quiet LEFT [get_bd_pins $pin]]
#     set busStop  [get_property -quiet RIGHT  [get_bd_pins $pin]]
# 	set net [get_bd_nets -quiet -of_objects [get_bd_pins $pin]]
# 	if {$net != ""} {
# 		set net_name [get_property -quiet NAME $net]
# 	} else {
# 		if {$dir == "I"} {
# 			if {$busStart != {}} {
# 				set net_name "(others => '0')"
# 				catch {common::send_msg_id "bd2vhdl    pin-2" "CRITICAL WARNING" "${pin}: nepripojen, bude pripojen k '0'"}
# 			} else {
# 				set net_name "'0'"
# 				catch {common::send_msg_id "bd2vhdl    pin-2" "CRITICAL WARNING" "${pin}: nepripojen, bude pripojen k '0'"}
# 			}
# 		} else {
# 			set net_name "open"
# 			catch {common::send_msg_id "bd2vhdl    pin-3" "CRITICAL WARNING" "${pin}: pin odstranen, vystup neni pripojen!"}
# 		}
# 	}
# 	if {$busStart != {}} {
# 		array set busPins [list $name [list $busStop $busStart $net_name]]
# 	} else {
# 		array set bitPins [list $name $net_name]
# 	}
#   }
#   return 0
# }
# proc sortNets { nets &bus &bit } {
# 
#   upvar ${&bus} busNets
#   upvar ${&bit} bitNets
#   array set busNets [list ]
#   set bitNets [list]
# 
#   foreach net $nets {
#     set name [get_property -quiet NAME [get_bd_nets $net]]
# 	set pin [lindex [get_bd_pins -of_objects [get_bd_nets $net]] 0]
# 	set busStart [get_property -quiet LEFT [get_bd_pins $pin]]
#     set busStop  [get_property -quiet RIGHT  [get_bd_pins $pin]]
#     if {$busStart != {}} {
#     #   set busWidth [get_property -quiet BUS_WIDTH [get_ports $port]]
#       array set busNets [list $name [list $busStop $busStart]]
#     } else {
#       lappend bitNets $name
#     }
#   }
#   return 0
# }
# proc array2sortedList { &ar } {
# 
#   upvar ${&ar} ar
#   set sortedList [list]
#   foreach key [lsort -dictionary [array names ar]] {
#     lappend sortedList $key
#     lappend sortedList $ar($key)
#   }
#   return $sortedList
# }
# proc getInPinNet { cell pin default_value} {
# 	set pin [get_bd_pins -quiet $pin]
# 	set net [get_bd_nets -quiet -of_objects $pin]
# 	if {$net == ""} {
# 		catch {common::send_msg_id "bd2vhdl    pin-2" "CRITICAL WARNING" "${pin} nepripojen, bude pripojeno k $default_value"}
# 		set net_name $default_value
# 	} else {
# 		set net_name [get_property NAME $net]
# 	}
# 	return $net_name
# }
# proc getGate { cell  function} {
# 	set inputs_count [get_property CONFIG.Inputs [get_bd_cells -quiet $cell]]
# 	set content {}
# 	set prom {}
# 	set name [get_property NAME $cell]
# 	append content [format "\n\t-- %s\n" $name]
# 	for {set i 0} { $i < $inputs_count } { incr i } {
# 		set cfg [format "CONFIG.I%u_Inverted" $i]
# 		set pin [format "%s/I%u" $cell $i]
# 		set inverted [get_property $cfg  [get_bd_cells -quiet $cell]]
# 		#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 		set net_name [getInPinNet $cell $pin "\'0\'"]
# 		#set net_name [get_property NAME $net]
# 		if {$inverted == "true"} {
# 			append prom [format "not(%s)" $net_name]
# 		} else {
# 			append prom [format "%s" $net_name]
# 		}
# 		if {$i < ($inputs_count-1)} {
# 			append prom [format " %s " $function]
# 		}
# 	}
# 	set cfg [format "CONFIG.O_Inverted" $i]
# 	set pin [format "%s/O" $cell]
# 	set inverted [get_property $cfg  [get_bd_cells -quiet $cell]]
# 	set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 	if {$net != ""} {
# 		set out_name [get_property NAME $net]
# 		if {$inverted == "true"} {
# 			append content [format "\t%s <= not(%s);\n" $out_name $prom];	
# 		} else {
# 			append content [format "\t%s <= %s;\n" $out_name $prom];
# 		}
# 		return $content
# 	} else {
# 		catch {common::send_msg_id "bd2vhdl  jadro-3" "CRITICAL WARNING" "${cell}: odstraneno, vystup neni pripojen!"}
# 		return [append content "\t-- odstraneno, vystup neni pripojen\n"]
# 	}
# }
# proc getBuf { cell  function } {
# 	set content {}
# 	set name [get_property NAME $cell]
# 	append content [format "\n\t-- %s\n" $name]
# 
# 	set pin [format "%s/I" $cell]
# 	#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 	#set net_name [get_property NAME $net]
# 	set net_name [getInPinNet $cell $pin "\'0\'"]
# 
# 	set pin [format "%s/O" $cell]
# 	set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 	if {$net != ""} {
# 		set out_name [get_property NAME $net]
# 		if {$function == true} {
# 			append content [format "\t%s <= not(%s);\n" $out_name $net_name];	
# 		} else {
# 			append content  [format "\t%s <= %s;\n" $out_name $net_name];
# 		}
# 		return $content
# 	} else {
# 		catch {common::send_msg_id "bd2vhdl  jadro-3" "CRITICAL WARNING" "${cell}: odstraneno, vystup neni pripojen!"}
# 		return [append content "\t-- odstraneno, vystup neni pripojen\n"]
# 	}
# }
# proc getSource { cell  function } {
# 	set content {}
# 	set name [get_property NAME $cell]
# 	append content [format "\n\t-- %s\n" $name]
# 
# 	set pin [format "%s/O" $cell]
# 	set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 	if {$net != ""} {
# 		set out_name [get_property NAME $net]
# 		if {$function == true} {
# 			append content [format "\t%s <= '1';\n" $out_name];	
# 		} else {
# 			append content [format "\t%s <= '0';\n" $out_name];
# 		}
# 		return $content
# 	} else {
# 		catch {common::send_msg_id "bd2vhdl  jadro-3" "CRITICAL WARNING" "${cell}: odstraneno, vystup neni pripojen!"}
# 		return [append content "\t-- odstraneno, vystup neni pripojen\n"]
# 	}
# }
# proc getSplitter { cell } {
# 	set width [get_property CONFIG.WIDTH [get_bd_cells -quiet $cell]]
# 	set pin [format "%s/I" $cell]
# 	set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 	if {$net != ""} {
# 		set in_name [get_property NAME $net]
# 		set content {}
# 		set name [get_property NAME $cell]
# 		append content [format "\n\t-- %s\n" $name]
# 		for {set i 0} { $i < $width } { incr i } {
# 			set pin [format "%s/O%u" $cell $i]
# 			set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 			if {$net != ""} {
# 				set net_name [get_property NAME $net]
# 				append content [format "\t%s <= %s(%u);\n" $net_name $in_name $i]
# 			} else {
# 				catch {common::send_msg_id "bd2vhdl  jadro-3" "CRITICAL WARNING" "${cell}: ${pin} odstranen, vystup neni pripojen!"}
# 			}
# 		}
# 	} else {
# 		set content {}
# 		set name [get_property NAME $cell]
# 		append content [format "\n\t-- %s\n" $name]
# 		for {set i 0} { $i < $width } { incr i } {
# 			set pin [format "%s/O%u" $cell $i]
# 			set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 			if {$net != ""} {
# 				set net_name [get_property NAME $net]
# 				append content [format "\t%s <= \'0\';\n" $net_name $i]
# 				catch {common::send_msg_id "bd2vhdl  jadro-2" "CRITICAL WARNING" "${cell} nepripojen vstup, ${net_name} bude pripojeno k \'0\'"}
# 			} else {
# 				catch {common::send_msg_id "bd2vhdl  jadro-3" "CRITICAL WARNING" "${cell}: ${pin} odstranen, vystup neni pripojen!"}
# 			}
# 		}
# 	}
# 	return $content
# }
# proc getDff { cell } {
# 	set ce [get_property CONFIG.CE [get_bd_cells -quiet $cell]]
# 	set reset [get_property CONFIG.Reset [get_bd_cells -quiet $cell]]
# 
# 	set content {}
# 	set name [get_property NAME $cell]
# 	append content [format "\n\t-- %s\n" $name]
# 
# 	set pin [format "%s/q" $cell]
# 	set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 	if {$net != ""} {
# 		set out_name [get_property NAME $net]
# 
# 		set pin [format "%s/clk" $cell]
# 		set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 		if {$net == ""} {
# 			catch {common::send_msg_id "bd2vhdl  jadro-3" "CRITICAL WARNING" "${cell}: odstraneno, nejsou pripojene hodiny!"}
# 			return [append content "\t-- odstraneno, , nejsou pripojene hodiny!\n"]
# 		}
# 		#set clk_name [get_property NAME $net]
# 		set clk_name [getInPinNet $cell $pin "\'0\'"]
# 
# 		set pin [format "%s/d" $cell]
# 		#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 		#set in_name [get_property NAME $net]
# 		set in_name [getInPinNet $cell $pin "\'0\'"]
# 
# 		if {$ce == "true"} {
# 			set pin [format "%s/ce" $cell]
# 			#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 			#set ce_name [get_property NAME $net]
# 			set ce_name [getInPinNet $cell $pin "\'1\'"]
# 		}
# 
# 		if {$reset == "true"} {
# 			set pin [format "%s/reset" $cell]
# 			#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 			#set reset_name [get_property NAME $net]
# 			set reset_name [getInPinNet $cell $pin "\'0\'"]
# 		}
# 
# 		append content [format "\tprocess (%s)\n\tbegin\n" $clk_name]
# 		append content [format "\t\tif rising_edge(%s) then\n" $clk_name]
# 		if {$reset == "true"} {
# 			append content [format "\t\t\tif %s = '1' then\n\t\t\t\t%s <= '0';\n\t\t\tels" $reset_name $out_name]
# 		} else {
# 			append content "\t\t\t"
# 		}
# 
# 		if {$ce == "true"} {
# 			append content [format "if %s = '1' then\n" $ce_name]
# 			append content [format "\t\t\t\t%s <= %s;\n" $out_name $in_name]
# 			append content "\t\t\tend if;\n"
# 		} else {
# 			if {$reset == "true"} {
# 				append content [format "e\n\t\t\t\t%s <= %s;\n" $out_name $in_name]
# 				append content "\t\t\tend if;\n"
# 			} else {
# 				append content [format "%s <= %s;\n" $out_name $in_name]
# 			}
# 		}
# 
# 		append content "\t\tend if;\n\tend process;\n";
# 	} else {
# 		catch {common::send_msg_id "bd2vhdl jadro-3" "CRITICAL WARNING" "${cell}: odstraneno, vystup neni pripojen!"}
# 		return [append content "\t-- odstraneno, vystup neni pripojen\n"]
# 	}
# 	return $content
# }
# proc getMux { cell } {
# 	set ports_count [get_property CONFIG.Data_Ports [get_bd_cells -quiet $cell]]
# 	set width [get_property CONFIG.WIDTH [get_bd_cells -quiet $cell]]
# 	set i0_bus [get_property CONFIG.I0_BUS [get_bd_cells -quiet $cell]]
# 	set i1_bus [get_property CONFIG.I1_BUS [get_bd_cells -quiet $cell]]
# 	set i2_bus [get_property CONFIG.I2_BUS [get_bd_cells -quiet $cell]]
# 	set i3_bus [get_property CONFIG.I3_BUS [get_bd_cells -quiet $cell]]
# 	set o_bus [get_property CONFIG.O_BUS [get_bd_cells -quiet $cell]]
# 
# 	set content {}
# 	set name [get_property NAME $cell]
# 	append content [format "\n\t-- %s\n" $name]
# 
# 	for {set i 0} { $i < $width } { incr i } {
# 		if {$o_bus == "true"} {
# 			set pin [format "%s/O" $cell]
# 			set vecO [format "(%u)" $i]
# 		} else {
# 			set pin [format "%s/O_%u" $cell $i]
# 			set vecO ""
# 		}
# 		set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 		if {$net != ""} {
# 			set out_name [get_property NAME $net]
# 
# 			if {$i0_bus == "true"} {
# 				set pin [format "%s/I0" $cell]
# 				set vec0 [format "(%u)" $i]
# 			} else {
# 				set pin [format "%s/I0_%u" $cell $i]
# 				set vec0 ""
# 			}
# 			#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 			#set i0_name [get_property NAME $net]
# 			set i0_name [getInPinNet $cell $pin "\'0\'"]
# 			if {$i0_name == "'0'"} {
# 				set vec0 ""
# 			}
# 
# 			if {$i1_bus == "true"} {
# 				set pin [format "%s/I1" $cell]
# 				set vec1 [format "(%u)" $i]
# 			} else {
# 				set pin [format "%s/I1_%u" $cell $i]
# 				set vec1 ""
# 			}
# 			#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 			#set i1_name [get_property NAME $net]
# 			set i1_name [getInPinNet $cell $pin "\'0\'"]
# 			if {$i1_name == "'0'"} {
# 				set vec1 ""
# 			}
# 
# 			set pin [format "%s/Sel0" $cell]
# 			#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 			#set sel0_name [get_property NAME $net]
# 			set sel0_name [getInPinNet $cell $pin "\'0\'"]
# 
# 			if {$ports_count > 2} {
# 				if {$i2_bus == "true"} {
# 					set pin [format "%s/I2" $cell]
# 					set vec2 [format "(%u)" $i]
# 				} else {
# 					set pin [format "%s/I2_%u" $cell $i]
# 					set vec2 ""
# 				}
# 				#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 				#set i2_name [get_property NAME $net]
# 				set i2_name [getInPinNet $cell $pin "\'0\'"]
# 				if {$i2_name == "'0'"} {
# 					set vec2 ""
# 				}
# 
# 				if {$i3_bus == "true"} {
# 					set pin [format "%s/I3" $cell]
# 					set vec3 [format "(%u)" $i]
# 				} else {
# 					set pin [format "%s/I3_%u" $cell $i]
# 					set vec3 ""
# 				}
# 				#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 				#set i3_name [get_property NAME $net]
# 				set i3_name [getInPinNet $cell $pin "\'0\'"]
# 				if {$i3_name == "'0'"} {
# 					set vec3 ""
# 				}
# 
# 				set pin [format "%s/Sel1" $cell]
# 				#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 				#set sel1_name [get_property NAME $net]
# 				set sel1_name [getInPinNet $cell $pin "\'0\'"]
# 				
# 				if {$sel0_name != "'0'" && $sel1_name != "'0'"} {
# 					append content [format "\t%s%s <= %s%s when %s = '0' and %s = '0' else\n" $out_name $vecO $i0_name $vec0 $sel1_name $sel0_name]
# 					append content [format "\t\t%s%s when %s = '0' and %s = '1' else\n" $i1_name $vec1 $sel1_name $sel0_name]
# 					append content [format "\t\t%s%s when %s = '1' and %s = '0' else\n" $i2_name $vec2 $sel1_name $sel0_name]
# 					append content [format "\t\t%s%s when %s = '1' and %s = '1' else '0';\n\n" $i3_name $vec3 $sel1_name $sel0_name]
# 				} else {
# 					append content [format "\t%s%s <= %s%s;\n" $out_name $vecO $i0_name $vec0]
# 				}
# 			} else {
# 				if {$sel0_name != "'0'"} {
# 					append content [format "\t%s%s <= %s%s when (%s = '1') else %s%s;\n" $out_name $vecO $i1_name $vec1 $sel0_name $i0_name $vec0]
# 				} else {
# 					append content [format "\t%s%s <= %s%s;\n" $out_name $vecO $i0_name $vec0]
# 				}
# 			}
# 		} else {
# 			catch {common::send_msg_id "bd2vhdl  jadro-3" "CRITICAL WARNING" " ${cell}: pin ${pin} odstranen, vystup neni pripojen!"}
# 			return [append content "\t-- ${pin} odstranen, vystup neni pripojen\n"]
# 		}
# 		
# 	}
# 	return $content
# }
# proc getDebounce { cell } {
# 	set width [get_property CONFIG.width [get_bd_cells -quiet $cell]]
# 
# 	set content {}
# 	set name [get_property NAME $cell]
# 	append content [format "\n\t-- %s\n" $name]
# 
# 	set pin [format "%s/tl_out" $cell]
# 	set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 	if {$net != ""} {
# 		set tl_out [get_property NAME $net]
# 
# 		set pin [format "%s/clk" $cell]
# 		set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 		if {$net != ""} {
# 			set clk [get_property NAME $net]
# 
# 			set pin [format "%s/tl_in" $cell]
# 			#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 			#set tl_in [get_property NAME $net]
# 			set tl_in [getInPinNet $cell $pin "\'0\'"]
# 
# 			append content [ format "\t%s : debounce\n\t\tgeneric map (\n\t\t\twidth => %s\n\t\t)\n\t\tport map (\n\t\t\tclk	=> %s,\n\t\t\ttl_in	=> %s,\n\t\t\ttl_out	=> %s\n\t\t);\n" $name $width $clk $tl_in $tl_out]
# 		} else {
# 			catch {common::send_msg_id "bd2vhdl  jadro-3" "CRITICAL WARNING" "${cell}: odstraneno, nejsou pripojene hodiny!"}
# 			return [append content "\t-- odstraneno, , nejsou pripojene hodiny!\n"]	
# 		}
# 	} else {
# 		catch {common::send_msg_id "bd2vhdl  jadro-3" "CRITICAL WARNING" "${cell}: odstraneno, vystup neni pripojen!"}
# 		return [append content "\t-- odstraneno, vystup neni pripojen\n"]
# 	}
# 	
# 	return $content
# }
# set debounce_component "\tcomponent debounce
# \t\tgeneric (
# \t\t\twidth: integer := 22
# \t\t);
# \t\tport (
# \t\t\tclk    : in  std_logic;
# \t\t\ttl_in  : in  std_logic;
# \t\t\ttl_out : out std_logic
# \t\t);
# \tend component;\n"
# proc getModule_ref { cell components component_name} {
# 	upvar $components comps
# 
# 	set inPins [lsort [get_bd_pins -quiet -of_objects [get_bd_cells $cell] -filter DIR==I]]
# 	array set inputBusPins [list]
# 	array set inputBitPins [list]
# 	sortPins $inPins inputBusPins inputBitPins
# 
# 	set outPins [lsort [get_bd_pins -quiet -of_objects [get_bd_cells $cell] -filter DIR==O]]
# 	array set outputBusPins [list]
# 	array set outputBitPins [list]
# 	sortPins $outPins outputBusPins outputBitPins
# 
# 	set content {}
# 	set name [get_property NAME $cell]
# 	append content [format "\n\t-- %s\n" $name]
# 
# 	set lines [list]
# 	foreach {pin net} [array2sortedList inputBitPins] {
#     	lappend lines [list "$pin" "in  std_logic;" "$net"]
#   	}
# 	foreach {pin busInfo} [array2sortedList inputBusPins] {
# 		lassign $busInfo stop start net
# 		if {$start>$stop} {
# 			lappend lines [list "$pin" "in  std_logic_vector($start downto $stop);" "$net"]
# 		} else {
# 			lappend lines [list "$pin" "in  std_logic_vector($start to $stop);" "$net"]
# 		}
#   	}
# 	foreach {pin net} [array2sortedList outputBitPins] {
#     	lappend lines [list "$pin" "out std_logic;" "$net"]
# 	}
# 	foreach {pin busInfo} [array2sortedList outputBusPins] {
# 		lassign $busInfo stop start net
# 		if {$start>$stop} {
# 			lappend lines [list "$pin"  "out std_logic_vector($start downto $stop);" "$net"]
# 		} else {
# 			lappend lines [list "$pin" "out std_logic_vector($start to $stop);" "$net"]
# 		}
# 	}
# 	# Detect maximum column width to align columns
# 	foreach line $lines {
# 		set width [string length [lindex $line 0]]
# 		if {![info exist maxWidth] || $maxWidth < $width} {
# 			set maxWidth $width
# 		}
# 	}
# 	set ports {}
# 	set port_map {}
# 	foreach line $lines {
# 		append ports [format "\n\t\t\t%-${maxWidth}s :  %-${maxWidth}s" [lindex $line 0] [lindex $line 1]]
# 		append port_map [format "\n\t\t\t%-${maxWidth}s =>  %-${maxWidth}s," [lindex $line 0] [lindex $line 2]]
# 	}
# 	# Remove the last semi-colon
#   	set index [string last {;} $ports]
#   	set ports [string replace $ports $index $index {}]
# 	# Remove the last ,
#   	set index [string last {,} $port_map]
#   	set port_map [string replace $port_map $index $index {}]
# 
# 	# nepridavat pokud uz tam ta komponenta je
# 	if {[string first $component_name $comps] < 0} {
# 		append comps "\tcomponent ${component_name}\n\t\tport ("
# 		append comps $ports
# 		append comps "\n\t\t);\n\tend component;\n\n"
# 	}
# 	append content "\tinst_${name} : ${component_name}\n"
# 	append content "\t\tport map ("
# 	append content $port_map
# 	append content "\n\t\t);\n"
# }
# proc getHier { cell debounce components modules} {
# 	global debounce_component
# 	upvar $components comps
# 	upvar $modules mods
# 	upvar $debounce debs
# 
# 	set inPins [lsort [get_bd_pins -quiet -of_objects [get_bd_cells $cell] -filter DIR==I]]
# 	array set inputBusPins [list]
# 	array set inputBitPins [list]
# 	sortPins $inPins inputBusPins inputBitPins
# 
# 	set outPins [lsort [get_bd_pins -quiet -of_objects [get_bd_cells $cell] -filter DIR==O]]
# 	array set outputBusPins [list]
# 	array set outputBitPins [list]
# 	sortPins $outPins outputBusPins outputBitPins
# 
# 	set content {}
# 	set name [get_property NAME $cell]
# 	append content [format "\n\t-- %s\n" $name]
# 
# 	set lines [list]
# 	foreach {pin net} [array2sortedList inputBitPins] {
#     	lappend lines [list "$pin" "in  std_logic;" "$net"]
#   	}
# 	foreach {pin busInfo} [array2sortedList inputBusPins] {
# 		lassign $busInfo stop start net
# 		if {$start>$stop} {
# 			lappend lines [list "$pin" "in  std_logic_vector($start downto $stop);" "$net"]
# 		} else {
# 			lappend lines [list "$pin" "in  std_logic_vector($start to $stop);" "$net"]
# 		}
#   	}
# 	foreach {pin net} [array2sortedList outputBitPins] {
#     	lappend lines [list "$pin" "out std_logic;" "$net"]
# 	}
# 	foreach {pin busInfo} [array2sortedList outputBusPins] {
# 		lassign $busInfo stop start net
# 		if {$start>$stop} {
# 			lappend lines [list "$pin"  "out std_logic_vector($start downto $stop);" "$net"]
# 		} else {
# 			lappend lines [list "$pin" "out std_logic_vector($start to $stop);" "$net"]
# 		}
# 	}
# 	# Detect maximum column width to align columns
# 	foreach line $lines {
# 		set width [string length [lindex $line 0]]
# 		if {![info exist maxWidth] || $maxWidth < $width} {
# 			set maxWidth $width
# 		}
# 	}
# 	set ports {}
# 	set port_map {}
# 	foreach line $lines {
# 		append ports [format "\n\t\t\t%-${maxWidth}s :  %-${maxWidth}s" [lindex $line 0] [lindex $line 1]]
# 		append port_map [format "\n\t\t\t%-${maxWidth}s =>  %-${maxWidth}s," [lindex $line 0] [lindex $line 2]]
# 	}
# 	# Remove the last semi-colon
#   	set index [string last {;} $ports]
#   	set ports [string replace $ports $index $index {}]
# 	# Remove the last ,
#   	set index [string last {,} $port_map]
#   	set port_map [string replace $port_map $index $index {}]
# 
# 	set filtr [format {PATH !~ "%s/.*/.*"} $cell]
# 	set nets [lsort [get_bd_nets -quiet -of_objects [get_bd_cells $cell] -regexp -filter $filtr]]
# 	array set busNets [list ]
# 	set bitNets [list]
# 	sortNets $nets busNets bitNets
# 
# 	set lines [list]
# 	# Process single bit nets
# 	foreach net [lsort -dictionary $bitNets] {
# 		lappend lines [list "$net" "  std_logic;"]
# 	}
# 	# Process bus nets
# 	foreach {net busInfo} [array2sortedList busNets] {
# 		lassign $busInfo stop start
# 		if {$start>$stop} {
# 		lappend lines [list "$net" "  std_logic_vector($start downto $stop);"]
# 		} else {
# 		lappend lines [list "$net" "  std_logic_vector($start to $stop);"]
# 		}
# 	}
# 
# 	# Detect maximum column width to align columns
# 	foreach line $lines {
# 		set width [string length [lindex $line 0]]
# 		if {![info exist maxWidth] || $maxWidth < $width} {
# 			set maxWidth $width
# 		}
# 	}
# 
# 	# Build the content of the stub:
# 	set signals {}
# 	foreach line $lines {
# 		append signals [format "\n\tsignal %-${maxWidth}s :  %-${maxWidth}s" [lindex $line 0] [lindex $line 1]]
# 	}
#   set ports2Signals {}
#     foreach net [lsort -dictionary $nets] {
#         set net_name [get_property NAME [get_bd_nets -quiet $net]]
#         set ports_b [get_bd_ports -quiet -of_objects [get_bd_nets -quiet $net]]
#         if {$ports == {}} {
#             break
#         }
#         foreach port [lsort -dictionary $ports_b] {
#             set port_name [get_property NAME [get_bd_pins -quiet $port]]
#             set dir [get_property DIR [get_bd_pins -quiet $port]]
#             if {$dir == "I"} {
#                 append ports2Signals "\t$net_name <= $port_name;\n"    
#             } else {
#                 append ports2Signals "\t$port_name <= $net_name;\n"
#             }
#         }
#     }
#   
# 	set debounce_inner false
#   	set components_inner {}
#   	set modules_inner {}
#   	set body [getIPs $cell debounce_inner components_inner modules_inner]
# 	if {$debounce_inner} {
# 		puts "######################################################################x"
# 		append components_inner $debounce_component
# 		set debs true
#     }
# 	
# 	set comp_name [string replace $cell 0 0 {}]
#     set comp_name [string map {/ _} $comp_name]
#     append comps "\tcomponent ${comp_name}\n\t\tport ("
#     append mods "\n\nlibrary IEEE;\nuse IEEE.std_logic_1164.all;\n\n"
#     append mods "entity ${comp_name} is\n\tport("
#     append mods $ports
#     append comps $ports
#     append mods "\n\t\t);\nend entity ${comp_name};\n\narchitecture Behavioral of ${comp_name} is\n"
#     append mods $components_inner
#     append mods $signals
#     append mods "\nbegin\n"
#     append mods $ports2Signals
#     append mods $body
#     append mods "\nend Behavioral;"
#     append comps "\n\t\t);\n\tend component;\n\n"
#     append content "\tinst_${comp_name} : ${comp_name}\n"
#     append content "\t\tport map ("
#     append content $port_map
#     append content "\n\t\t);\n"
#     append mods $modules_inner
# 
# 	return $content
# }
# proc getIPs { parent debounce components modules} {
#   upvar $debounce deb
#   upvar $components comps
#   upvar $modules mods
#   if {$parent == ""} {
# 	set cells [get_bd_cells]	  
#   } else {
# 	set filtr [format {PATH !~ "%s/.*/.*"} $parent]
# 	set cells [get_bd_cells -of_objects [get_bd_cells $parent] -regexp -filter $filtr]
#   }
#   
#   set content {}
#   foreach cell [lsort -dictionary $cells] {
# 	set type [get_property TYPE [get_bd_cells -quiet $cell]]
# 	set name [get_property NAME [get_bd_cells -quiet $cell]]
# 	set vlnv [get_property VLNV [get_bd_cells -quiet $cell]]
# 	if {$type == "ip"} {
# 		set vlnvs [split $vlnv ":"]
# 		if {[lindex $vlnvs 0] == "FIT"} {
# 		 	switch [lindex $vlnvs 2] {
# 				"or" {
# 					append content [getGate $cell "or"]
# 				}
# 				"and" {
# 					append content [getGate $cell "and"]
# 				}
# 				"xor" {
# 					append content [getGate $cell "xor"]
# 				}
# 				"buf" {
# 					append content [getBuf $cell false]
# 				}
# 				"inv" {
# 					append content [getBuf $cell true]
# 				}
# 				"gnd" {
# 					append content [getSource $cell false]
# 				}
# 				"vcc" {
# 					append content [getSource $cell true]
# 				}
# 				"splitter" {
# 					append content [getSplitter $cell]
# 				}
# 				"mux" {
# 					append content [getMux $cell]
# 				}
# 				"dff" {
# 					append content [getDff $cell]
# 				}
# 				"debounce" {
# 					append content [getDebounce $cell]
# 					set deb true
# 				}
# 			}
# 		} elseif {[lindex $vlnvs 0] == "xilinx.com" && [lindex $vlnvs 1] == "module_ref"} {
# 			append content [getModule_ref $cell comps [lindex $vlnvs 2]]
# 		}
# 			
# 	} elseif {$type == "hier"} {
# 		append content [getHier $cell deb comps mods]
# 	}
#   }
#   return $content
# }
# set debounce_code "\n\n\nlibrary IEEE;
# use IEEE.STD_LOGIC_1164.ALL;
# use ieee.std_logic_unsigned.all;
# 
# entity debounce is
#     generic (
# 		width: integer := 22 -- 100 MHz clock -> 4 - simulation (90 ns); 22 - synthesis (ca. 20 ms)
# 	);
#     port (
# 		clk : in STD_LOGIC;
#         tl_in : in STD_LOGIC;
#         tl_out : out STD_LOGIC
# 	);
# end entity debounce;
# 
# architecture Behavioral of debounce is
# 
# signal cnt       : std_logic_vector(width-1 downto 0) := (others => '0');
# signal reset, ce : std_logic := '0';
# signal tl_prev   : std_logic := '0';
# 
# 
# begin
# 
#     counter: process(clk) begin
#         if rising_edge(clk) then 
#             if (reset = '1') then
#                 cnt <= (others => '0');
#             elsif (ce = '1') then
#                 cnt <= cnt + 1;
#             end if;
#         end if;
#     end process;
# 
#     process(clk) begin
#         if rising_edge(clk) then
#             if (tl_prev /= tl_in) then
#                 reset <= '1';
#             else 
#                 reset <= '0';
#             end if;
#         end if;
#     end process;
#                 
#     process(clk) begin
#         if rising_edge(clk) then
#             if (reset = '1') then
#                 tl_prev <= tl_in;
#             end if;
#         end if;
#     end process;
#                 
#     process(clk) begin
#         if rising_edge(clk) then
#             if ((cnt(width-1) = '1') and (cnt(0) = '0')) then
#                 tl_out <= tl_prev;
#             end if;
#         end if;
#     end process;
#                 
# 
#     ce <= '0' when ((cnt(width-1) = '1') and (cnt(0) = '1'))
#                 else '1';
# 
# end Behavioral;\n"
# proc vhdlTemplate { module } {
#   global debounce_code
#   global debounce_component
# 
#   set inPorts [lsort [get_bd_ports -quiet -filter DIR==I]]
#   array set inputBusPorts [list ]
#   set inputBitPorts [list]
#   sortPorts $inPorts inputBusPorts inputBitPorts
# 
#   set outPorts [lsort [get_bd_ports -quiet -filter DIR==O]]
#   array set outputBusPorts [list ]
#   set outputBitPorts [list]
#   sortPorts $outPorts outputBusPorts outputBitPorts
# 
#   set inoutPorts [lsort [get_bd_ports -quiet -filter DIR==IO]]
#   array set inoutBusPorts [list ]
#   set inoutBitPorts [list]
#   sortPorts $inoutPorts inoutBusPorts inoutBitPorts
# 
#   set lines [list]
#   # Process input single bit ports
# #   lappend lines "-- Input Ports - Single Bit"
#   foreach port [lsort -dictionary $inputBitPorts] {
#     lappend lines [list "$port" "in  std_logic;"]
#   }
#   # Process input bus ports
# #   lappend lines "-- Input Ports - Busses"
#   foreach {port busInfo} [array2sortedList inputBusPorts] {
#     lassign $busInfo stop start
#     if {$start>$stop} {
#       lappend lines [list "$port" "in  std_logic_vector($start downto $stop);"]
#     } else {
#       lappend lines [list "$port" "in  std_logic_vector($start to $stop);"]
#     }
#   }
#   # Process output single bit ports
# #   lappend lines "-- Output Ports - Single Bit"
#   foreach port [lsort -dictionary $outputBitPorts] {
#     lappend lines [list "$port" "out std_logic;"]
#   }
#   # Process output bus ports
# #   lappend lines "-- Output Ports - Busses"
#   foreach {port busInfo} [array2sortedList outputBusPorts] {
#     lassign $busInfo stop start
#     if {$start>$stop} {
#       lappend lines [list "$port"  "out std_logic_vector($start downto $stop);"]
#     } else {
#       lappend lines [list "$port" "out std_logic_vector($start to $stop);"]
#     }
#   }
#   # Process inout single bit ports
# #   lappend lines "-- InOut Ports - Single Bit"
#   foreach port [lsort -dictionary $inoutBitPorts] {
#     lappend lines [list "$port" "inout  std_logic;"]
#   }
#   # Process inout bus ports
# #   lappend lines "-- InOut Ports - Busses"
#   foreach {port busInfo} [array2sortedList inoutBusPorts] {
#     lassign $busInfo stop start
#     if {$start>$stop} {
#       lappend lines [list "$port" "inout  std_logic_vector($start downto $stop);"]
#     } else {
#       lappend lines [list "$port" "inout  std_logic_vector($start to $stop);"]
#     }
#   }
# 
#   # Detect maximum column width to align columns
#   foreach line $lines {
#     if {[regexp {^\s*\-\-} $line]} {
#       # Skip lines that are just comments
#       continue
#     }
#     set width [string length [lindex $line 0]]
#     if {![info exist maxWidth] || $maxWidth < $width} {
#       set maxWidth $width
#     }
#   }
# 
#   # Build the content of the stub:
#   set content {}
#   foreach line $lines {
#     if {[regexp {^\s*\-\-} $line]} {
#       # Lines that are just comments
#       append content "\n      $line"
#       continue
#     }
#     append content [format "\n      %-${maxWidth}s :  %-${maxWidth}s" [lindex $line 0] [lindex $line 1]]
#   }
# 
#   # Remove the last semi-colon
#   set index [string last {;} $content]
#   set content [string replace $content $index $index {}]
# 
# 
#   set nets [lsort [get_bd_nets -quiet]]
#   array set busNets [list ]
#   set bitNets [list]
#   sortNets $nets busNets bitNets
# 
#   set lines [list]
#   # Process single bit nets
#   foreach net [lsort -dictionary $bitNets] {
#     lappend lines [list "$net" "  std_logic;"]
#   }
#   # Process bus nets
#   foreach {net busInfo} [array2sortedList busNets] {
#     lassign $busInfo stop start
#     if {$start>$stop} {
#       lappend lines [list "$net" "  std_logic_vector($start downto $stop);"]
#     } else {
#       lappend lines [list "$net" "  std_logic_vector($start to $stop);"]
#     }
#   }
# 
#   # Detect maximum column width to align columns
#   foreach line $lines {
#     if {[regexp {^\s*\-\-} $line]} {
#       # Skip lines that are just comments
#       continue
#     }
#     set width [string length [lindex $line 0]]
#     if {![info exist maxWidth] || $maxWidth < $width} {
#       set maxWidth $width
#     }
#   }
# 
#   # Build the content of the stub:
#   set signals {}
#   foreach line $lines {
#     if {[regexp {^\s*\-\-} $line]} {
#       # Lines that are just comments
#       append signals "\n      $line"
#       continue
#     }
#     append signals [format "\n      signal %-${maxWidth}s :  %-${maxWidth}s" [lindex $line 0] [lindex $line 1]]
#   }
#   set ports2Signals {}
#   foreach port [lsort -dictionary $inPorts] {
# 	set port_name [get_property NAME [get_bd_ports -quiet $port]]
# 	set net [get_bd_nets -quiet -of_objects [get_bd_ports -quiet $port]]
# 	if {$net != ""} {
# 		set net_name [get_property NAME $net]
# 		append ports2Signals "\t$net_name <= $port_name;\n"
# 	} else {
# 		catch {common::send_msg_id "bd2vhdl   port-2" "CRITICAL WARNING" "${port_name}: port nepripojen!"}
# 	}
#   }
#   foreach port [lsort -dictionary $outPorts] {
# 	set port_name [get_property NAME [get_bd_ports -quiet $port]]
# 	set net [get_bd_nets -quiet -of_objects [get_bd_ports -quiet $port]]
# 	if {$net != ""} {
# 		set net_name [get_property NAME $net]
# 		append ports2Signals "\t$port_name <= $net_name;\n"
# 	} else {
# 		catch {common::send_msg_id "bd2vhdl   port-3" "CRITICAL WARNING" "${port_name}: port nepripojen!"}
# 	}
#   }
#   set debounce false
#   set components {}
#   set modules {}
#   set body [getIPs "" debounce components modules]
#   
#   if {$debounce} {
# 	  append components $debounce_component
#   }
#   # Now that the last semi-colon is replaced, add the header and footer
#   set content [format "library IEEE;
# use IEEE.std_logic_1164.all;
# 
# library xil_defaultlib;
# use xil_defaultlib.all;
# 
# entity ${module}_vhdl is
#    port (%s
#    );
# end entity ${module}_vhdl;
# 
# architecture Behavioral of ${module}_vhdl is
# %s
# %s
# begin
# %s
# %s
# end Behavioral;" $content $components $signals $ports2Signals $body]
# 
#   append content $modules
# 
#   if {$debounce} {
# 	  append content $debounce_code
#   }
# 
#   return $content
# }
# set name [current_bd_design -quiet]
# if {$name == ""} {
#     common::send_msg_id -continue "bd2vhdl design-2" "ERROR" "Je potreba otevrit block design!"
# 	return
# }
# save_bd_design $name
Wrote  : <X:/SAP/lab5/lab5.srcs/sources_1/bd/counter_full/counter_full.bd> 
Wrote  : <X:/SAP/lab5/lab5.srcs/sources_1/bd/counter_full/ui/bd_7d1008b2.ui> 
# validate_bd_design -force
ERROR: [BD 41-758] The following clock pins are not connected to a valid clock source: 
/counter_vhdl_0/clk

ERROR: [Common 17-39] 'validate_bd_design' failed due to earlier errors.

    while executing
"validate_bd_design -force"
    (file "X:/SAP/lib_SAP_2022_02_02/gen_bd_vhdl.tcl" line 1021)
INFO: [IP_Flow 19-234] Refreshing IP repositories
INFO: [IP_Flow 19-1700] Loaded user IP repository 'x:/SAP/lib_SAP_2022_02_02'.
export_ip_user_files -of_objects  [get_files X:/SAP/lab5/lab5.srcs/sources_1/ip/decoder_decoder_7seg_0_0/decoder_decoder_7seg_0_0.xci] -no_script -reset -force -quiet
remove_files  X:/SAP/lab5/lab5.srcs/sources_1/ip/decoder_decoder_7seg_0_0/decoder_decoder_7seg_0_0.xci
INFO: [IP_Flow 19-234] Refreshing IP repositories
INFO: [IP_Flow 19-1700] Loaded user IP repository 'x:/SAP/lib_SAP_2022_02_02'.
import_files -norecurse X:/SAP/decoder_mix.vhd
update_compile_order -fileset sources_1
source X:/SAP/lib_SAP_2022_02_02/gen_bd_vhdl.tcl
# proc sortPorts { ports &bus &bit } {
# 
#   upvar ${&bus} busPorts
#   upvar ${&bit} bitPorts
#   array set busPorts [list]
#   set bitPorts [list]
# 
#   foreach port $ports {
#     set name [get_property -quiet NAME [get_bd_ports $port]]
# 	set busStart [get_property -quiet LEFT [get_bd_ports $port]]
#     set busStop  [get_property -quiet RIGHT  [get_bd_ports $port]]
#     if {$busStart != {}} {
#     #   set busWidth [get_property -quiet BUS_WIDTH [get_ports $port]]
#       array set busPorts [list $name [list $busStop $busStart]]
#     } else {
#       lappend bitPorts $name
#     }
#   }
#   return 0
# }
# proc sortPins { pins &bus &bit } {
# 
#   upvar ${&bus} busPins
#   upvar ${&bit} bitPins
#   array set busPins [list]
#   array set bitPins [list]
# 
#   foreach pin $pins {
#     set name [get_property -quiet NAME [get_bd_pins $pin]]
# 	set dir [get_property -quiet DIR [get_bd_pins $pin]]
# 	set busStart [get_property -quiet LEFT [get_bd_pins $pin]]
#     set busStop  [get_property -quiet RIGHT  [get_bd_pins $pin]]
# 	set net [get_bd_nets -quiet -of_objects [get_bd_pins $pin]]
# 	if {$net != ""} {
# 		set net_name [get_property -quiet NAME $net]
# 	} else {
# 		if {$dir == "I"} {
# 			if {$busStart != {}} {
# 				set net_name "(others => '0')"
# 				catch {common::send_msg_id "bd2vhdl    pin-2" "CRITICAL WARNING" "${pin}: nepripojen, bude pripojen k '0'"}
# 			} else {
# 				set net_name "'0'"
# 				catch {common::send_msg_id "bd2vhdl    pin-2" "CRITICAL WARNING" "${pin}: nepripojen, bude pripojen k '0'"}
# 			}
# 		} else {
# 			set net_name "open"
# 			catch {common::send_msg_id "bd2vhdl    pin-3" "CRITICAL WARNING" "${pin}: pin odstranen, vystup neni pripojen!"}
# 		}
# 	}
# 	if {$busStart != {}} {
# 		array set busPins [list $name [list $busStop $busStart $net_name]]
# 	} else {
# 		array set bitPins [list $name $net_name]
# 	}
#   }
#   return 0
# }
# proc sortNets { nets &bus &bit } {
# 
#   upvar ${&bus} busNets
#   upvar ${&bit} bitNets
#   array set busNets [list ]
#   set bitNets [list]
# 
#   foreach net $nets {
#     set name [get_property -quiet NAME [get_bd_nets $net]]
# 	set pin [lindex [get_bd_pins -of_objects [get_bd_nets $net]] 0]
# 	set busStart [get_property -quiet LEFT [get_bd_pins $pin]]
#     set busStop  [get_property -quiet RIGHT  [get_bd_pins $pin]]
#     if {$busStart != {}} {
#     #   set busWidth [get_property -quiet BUS_WIDTH [get_ports $port]]
#       array set busNets [list $name [list $busStop $busStart]]
#     } else {
#       lappend bitNets $name
#     }
#   }
#   return 0
# }
# proc array2sortedList { &ar } {
# 
#   upvar ${&ar} ar
#   set sortedList [list]
#   foreach key [lsort -dictionary [array names ar]] {
#     lappend sortedList $key
#     lappend sortedList $ar($key)
#   }
#   return $sortedList
# }
# proc getInPinNet { cell pin default_value} {
# 	set pin [get_bd_pins -quiet $pin]
# 	set net [get_bd_nets -quiet -of_objects $pin]
# 	if {$net == ""} {
# 		catch {common::send_msg_id "bd2vhdl    pin-2" "CRITICAL WARNING" "${pin} nepripojen, bude pripojeno k $default_value"}
# 		set net_name $default_value
# 	} else {
# 		set net_name [get_property NAME $net]
# 	}
# 	return $net_name
# }
# proc getGate { cell  function} {
# 	set inputs_count [get_property CONFIG.Inputs [get_bd_cells -quiet $cell]]
# 	set content {}
# 	set prom {}
# 	set name [get_property NAME $cell]
# 	append content [format "\n\t-- %s\n" $name]
# 	for {set i 0} { $i < $inputs_count } { incr i } {
# 		set cfg [format "CONFIG.I%u_Inverted" $i]
# 		set pin [format "%s/I%u" $cell $i]
# 		set inverted [get_property $cfg  [get_bd_cells -quiet $cell]]
# 		#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 		set net_name [getInPinNet $cell $pin "\'0\'"]
# 		#set net_name [get_property NAME $net]
# 		if {$inverted == "true"} {
# 			append prom [format "not(%s)" $net_name]
# 		} else {
# 			append prom [format "%s" $net_name]
# 		}
# 		if {$i < ($inputs_count-1)} {
# 			append prom [format " %s " $function]
# 		}
# 	}
# 	set cfg [format "CONFIG.O_Inverted" $i]
# 	set pin [format "%s/O" $cell]
# 	set inverted [get_property $cfg  [get_bd_cells -quiet $cell]]
# 	set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 	if {$net != ""} {
# 		set out_name [get_property NAME $net]
# 		if {$inverted == "true"} {
# 			append content [format "\t%s <= not(%s);\n" $out_name $prom];	
# 		} else {
# 			append content [format "\t%s <= %s;\n" $out_name $prom];
# 		}
# 		return $content
# 	} else {
# 		catch {common::send_msg_id "bd2vhdl  jadro-3" "CRITICAL WARNING" "${cell}: odstraneno, vystup neni pripojen!"}
# 		return [append content "\t-- odstraneno, vystup neni pripojen\n"]
# 	}
# }
# proc getBuf { cell  function } {
# 	set content {}
# 	set name [get_property NAME $cell]
# 	append content [format "\n\t-- %s\n" $name]
# 
# 	set pin [format "%s/I" $cell]
# 	#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 	#set net_name [get_property NAME $net]
# 	set net_name [getInPinNet $cell $pin "\'0\'"]
# 
# 	set pin [format "%s/O" $cell]
# 	set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 	if {$net != ""} {
# 		set out_name [get_property NAME $net]
# 		if {$function == true} {
# 			append content [format "\t%s <= not(%s);\n" $out_name $net_name];	
# 		} else {
# 			append content  [format "\t%s <= %s;\n" $out_name $net_name];
# 		}
# 		return $content
# 	} else {
# 		catch {common::send_msg_id "bd2vhdl  jadro-3" "CRITICAL WARNING" "${cell}: odstraneno, vystup neni pripojen!"}
# 		return [append content "\t-- odstraneno, vystup neni pripojen\n"]
# 	}
# }
# proc getSource { cell  function } {
# 	set content {}
# 	set name [get_property NAME $cell]
# 	append content [format "\n\t-- %s\n" $name]
# 
# 	set pin [format "%s/O" $cell]
# 	set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 	if {$net != ""} {
# 		set out_name [get_property NAME $net]
# 		if {$function == true} {
# 			append content [format "\t%s <= '1';\n" $out_name];	
# 		} else {
# 			append content [format "\t%s <= '0';\n" $out_name];
# 		}
# 		return $content
# 	} else {
# 		catch {common::send_msg_id "bd2vhdl  jadro-3" "CRITICAL WARNING" "${cell}: odstraneno, vystup neni pripojen!"}
# 		return [append content "\t-- odstraneno, vystup neni pripojen\n"]
# 	}
# }
# proc getSplitter { cell } {
# 	set width [get_property CONFIG.WIDTH [get_bd_cells -quiet $cell]]
# 	set pin [format "%s/I" $cell]
# 	set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 	if {$net != ""} {
# 		set in_name [get_property NAME $net]
# 		set content {}
# 		set name [get_property NAME $cell]
# 		append content [format "\n\t-- %s\n" $name]
# 		for {set i 0} { $i < $width } { incr i } {
# 			set pin [format "%s/O%u" $cell $i]
# 			set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 			if {$net != ""} {
# 				set net_name [get_property NAME $net]
# 				append content [format "\t%s <= %s(%u);\n" $net_name $in_name $i]
# 			} else {
# 				catch {common::send_msg_id "bd2vhdl  jadro-3" "CRITICAL WARNING" "${cell}: ${pin} odstranen, vystup neni pripojen!"}
# 			}
# 		}
# 	} else {
# 		set content {}
# 		set name [get_property NAME $cell]
# 		append content [format "\n\t-- %s\n" $name]
# 		for {set i 0} { $i < $width } { incr i } {
# 			set pin [format "%s/O%u" $cell $i]
# 			set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 			if {$net != ""} {
# 				set net_name [get_property NAME $net]
# 				append content [format "\t%s <= \'0\';\n" $net_name $i]
# 				catch {common::send_msg_id "bd2vhdl  jadro-2" "CRITICAL WARNING" "${cell} nepripojen vstup, ${net_name} bude pripojeno k \'0\'"}
# 			} else {
# 				catch {common::send_msg_id "bd2vhdl  jadro-3" "CRITICAL WARNING" "${cell}: ${pin} odstranen, vystup neni pripojen!"}
# 			}
# 		}
# 	}
# 	return $content
# }
# proc getDff { cell } {
# 	set ce [get_property CONFIG.CE [get_bd_cells -quiet $cell]]
# 	set reset [get_property CONFIG.Reset [get_bd_cells -quiet $cell]]
# 
# 	set content {}
# 	set name [get_property NAME $cell]
# 	append content [format "\n\t-- %s\n" $name]
# 
# 	set pin [format "%s/q" $cell]
# 	set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 	if {$net != ""} {
# 		set out_name [get_property NAME $net]
# 
# 		set pin [format "%s/clk" $cell]
# 		set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 		if {$net == ""} {
# 			catch {common::send_msg_id "bd2vhdl  jadro-3" "CRITICAL WARNING" "${cell}: odstraneno, nejsou pripojene hodiny!"}
# 			return [append content "\t-- odstraneno, , nejsou pripojene hodiny!\n"]
# 		}
# 		#set clk_name [get_property NAME $net]
# 		set clk_name [getInPinNet $cell $pin "\'0\'"]
# 
# 		set pin [format "%s/d" $cell]
# 		#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 		#set in_name [get_property NAME $net]
# 		set in_name [getInPinNet $cell $pin "\'0\'"]
# 
# 		if {$ce == "true"} {
# 			set pin [format "%s/ce" $cell]
# 			#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 			#set ce_name [get_property NAME $net]
# 			set ce_name [getInPinNet $cell $pin "\'1\'"]
# 		}
# 
# 		if {$reset == "true"} {
# 			set pin [format "%s/reset" $cell]
# 			#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 			#set reset_name [get_property NAME $net]
# 			set reset_name [getInPinNet $cell $pin "\'0\'"]
# 		}
# 
# 		append content [format "\tprocess (%s)\n\tbegin\n" $clk_name]
# 		append content [format "\t\tif rising_edge(%s) then\n" $clk_name]
# 		if {$reset == "true"} {
# 			append content [format "\t\t\tif %s = '1' then\n\t\t\t\t%s <= '0';\n\t\t\tels" $reset_name $out_name]
# 		} else {
# 			append content "\t\t\t"
# 		}
# 
# 		if {$ce == "true"} {
# 			append content [format "if %s = '1' then\n" $ce_name]
# 			append content [format "\t\t\t\t%s <= %s;\n" $out_name $in_name]
# 			append content "\t\t\tend if;\n"
# 		} else {
# 			if {$reset == "true"} {
# 				append content [format "e\n\t\t\t\t%s <= %s;\n" $out_name $in_name]
# 				append content "\t\t\tend if;\n"
# 			} else {
# 				append content [format "%s <= %s;\n" $out_name $in_name]
# 			}
# 		}
# 
# 		append content "\t\tend if;\n\tend process;\n";
# 	} else {
# 		catch {common::send_msg_id "bd2vhdl jadro-3" "CRITICAL WARNING" "${cell}: odstraneno, vystup neni pripojen!"}
# 		return [append content "\t-- odstraneno, vystup neni pripojen\n"]
# 	}
# 	return $content
# }
# proc getMux { cell } {
# 	set ports_count [get_property CONFIG.Data_Ports [get_bd_cells -quiet $cell]]
# 	set width [get_property CONFIG.WIDTH [get_bd_cells -quiet $cell]]
# 	set i0_bus [get_property CONFIG.I0_BUS [get_bd_cells -quiet $cell]]
# 	set i1_bus [get_property CONFIG.I1_BUS [get_bd_cells -quiet $cell]]
# 	set i2_bus [get_property CONFIG.I2_BUS [get_bd_cells -quiet $cell]]
# 	set i3_bus [get_property CONFIG.I3_BUS [get_bd_cells -quiet $cell]]
# 	set o_bus [get_property CONFIG.O_BUS [get_bd_cells -quiet $cell]]
# 
# 	set content {}
# 	set name [get_property NAME $cell]
# 	append content [format "\n\t-- %s\n" $name]
# 
# 	for {set i 0} { $i < $width } { incr i } {
# 		if {$o_bus == "true"} {
# 			set pin [format "%s/O" $cell]
# 			set vecO [format "(%u)" $i]
# 		} else {
# 			set pin [format "%s/O_%u" $cell $i]
# 			set vecO ""
# 		}
# 		set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 		if {$net != ""} {
# 			set out_name [get_property NAME $net]
# 
# 			if {$i0_bus == "true"} {
# 				set pin [format "%s/I0" $cell]
# 				set vec0 [format "(%u)" $i]
# 			} else {
# 				set pin [format "%s/I0_%u" $cell $i]
# 				set vec0 ""
# 			}
# 			#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 			#set i0_name [get_property NAME $net]
# 			set i0_name [getInPinNet $cell $pin "\'0\'"]
# 			if {$i0_name == "'0'"} {
# 				set vec0 ""
# 			}
# 
# 			if {$i1_bus == "true"} {
# 				set pin [format "%s/I1" $cell]
# 				set vec1 [format "(%u)" $i]
# 			} else {
# 				set pin [format "%s/I1_%u" $cell $i]
# 				set vec1 ""
# 			}
# 			#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 			#set i1_name [get_property NAME $net]
# 			set i1_name [getInPinNet $cell $pin "\'0\'"]
# 			if {$i1_name == "'0'"} {
# 				set vec1 ""
# 			}
# 
# 			set pin [format "%s/Sel0" $cell]
# 			#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 			#set sel0_name [get_property NAME $net]
# 			set sel0_name [getInPinNet $cell $pin "\'0\'"]
# 
# 			if {$ports_count > 2} {
# 				if {$i2_bus == "true"} {
# 					set pin [format "%s/I2" $cell]
# 					set vec2 [format "(%u)" $i]
# 				} else {
# 					set pin [format "%s/I2_%u" $cell $i]
# 					set vec2 ""
# 				}
# 				#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 				#set i2_name [get_property NAME $net]
# 				set i2_name [getInPinNet $cell $pin "\'0\'"]
# 				if {$i2_name == "'0'"} {
# 					set vec2 ""
# 				}
# 
# 				if {$i3_bus == "true"} {
# 					set pin [format "%s/I3" $cell]
# 					set vec3 [format "(%u)" $i]
# 				} else {
# 					set pin [format "%s/I3_%u" $cell $i]
# 					set vec3 ""
# 				}
# 				#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 				#set i3_name [get_property NAME $net]
# 				set i3_name [getInPinNet $cell $pin "\'0\'"]
# 				if {$i3_name == "'0'"} {
# 					set vec3 ""
# 				}
# 
# 				set pin [format "%s/Sel1" $cell]
# 				#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 				#set sel1_name [get_property NAME $net]
# 				set sel1_name [getInPinNet $cell $pin "\'0\'"]
# 				
# 				if {$sel0_name != "'0'" && $sel1_name != "'0'"} {
# 					append content [format "\t%s%s <= %s%s when %s = '0' and %s = '0' else\n" $out_name $vecO $i0_name $vec0 $sel1_name $sel0_name]
# 					append content [format "\t\t%s%s when %s = '0' and %s = '1' else\n" $i1_name $vec1 $sel1_name $sel0_name]
# 					append content [format "\t\t%s%s when %s = '1' and %s = '0' else\n" $i2_name $vec2 $sel1_name $sel0_name]
# 					append content [format "\t\t%s%s when %s = '1' and %s = '1' else '0';\n\n" $i3_name $vec3 $sel1_name $sel0_name]
# 				} else {
# 					append content [format "\t%s%s <= %s%s;\n" $out_name $vecO $i0_name $vec0]
# 				}
# 			} else {
# 				if {$sel0_name != "'0'"} {
# 					append content [format "\t%s%s <= %s%s when (%s = '1') else %s%s;\n" $out_name $vecO $i1_name $vec1 $sel0_name $i0_name $vec0]
# 				} else {
# 					append content [format "\t%s%s <= %s%s;\n" $out_name $vecO $i0_name $vec0]
# 				}
# 			}
# 		} else {
# 			catch {common::send_msg_id "bd2vhdl  jadro-3" "CRITICAL WARNING" " ${cell}: pin ${pin} odstranen, vystup neni pripojen!"}
# 			return [append content "\t-- ${pin} odstranen, vystup neni pripojen\n"]
# 		}
# 		
# 	}
# 	return $content
# }
# proc getDebounce { cell } {
# 	set width [get_property CONFIG.width [get_bd_cells -quiet $cell]]
# 
# 	set content {}
# 	set name [get_property NAME $cell]
# 	append content [format "\n\t-- %s\n" $name]
# 
# 	set pin [format "%s/tl_out" $cell]
# 	set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 	if {$net != ""} {
# 		set tl_out [get_property NAME $net]
# 
# 		set pin [format "%s/clk" $cell]
# 		set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 		if {$net != ""} {
# 			set clk [get_property NAME $net]
# 
# 			set pin [format "%s/tl_in" $cell]
# 			#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 			#set tl_in [get_property NAME $net]
# 			set tl_in [getInPinNet $cell $pin "\'0\'"]
# 
# 			append content [ format "\t%s : debounce\n\t\tgeneric map (\n\t\t\twidth => %s\n\t\t)\n\t\tport map (\n\t\t\tclk	=> %s,\n\t\t\ttl_in	=> %s,\n\t\t\ttl_out	=> %s\n\t\t);\n" $name $width $clk $tl_in $tl_out]
# 		} else {
# 			catch {common::send_msg_id "bd2vhdl  jadro-3" "CRITICAL WARNING" "${cell}: odstraneno, nejsou pripojene hodiny!"}
# 			return [append content "\t-- odstraneno, , nejsou pripojene hodiny!\n"]	
# 		}
# 	} else {
# 		catch {common::send_msg_id "bd2vhdl  jadro-3" "CRITICAL WARNING" "${cell}: odstraneno, vystup neni pripojen!"}
# 		return [append content "\t-- odstraneno, vystup neni pripojen\n"]
# 	}
# 	
# 	return $content
# }
# set debounce_component "\tcomponent debounce
# \t\tgeneric (
# \t\t\twidth: integer := 22
# \t\t);
# \t\tport (
# \t\t\tclk    : in  std_logic;
# \t\t\ttl_in  : in  std_logic;
# \t\t\ttl_out : out std_logic
# \t\t);
# \tend component;\n"
# proc getModule_ref { cell components component_name} {
# 	upvar $components comps
# 
# 	set inPins [lsort [get_bd_pins -quiet -of_objects [get_bd_cells $cell] -filter DIR==I]]
# 	array set inputBusPins [list]
# 	array set inputBitPins [list]
# 	sortPins $inPins inputBusPins inputBitPins
# 
# 	set outPins [lsort [get_bd_pins -quiet -of_objects [get_bd_cells $cell] -filter DIR==O]]
# 	array set outputBusPins [list]
# 	array set outputBitPins [list]
# 	sortPins $outPins outputBusPins outputBitPins
# 
# 	set content {}
# 	set name [get_property NAME $cell]
# 	append content [format "\n\t-- %s\n" $name]
# 
# 	set lines [list]
# 	foreach {pin net} [array2sortedList inputBitPins] {
#     	lappend lines [list "$pin" "in  std_logic;" "$net"]
#   	}
# 	foreach {pin busInfo} [array2sortedList inputBusPins] {
# 		lassign $busInfo stop start net
# 		if {$start>$stop} {
# 			lappend lines [list "$pin" "in  std_logic_vector($start downto $stop);" "$net"]
# 		} else {
# 			lappend lines [list "$pin" "in  std_logic_vector($start to $stop);" "$net"]
# 		}
#   	}
# 	foreach {pin net} [array2sortedList outputBitPins] {
#     	lappend lines [list "$pin" "out std_logic;" "$net"]
# 	}
# 	foreach {pin busInfo} [array2sortedList outputBusPins] {
# 		lassign $busInfo stop start net
# 		if {$start>$stop} {
# 			lappend lines [list "$pin"  "out std_logic_vector($start downto $stop);" "$net"]
# 		} else {
# 			lappend lines [list "$pin" "out std_logic_vector($start to $stop);" "$net"]
# 		}
# 	}
# 	# Detect maximum column width to align columns
# 	foreach line $lines {
# 		set width [string length [lindex $line 0]]
# 		if {![info exist maxWidth] || $maxWidth < $width} {
# 			set maxWidth $width
# 		}
# 	}
# 	set ports {}
# 	set port_map {}
# 	foreach line $lines {
# 		append ports [format "\n\t\t\t%-${maxWidth}s :  %-${maxWidth}s" [lindex $line 0] [lindex $line 1]]
# 		append port_map [format "\n\t\t\t%-${maxWidth}s =>  %-${maxWidth}s," [lindex $line 0] [lindex $line 2]]
# 	}
# 	# Remove the last semi-colon
#   	set index [string last {;} $ports]
#   	set ports [string replace $ports $index $index {}]
# 	# Remove the last ,
#   	set index [string last {,} $port_map]
#   	set port_map [string replace $port_map $index $index {}]
# 
# 	# nepridavat pokud uz tam ta komponenta je
# 	if {[string first $component_name $comps] < 0} {
# 		append comps "\tcomponent ${component_name}\n\t\tport ("
# 		append comps $ports
# 		append comps "\n\t\t);\n\tend component;\n\n"
# 	}
# 	append content "\tinst_${name} : ${component_name}\n"
# 	append content "\t\tport map ("
# 	append content $port_map
# 	append content "\n\t\t);\n"
# }
# proc getHier { cell debounce components modules} {
# 	global debounce_component
# 	upvar $components comps
# 	upvar $modules mods
# 	upvar $debounce debs
# 
# 	set inPins [lsort [get_bd_pins -quiet -of_objects [get_bd_cells $cell] -filter DIR==I]]
# 	array set inputBusPins [list]
# 	array set inputBitPins [list]
# 	sortPins $inPins inputBusPins inputBitPins
# 
# 	set outPins [lsort [get_bd_pins -quiet -of_objects [get_bd_cells $cell] -filter DIR==O]]
# 	array set outputBusPins [list]
# 	array set outputBitPins [list]
# 	sortPins $outPins outputBusPins outputBitPins
# 
# 	set content {}
# 	set name [get_property NAME $cell]
# 	append content [format "\n\t-- %s\n" $name]
# 
# 	set lines [list]
# 	foreach {pin net} [array2sortedList inputBitPins] {
#     	lappend lines [list "$pin" "in  std_logic;" "$net"]
#   	}
# 	foreach {pin busInfo} [array2sortedList inputBusPins] {
# 		lassign $busInfo stop start net
# 		if {$start>$stop} {
# 			lappend lines [list "$pin" "in  std_logic_vector($start downto $stop);" "$net"]
# 		} else {
# 			lappend lines [list "$pin" "in  std_logic_vector($start to $stop);" "$net"]
# 		}
#   	}
# 	foreach {pin net} [array2sortedList outputBitPins] {
#     	lappend lines [list "$pin" "out std_logic;" "$net"]
# 	}
# 	foreach {pin busInfo} [array2sortedList outputBusPins] {
# 		lassign $busInfo stop start net
# 		if {$start>$stop} {
# 			lappend lines [list "$pin"  "out std_logic_vector($start downto $stop);" "$net"]
# 		} else {
# 			lappend lines [list "$pin" "out std_logic_vector($start to $stop);" "$net"]
# 		}
# 	}
# 	# Detect maximum column width to align columns
# 	foreach line $lines {
# 		set width [string length [lindex $line 0]]
# 		if {![info exist maxWidth] || $maxWidth < $width} {
# 			set maxWidth $width
# 		}
# 	}
# 	set ports {}
# 	set port_map {}
# 	foreach line $lines {
# 		append ports [format "\n\t\t\t%-${maxWidth}s :  %-${maxWidth}s" [lindex $line 0] [lindex $line 1]]
# 		append port_map [format "\n\t\t\t%-${maxWidth}s =>  %-${maxWidth}s," [lindex $line 0] [lindex $line 2]]
# 	}
# 	# Remove the last semi-colon
#   	set index [string last {;} $ports]
#   	set ports [string replace $ports $index $index {}]
# 	# Remove the last ,
#   	set index [string last {,} $port_map]
#   	set port_map [string replace $port_map $index $index {}]
# 
# 	set filtr [format {PATH !~ "%s/.*/.*"} $cell]
# 	set nets [lsort [get_bd_nets -quiet -of_objects [get_bd_cells $cell] -regexp -filter $filtr]]
# 	array set busNets [list ]
# 	set bitNets [list]
# 	sortNets $nets busNets bitNets
# 
# 	set lines [list]
# 	# Process single bit nets
# 	foreach net [lsort -dictionary $bitNets] {
# 		lappend lines [list "$net" "  std_logic;"]
# 	}
# 	# Process bus nets
# 	foreach {net busInfo} [array2sortedList busNets] {
# 		lassign $busInfo stop start
# 		if {$start>$stop} {
# 		lappend lines [list "$net" "  std_logic_vector($start downto $stop);"]
# 		} else {
# 		lappend lines [list "$net" "  std_logic_vector($start to $stop);"]
# 		}
# 	}
# 
# 	# Detect maximum column width to align columns
# 	foreach line $lines {
# 		set width [string length [lindex $line 0]]
# 		if {![info exist maxWidth] || $maxWidth < $width} {
# 			set maxWidth $width
# 		}
# 	}
# 
# 	# Build the content of the stub:
# 	set signals {}
# 	foreach line $lines {
# 		append signals [format "\n\tsignal %-${maxWidth}s :  %-${maxWidth}s" [lindex $line 0] [lindex $line 1]]
# 	}
#   set ports2Signals {}
#     foreach net [lsort -dictionary $nets] {
#         set net_name [get_property NAME [get_bd_nets -quiet $net]]
#         set ports_b [get_bd_ports -quiet -of_objects [get_bd_nets -quiet $net]]
#         if {$ports == {}} {
#             break
#         }
#         foreach port [lsort -dictionary $ports_b] {
#             set port_name [get_property NAME [get_bd_pins -quiet $port]]
#             set dir [get_property DIR [get_bd_pins -quiet $port]]
#             if {$dir == "I"} {
#                 append ports2Signals "\t$net_name <= $port_name;\n"    
#             } else {
#                 append ports2Signals "\t$port_name <= $net_name;\n"
#             }
#         }
#     }
#   
# 	set debounce_inner false
#   	set components_inner {}
#   	set modules_inner {}
#   	set body [getIPs $cell debounce_inner components_inner modules_inner]
# 	if {$debounce_inner} {
# 		puts "######################################################################x"
# 		append components_inner $debounce_component
# 		set debs true
#     }
# 	
# 	set comp_name [string replace $cell 0 0 {}]
#     set comp_name [string map {/ _} $comp_name]
#     append comps "\tcomponent ${comp_name}\n\t\tport ("
#     append mods "\n\nlibrary IEEE;\nuse IEEE.std_logic_1164.all;\n\n"
#     append mods "entity ${comp_name} is\n\tport("
#     append mods $ports
#     append comps $ports
#     append mods "\n\t\t);\nend entity ${comp_name};\n\narchitecture Behavioral of ${comp_name} is\n"
#     append mods $components_inner
#     append mods $signals
#     append mods "\nbegin\n"
#     append mods $ports2Signals
#     append mods $body
#     append mods "\nend Behavioral;"
#     append comps "\n\t\t);\n\tend component;\n\n"
#     append content "\tinst_${comp_name} : ${comp_name}\n"
#     append content "\t\tport map ("
#     append content $port_map
#     append content "\n\t\t);\n"
#     append mods $modules_inner
# 
# 	return $content
# }
# proc getIPs { parent debounce components modules} {
#   upvar $debounce deb
#   upvar $components comps
#   upvar $modules mods
#   if {$parent == ""} {
# 	set cells [get_bd_cells]	  
#   } else {
# 	set filtr [format {PATH !~ "%s/.*/.*"} $parent]
# 	set cells [get_bd_cells -of_objects [get_bd_cells $parent] -regexp -filter $filtr]
#   }
#   
#   set content {}
#   foreach cell [lsort -dictionary $cells] {
# 	set type [get_property TYPE [get_bd_cells -quiet $cell]]
# 	set name [get_property NAME [get_bd_cells -quiet $cell]]
# 	set vlnv [get_property VLNV [get_bd_cells -quiet $cell]]
# 	if {$type == "ip"} {
# 		set vlnvs [split $vlnv ":"]
# 		if {[lindex $vlnvs 0] == "FIT"} {
# 		 	switch [lindex $vlnvs 2] {
# 				"or" {
# 					append content [getGate $cell "or"]
# 				}
# 				"and" {
# 					append content [getGate $cell "and"]
# 				}
# 				"xor" {
# 					append content [getGate $cell "xor"]
# 				}
# 				"buf" {
# 					append content [getBuf $cell false]
# 				}
# 				"inv" {
# 					append content [getBuf $cell true]
# 				}
# 				"gnd" {
# 					append content [getSource $cell false]
# 				}
# 				"vcc" {
# 					append content [getSource $cell true]
# 				}
# 				"splitter" {
# 					append content [getSplitter $cell]
# 				}
# 				"mux" {
# 					append content [getMux $cell]
# 				}
# 				"dff" {
# 					append content [getDff $cell]
# 				}
# 				"debounce" {
# 					append content [getDebounce $cell]
# 					set deb true
# 				}
# 			}
# 		} elseif {[lindex $vlnvs 0] == "xilinx.com" && [lindex $vlnvs 1] == "module_ref"} {
# 			append content [getModule_ref $cell comps [lindex $vlnvs 2]]
# 		}
# 			
# 	} elseif {$type == "hier"} {
# 		append content [getHier $cell deb comps mods]
# 	}
#   }
#   return $content
# }
# set debounce_code "\n\n\nlibrary IEEE;
# use IEEE.STD_LOGIC_1164.ALL;
# use ieee.std_logic_unsigned.all;
# 
# entity debounce is
#     generic (
# 		width: integer := 22 -- 100 MHz clock -> 4 - simulation (90 ns); 22 - synthesis (ca. 20 ms)
# 	);
#     port (
# 		clk : in STD_LOGIC;
#         tl_in : in STD_LOGIC;
#         tl_out : out STD_LOGIC
# 	);
# end entity debounce;
# 
# architecture Behavioral of debounce is
# 
# signal cnt       : std_logic_vector(width-1 downto 0) := (others => '0');
# signal reset, ce : std_logic := '0';
# signal tl_prev   : std_logic := '0';
# 
# 
# begin
# 
#     counter: process(clk) begin
#         if rising_edge(clk) then 
#             if (reset = '1') then
#                 cnt <= (others => '0');
#             elsif (ce = '1') then
#                 cnt <= cnt + 1;
#             end if;
#         end if;
#     end process;
# 
#     process(clk) begin
#         if rising_edge(clk) then
#             if (tl_prev /= tl_in) then
#                 reset <= '1';
#             else 
#                 reset <= '0';
#             end if;
#         end if;
#     end process;
#                 
#     process(clk) begin
#         if rising_edge(clk) then
#             if (reset = '1') then
#                 tl_prev <= tl_in;
#             end if;
#         end if;
#     end process;
#                 
#     process(clk) begin
#         if rising_edge(clk) then
#             if ((cnt(width-1) = '1') and (cnt(0) = '0')) then
#                 tl_out <= tl_prev;
#             end if;
#         end if;
#     end process;
#                 
# 
#     ce <= '0' when ((cnt(width-1) = '1') and (cnt(0) = '1'))
#                 else '1';
# 
# end Behavioral;\n"
# proc vhdlTemplate { module } {
#   global debounce_code
#   global debounce_component
# 
#   set inPorts [lsort [get_bd_ports -quiet -filter DIR==I]]
#   array set inputBusPorts [list ]
#   set inputBitPorts [list]
#   sortPorts $inPorts inputBusPorts inputBitPorts
# 
#   set outPorts [lsort [get_bd_ports -quiet -filter DIR==O]]
#   array set outputBusPorts [list ]
#   set outputBitPorts [list]
#   sortPorts $outPorts outputBusPorts outputBitPorts
# 
#   set inoutPorts [lsort [get_bd_ports -quiet -filter DIR==IO]]
#   array set inoutBusPorts [list ]
#   set inoutBitPorts [list]
#   sortPorts $inoutPorts inoutBusPorts inoutBitPorts
# 
#   set lines [list]
#   # Process input single bit ports
# #   lappend lines "-- Input Ports - Single Bit"
#   foreach port [lsort -dictionary $inputBitPorts] {
#     lappend lines [list "$port" "in  std_logic;"]
#   }
#   # Process input bus ports
# #   lappend lines "-- Input Ports - Busses"
#   foreach {port busInfo} [array2sortedList inputBusPorts] {
#     lassign $busInfo stop start
#     if {$start>$stop} {
#       lappend lines [list "$port" "in  std_logic_vector($start downto $stop);"]
#     } else {
#       lappend lines [list "$port" "in  std_logic_vector($start to $stop);"]
#     }
#   }
#   # Process output single bit ports
# #   lappend lines "-- Output Ports - Single Bit"
#   foreach port [lsort -dictionary $outputBitPorts] {
#     lappend lines [list "$port" "out std_logic;"]
#   }
#   # Process output bus ports
# #   lappend lines "-- Output Ports - Busses"
#   foreach {port busInfo} [array2sortedList outputBusPorts] {
#     lassign $busInfo stop start
#     if {$start>$stop} {
#       lappend lines [list "$port"  "out std_logic_vector($start downto $stop);"]
#     } else {
#       lappend lines [list "$port" "out std_logic_vector($start to $stop);"]
#     }
#   }
#   # Process inout single bit ports
# #   lappend lines "-- InOut Ports - Single Bit"
#   foreach port [lsort -dictionary $inoutBitPorts] {
#     lappend lines [list "$port" "inout  std_logic;"]
#   }
#   # Process inout bus ports
# #   lappend lines "-- InOut Ports - Busses"
#   foreach {port busInfo} [array2sortedList inoutBusPorts] {
#     lassign $busInfo stop start
#     if {$start>$stop} {
#       lappend lines [list "$port" "inout  std_logic_vector($start downto $stop);"]
#     } else {
#       lappend lines [list "$port" "inout  std_logic_vector($start to $stop);"]
#     }
#   }
# 
#   # Detect maximum column width to align columns
#   foreach line $lines {
#     if {[regexp {^\s*\-\-} $line]} {
#       # Skip lines that are just comments
#       continue
#     }
#     set width [string length [lindex $line 0]]
#     if {![info exist maxWidth] || $maxWidth < $width} {
#       set maxWidth $width
#     }
#   }
# 
#   # Build the content of the stub:
#   set content {}
#   foreach line $lines {
#     if {[regexp {^\s*\-\-} $line]} {
#       # Lines that are just comments
#       append content "\n      $line"
#       continue
#     }
#     append content [format "\n      %-${maxWidth}s :  %-${maxWidth}s" [lindex $line 0] [lindex $line 1]]
#   }
# 
#   # Remove the last semi-colon
#   set index [string last {;} $content]
#   set content [string replace $content $index $index {}]
# 
# 
#   set nets [lsort [get_bd_nets -quiet]]
#   array set busNets [list ]
#   set bitNets [list]
#   sortNets $nets busNets bitNets
# 
#   set lines [list]
#   # Process single bit nets
#   foreach net [lsort -dictionary $bitNets] {
#     lappend lines [list "$net" "  std_logic;"]
#   }
#   # Process bus nets
#   foreach {net busInfo} [array2sortedList busNets] {
#     lassign $busInfo stop start
#     if {$start>$stop} {
#       lappend lines [list "$net" "  std_logic_vector($start downto $stop);"]
#     } else {
#       lappend lines [list "$net" "  std_logic_vector($start to $stop);"]
#     }
#   }
# 
#   # Detect maximum column width to align columns
#   foreach line $lines {
#     if {[regexp {^\s*\-\-} $line]} {
#       # Skip lines that are just comments
#       continue
#     }
#     set width [string length [lindex $line 0]]
#     if {![info exist maxWidth] || $maxWidth < $width} {
#       set maxWidth $width
#     }
#   }
# 
#   # Build the content of the stub:
#   set signals {}
#   foreach line $lines {
#     if {[regexp {^\s*\-\-} $line]} {
#       # Lines that are just comments
#       append signals "\n      $line"
#       continue
#     }
#     append signals [format "\n      signal %-${maxWidth}s :  %-${maxWidth}s" [lindex $line 0] [lindex $line 1]]
#   }
#   set ports2Signals {}
#   foreach port [lsort -dictionary $inPorts] {
# 	set port_name [get_property NAME [get_bd_ports -quiet $port]]
# 	set net [get_bd_nets -quiet -of_objects [get_bd_ports -quiet $port]]
# 	if {$net != ""} {
# 		set net_name [get_property NAME $net]
# 		append ports2Signals "\t$net_name <= $port_name;\n"
# 	} else {
# 		catch {common::send_msg_id "bd2vhdl   port-2" "CRITICAL WARNING" "${port_name}: port nepripojen!"}
# 	}
#   }
#   foreach port [lsort -dictionary $outPorts] {
# 	set port_name [get_property NAME [get_bd_ports -quiet $port]]
# 	set net [get_bd_nets -quiet -of_objects [get_bd_ports -quiet $port]]
# 	if {$net != ""} {
# 		set net_name [get_property NAME $net]
# 		append ports2Signals "\t$port_name <= $net_name;\n"
# 	} else {
# 		catch {common::send_msg_id "bd2vhdl   port-3" "CRITICAL WARNING" "${port_name}: port nepripojen!"}
# 	}
#   }
#   set debounce false
#   set components {}
#   set modules {}
#   set body [getIPs "" debounce components modules]
#   
#   if {$debounce} {
# 	  append components $debounce_component
#   }
#   # Now that the last semi-colon is replaced, add the header and footer
#   set content [format "library IEEE;
# use IEEE.std_logic_1164.all;
# 
# library xil_defaultlib;
# use xil_defaultlib.all;
# 
# entity ${module}_vhdl is
#    port (%s
#    );
# end entity ${module}_vhdl;
# 
# architecture Behavioral of ${module}_vhdl is
# %s
# %s
# begin
# %s
# %s
# end Behavioral;" $content $components $signals $ports2Signals $body]
# 
#   append content $modules
# 
#   if {$debounce} {
# 	  append content $debounce_code
#   }
# 
#   return $content
# }
# set name [current_bd_design -quiet]
# if {$name == ""} {
#     common::send_msg_id -continue "bd2vhdl design-2" "ERROR" "Je potreba otevrit block design!"
# 	return
# }
# save_bd_design $name
# validate_bd_design -force
ERROR: [BD 41-758] The following clock pins are not connected to a valid clock source: 
/counter_vhdl_0/clk

ERROR: [Common 17-39] 'validate_bd_design' failed due to earlier errors.

    while executing
"validate_bd_design -force"
    (file "X:/SAP/lib_SAP_2022_02_02/gen_bd_vhdl.tcl" line 1021)
current_bd_design [get_bd_designs counter]
save_bd_design
Wrote  : <X:/SAP/lab5/lab5.srcs/sources_1/bd/counter/counter.bd> 
source X:/SAP/lib_SAP_2022_02_02/gen_bd_vhdl.tcl
# proc sortPorts { ports &bus &bit } {
# 
#   upvar ${&bus} busPorts
#   upvar ${&bit} bitPorts
#   array set busPorts [list]
#   set bitPorts [list]
# 
#   foreach port $ports {
#     set name [get_property -quiet NAME [get_bd_ports $port]]
# 	set busStart [get_property -quiet LEFT [get_bd_ports $port]]
#     set busStop  [get_property -quiet RIGHT  [get_bd_ports $port]]
#     if {$busStart != {}} {
#     #   set busWidth [get_property -quiet BUS_WIDTH [get_ports $port]]
#       array set busPorts [list $name [list $busStop $busStart]]
#     } else {
#       lappend bitPorts $name
#     }
#   }
#   return 0
# }
# proc sortPins { pins &bus &bit } {
# 
#   upvar ${&bus} busPins
#   upvar ${&bit} bitPins
#   array set busPins [list]
#   array set bitPins [list]
# 
#   foreach pin $pins {
#     set name [get_property -quiet NAME [get_bd_pins $pin]]
# 	set dir [get_property -quiet DIR [get_bd_pins $pin]]
# 	set busStart [get_property -quiet LEFT [get_bd_pins $pin]]
#     set busStop  [get_property -quiet RIGHT  [get_bd_pins $pin]]
# 	set net [get_bd_nets -quiet -of_objects [get_bd_pins $pin]]
# 	if {$net != ""} {
# 		set net_name [get_property -quiet NAME $net]
# 	} else {
# 		if {$dir == "I"} {
# 			if {$busStart != {}} {
# 				set net_name "(others => '0')"
# 				catch {common::send_msg_id "bd2vhdl    pin-2" "CRITICAL WARNING" "${pin}: nepripojen, bude pripojen k '0'"}
# 			} else {
# 				set net_name "'0'"
# 				catch {common::send_msg_id "bd2vhdl    pin-2" "CRITICAL WARNING" "${pin}: nepripojen, bude pripojen k '0'"}
# 			}
# 		} else {
# 			set net_name "open"
# 			catch {common::send_msg_id "bd2vhdl    pin-3" "CRITICAL WARNING" "${pin}: pin odstranen, vystup neni pripojen!"}
# 		}
# 	}
# 	if {$busStart != {}} {
# 		array set busPins [list $name [list $busStop $busStart $net_name]]
# 	} else {
# 		array set bitPins [list $name $net_name]
# 	}
#   }
#   return 0
# }
# proc sortNets { nets &bus &bit } {
# 
#   upvar ${&bus} busNets
#   upvar ${&bit} bitNets
#   array set busNets [list ]
#   set bitNets [list]
# 
#   foreach net $nets {
#     set name [get_property -quiet NAME [get_bd_nets $net]]
# 	set pin [lindex [get_bd_pins -of_objects [get_bd_nets $net]] 0]
# 	set busStart [get_property -quiet LEFT [get_bd_pins $pin]]
#     set busStop  [get_property -quiet RIGHT  [get_bd_pins $pin]]
#     if {$busStart != {}} {
#     #   set busWidth [get_property -quiet BUS_WIDTH [get_ports $port]]
#       array set busNets [list $name [list $busStop $busStart]]
#     } else {
#       lappend bitNets $name
#     }
#   }
#   return 0
# }
# proc array2sortedList { &ar } {
# 
#   upvar ${&ar} ar
#   set sortedList [list]
#   foreach key [lsort -dictionary [array names ar]] {
#     lappend sortedList $key
#     lappend sortedList $ar($key)
#   }
#   return $sortedList
# }
# proc getInPinNet { cell pin default_value} {
# 	set pin [get_bd_pins -quiet $pin]
# 	set net [get_bd_nets -quiet -of_objects $pin]
# 	if {$net == ""} {
# 		catch {common::send_msg_id "bd2vhdl    pin-2" "CRITICAL WARNING" "${pin} nepripojen, bude pripojeno k $default_value"}
# 		set net_name $default_value
# 	} else {
# 		set net_name [get_property NAME $net]
# 	}
# 	return $net_name
# }
# proc getGate { cell  function} {
# 	set inputs_count [get_property CONFIG.Inputs [get_bd_cells -quiet $cell]]
# 	set content {}
# 	set prom {}
# 	set name [get_property NAME $cell]
# 	append content [format "\n\t-- %s\n" $name]
# 	for {set i 0} { $i < $inputs_count } { incr i } {
# 		set cfg [format "CONFIG.I%u_Inverted" $i]
# 		set pin [format "%s/I%u" $cell $i]
# 		set inverted [get_property $cfg  [get_bd_cells -quiet $cell]]
# 		#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 		set net_name [getInPinNet $cell $pin "\'0\'"]
# 		#set net_name [get_property NAME $net]
# 		if {$inverted == "true"} {
# 			append prom [format "not(%s)" $net_name]
# 		} else {
# 			append prom [format "%s" $net_name]
# 		}
# 		if {$i < ($inputs_count-1)} {
# 			append prom [format " %s " $function]
# 		}
# 	}
# 	set cfg [format "CONFIG.O_Inverted" $i]
# 	set pin [format "%s/O" $cell]
# 	set inverted [get_property $cfg  [get_bd_cells -quiet $cell]]
# 	set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 	if {$net != ""} {
# 		set out_name [get_property NAME $net]
# 		if {$inverted == "true"} {
# 			append content [format "\t%s <= not(%s);\n" $out_name $prom];	
# 		} else {
# 			append content [format "\t%s <= %s;\n" $out_name $prom];
# 		}
# 		return $content
# 	} else {
# 		catch {common::send_msg_id "bd2vhdl  jadro-3" "CRITICAL WARNING" "${cell}: odstraneno, vystup neni pripojen!"}
# 		return [append content "\t-- odstraneno, vystup neni pripojen\n"]
# 	}
# }
# proc getBuf { cell  function } {
# 	set content {}
# 	set name [get_property NAME $cell]
# 	append content [format "\n\t-- %s\n" $name]
# 
# 	set pin [format "%s/I" $cell]
# 	#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 	#set net_name [get_property NAME $net]
# 	set net_name [getInPinNet $cell $pin "\'0\'"]
# 
# 	set pin [format "%s/O" $cell]
# 	set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 	if {$net != ""} {
# 		set out_name [get_property NAME $net]
# 		if {$function == true} {
# 			append content [format "\t%s <= not(%s);\n" $out_name $net_name];	
# 		} else {
# 			append content  [format "\t%s <= %s;\n" $out_name $net_name];
# 		}
# 		return $content
# 	} else {
# 		catch {common::send_msg_id "bd2vhdl  jadro-3" "CRITICAL WARNING" "${cell}: odstraneno, vystup neni pripojen!"}
# 		return [append content "\t-- odstraneno, vystup neni pripojen\n"]
# 	}
# }
# proc getSource { cell  function } {
# 	set content {}
# 	set name [get_property NAME $cell]
# 	append content [format "\n\t-- %s\n" $name]
# 
# 	set pin [format "%s/O" $cell]
# 	set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 	if {$net != ""} {
# 		set out_name [get_property NAME $net]
# 		if {$function == true} {
# 			append content [format "\t%s <= '1';\n" $out_name];	
# 		} else {
# 			append content [format "\t%s <= '0';\n" $out_name];
# 		}
# 		return $content
# 	} else {
# 		catch {common::send_msg_id "bd2vhdl  jadro-3" "CRITICAL WARNING" "${cell}: odstraneno, vystup neni pripojen!"}
# 		return [append content "\t-- odstraneno, vystup neni pripojen\n"]
# 	}
# }
# proc getSplitter { cell } {
# 	set width [get_property CONFIG.WIDTH [get_bd_cells -quiet $cell]]
# 	set pin [format "%s/I" $cell]
# 	set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 	if {$net != ""} {
# 		set in_name [get_property NAME $net]
# 		set content {}
# 		set name [get_property NAME $cell]
# 		append content [format "\n\t-- %s\n" $name]
# 		for {set i 0} { $i < $width } { incr i } {
# 			set pin [format "%s/O%u" $cell $i]
# 			set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 			if {$net != ""} {
# 				set net_name [get_property NAME $net]
# 				append content [format "\t%s <= %s(%u);\n" $net_name $in_name $i]
# 			} else {
# 				catch {common::send_msg_id "bd2vhdl  jadro-3" "CRITICAL WARNING" "${cell}: ${pin} odstranen, vystup neni pripojen!"}
# 			}
# 		}
# 	} else {
# 		set content {}
# 		set name [get_property NAME $cell]
# 		append content [format "\n\t-- %s\n" $name]
# 		for {set i 0} { $i < $width } { incr i } {
# 			set pin [format "%s/O%u" $cell $i]
# 			set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 			if {$net != ""} {
# 				set net_name [get_property NAME $net]
# 				append content [format "\t%s <= \'0\';\n" $net_name $i]
# 				catch {common::send_msg_id "bd2vhdl  jadro-2" "CRITICAL WARNING" "${cell} nepripojen vstup, ${net_name} bude pripojeno k \'0\'"}
# 			} else {
# 				catch {common::send_msg_id "bd2vhdl  jadro-3" "CRITICAL WARNING" "${cell}: ${pin} odstranen, vystup neni pripojen!"}
# 			}
# 		}
# 	}
# 	return $content
# }
# proc getDff { cell } {
# 	set ce [get_property CONFIG.CE [get_bd_cells -quiet $cell]]
# 	set reset [get_property CONFIG.Reset [get_bd_cells -quiet $cell]]
# 
# 	set content {}
# 	set name [get_property NAME $cell]
# 	append content [format "\n\t-- %s\n" $name]
# 
# 	set pin [format "%s/q" $cell]
# 	set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 	if {$net != ""} {
# 		set out_name [get_property NAME $net]
# 
# 		set pin [format "%s/clk" $cell]
# 		set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 		if {$net == ""} {
# 			catch {common::send_msg_id "bd2vhdl  jadro-3" "CRITICAL WARNING" "${cell}: odstraneno, nejsou pripojene hodiny!"}
# 			return [append content "\t-- odstraneno, , nejsou pripojene hodiny!\n"]
# 		}
# 		#set clk_name [get_property NAME $net]
# 		set clk_name [getInPinNet $cell $pin "\'0\'"]
# 
# 		set pin [format "%s/d" $cell]
# 		#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 		#set in_name [get_property NAME $net]
# 		set in_name [getInPinNet $cell $pin "\'0\'"]
# 
# 		if {$ce == "true"} {
# 			set pin [format "%s/ce" $cell]
# 			#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 			#set ce_name [get_property NAME $net]
# 			set ce_name [getInPinNet $cell $pin "\'1\'"]
# 		}
# 
# 		if {$reset == "true"} {
# 			set pin [format "%s/reset" $cell]
# 			#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 			#set reset_name [get_property NAME $net]
# 			set reset_name [getInPinNet $cell $pin "\'0\'"]
# 		}
# 
# 		append content [format "\tprocess (%s)\n\tbegin\n" $clk_name]
# 		append content [format "\t\tif rising_edge(%s) then\n" $clk_name]
# 		if {$reset == "true"} {
# 			append content [format "\t\t\tif %s = '1' then\n\t\t\t\t%s <= '0';\n\t\t\tels" $reset_name $out_name]
# 		} else {
# 			append content "\t\t\t"
# 		}
# 
# 		if {$ce == "true"} {
# 			append content [format "if %s = '1' then\n" $ce_name]
# 			append content [format "\t\t\t\t%s <= %s;\n" $out_name $in_name]
# 			append content "\t\t\tend if;\n"
# 		} else {
# 			if {$reset == "true"} {
# 				append content [format "e\n\t\t\t\t%s <= %s;\n" $out_name $in_name]
# 				append content "\t\t\tend if;\n"
# 			} else {
# 				append content [format "%s <= %s;\n" $out_name $in_name]
# 			}
# 		}
# 
# 		append content "\t\tend if;\n\tend process;\n";
# 	} else {
# 		catch {common::send_msg_id "bd2vhdl jadro-3" "CRITICAL WARNING" "${cell}: odstraneno, vystup neni pripojen!"}
# 		return [append content "\t-- odstraneno, vystup neni pripojen\n"]
# 	}
# 	return $content
# }
# proc getMux { cell } {
# 	set ports_count [get_property CONFIG.Data_Ports [get_bd_cells -quiet $cell]]
# 	set width [get_property CONFIG.WIDTH [get_bd_cells -quiet $cell]]
# 	set i0_bus [get_property CONFIG.I0_BUS [get_bd_cells -quiet $cell]]
# 	set i1_bus [get_property CONFIG.I1_BUS [get_bd_cells -quiet $cell]]
# 	set i2_bus [get_property CONFIG.I2_BUS [get_bd_cells -quiet $cell]]
# 	set i3_bus [get_property CONFIG.I3_BUS [get_bd_cells -quiet $cell]]
# 	set o_bus [get_property CONFIG.O_BUS [get_bd_cells -quiet $cell]]
# 
# 	set content {}
# 	set name [get_property NAME $cell]
# 	append content [format "\n\t-- %s\n" $name]
# 
# 	for {set i 0} { $i < $width } { incr i } {
# 		if {$o_bus == "true"} {
# 			set pin [format "%s/O" $cell]
# 			set vecO [format "(%u)" $i]
# 		} else {
# 			set pin [format "%s/O_%u" $cell $i]
# 			set vecO ""
# 		}
# 		set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 		if {$net != ""} {
# 			set out_name [get_property NAME $net]
# 
# 			if {$i0_bus == "true"} {
# 				set pin [format "%s/I0" $cell]
# 				set vec0 [format "(%u)" $i]
# 			} else {
# 				set pin [format "%s/I0_%u" $cell $i]
# 				set vec0 ""
# 			}
# 			#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 			#set i0_name [get_property NAME $net]
# 			set i0_name [getInPinNet $cell $pin "\'0\'"]
# 			if {$i0_name == "'0'"} {
# 				set vec0 ""
# 			}
# 
# 			if {$i1_bus == "true"} {
# 				set pin [format "%s/I1" $cell]
# 				set vec1 [format "(%u)" $i]
# 			} else {
# 				set pin [format "%s/I1_%u" $cell $i]
# 				set vec1 ""
# 			}
# 			#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 			#set i1_name [get_property NAME $net]
# 			set i1_name [getInPinNet $cell $pin "\'0\'"]
# 			if {$i1_name == "'0'"} {
# 				set vec1 ""
# 			}
# 
# 			set pin [format "%s/Sel0" $cell]
# 			#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 			#set sel0_name [get_property NAME $net]
# 			set sel0_name [getInPinNet $cell $pin "\'0\'"]
# 
# 			if {$ports_count > 2} {
# 				if {$i2_bus == "true"} {
# 					set pin [format "%s/I2" $cell]
# 					set vec2 [format "(%u)" $i]
# 				} else {
# 					set pin [format "%s/I2_%u" $cell $i]
# 					set vec2 ""
# 				}
# 				#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 				#set i2_name [get_property NAME $net]
# 				set i2_name [getInPinNet $cell $pin "\'0\'"]
# 				if {$i2_name == "'0'"} {
# 					set vec2 ""
# 				}
# 
# 				if {$i3_bus == "true"} {
# 					set pin [format "%s/I3" $cell]
# 					set vec3 [format "(%u)" $i]
# 				} else {
# 					set pin [format "%s/I3_%u" $cell $i]
# 					set vec3 ""
# 				}
# 				#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 				#set i3_name [get_property NAME $net]
# 				set i3_name [getInPinNet $cell $pin "\'0\'"]
# 				if {$i3_name == "'0'"} {
# 					set vec3 ""
# 				}
# 
# 				set pin [format "%s/Sel1" $cell]
# 				#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 				#set sel1_name [get_property NAME $net]
# 				set sel1_name [getInPinNet $cell $pin "\'0\'"]
# 				
# 				if {$sel0_name != "'0'" && $sel1_name != "'0'"} {
# 					append content [format "\t%s%s <= %s%s when %s = '0' and %s = '0' else\n" $out_name $vecO $i0_name $vec0 $sel1_name $sel0_name]
# 					append content [format "\t\t%s%s when %s = '0' and %s = '1' else\n" $i1_name $vec1 $sel1_name $sel0_name]
# 					append content [format "\t\t%s%s when %s = '1' and %s = '0' else\n" $i2_name $vec2 $sel1_name $sel0_name]
# 					append content [format "\t\t%s%s when %s = '1' and %s = '1' else '0';\n\n" $i3_name $vec3 $sel1_name $sel0_name]
# 				} else {
# 					append content [format "\t%s%s <= %s%s;\n" $out_name $vecO $i0_name $vec0]
# 				}
# 			} else {
# 				if {$sel0_name != "'0'"} {
# 					append content [format "\t%s%s <= %s%s when (%s = '1') else %s%s;\n" $out_name $vecO $i1_name $vec1 $sel0_name $i0_name $vec0]
# 				} else {
# 					append content [format "\t%s%s <= %s%s;\n" $out_name $vecO $i0_name $vec0]
# 				}
# 			}
# 		} else {
# 			catch {common::send_msg_id "bd2vhdl  jadro-3" "CRITICAL WARNING" " ${cell}: pin ${pin} odstranen, vystup neni pripojen!"}
# 			return [append content "\t-- ${pin} odstranen, vystup neni pripojen\n"]
# 		}
# 		
# 	}
# 	return $content
# }
# proc getDebounce { cell } {
# 	set width [get_property CONFIG.width [get_bd_cells -quiet $cell]]
# 
# 	set content {}
# 	set name [get_property NAME $cell]
# 	append content [format "\n\t-- %s\n" $name]
# 
# 	set pin [format "%s/tl_out" $cell]
# 	set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 	if {$net != ""} {
# 		set tl_out [get_property NAME $net]
# 
# 		set pin [format "%s/clk" $cell]
# 		set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 		if {$net != ""} {
# 			set clk [get_property NAME $net]
# 
# 			set pin [format "%s/tl_in" $cell]
# 			#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 			#set tl_in [get_property NAME $net]
# 			set tl_in [getInPinNet $cell $pin "\'0\'"]
# 
# 			append content [ format "\t%s : debounce\n\t\tgeneric map (\n\t\t\twidth => %s\n\t\t)\n\t\tport map (\n\t\t\tclk	=> %s,\n\t\t\ttl_in	=> %s,\n\t\t\ttl_out	=> %s\n\t\t);\n" $name $width $clk $tl_in $tl_out]
# 		} else {
# 			catch {common::send_msg_id "bd2vhdl  jadro-3" "CRITICAL WARNING" "${cell}: odstraneno, nejsou pripojene hodiny!"}
# 			return [append content "\t-- odstraneno, , nejsou pripojene hodiny!\n"]	
# 		}
# 	} else {
# 		catch {common::send_msg_id "bd2vhdl  jadro-3" "CRITICAL WARNING" "${cell}: odstraneno, vystup neni pripojen!"}
# 		return [append content "\t-- odstraneno, vystup neni pripojen\n"]
# 	}
# 	
# 	return $content
# }
# set debounce_component "\tcomponent debounce
# \t\tgeneric (
# \t\t\twidth: integer := 22
# \t\t);
# \t\tport (
# \t\t\tclk    : in  std_logic;
# \t\t\ttl_in  : in  std_logic;
# \t\t\ttl_out : out std_logic
# \t\t);
# \tend component;\n"
# proc getModule_ref { cell components component_name} {
# 	upvar $components comps
# 
# 	set inPins [lsort [get_bd_pins -quiet -of_objects [get_bd_cells $cell] -filter DIR==I]]
# 	array set inputBusPins [list]
# 	array set inputBitPins [list]
# 	sortPins $inPins inputBusPins inputBitPins
# 
# 	set outPins [lsort [get_bd_pins -quiet -of_objects [get_bd_cells $cell] -filter DIR==O]]
# 	array set outputBusPins [list]
# 	array set outputBitPins [list]
# 	sortPins $outPins outputBusPins outputBitPins
# 
# 	set content {}
# 	set name [get_property NAME $cell]
# 	append content [format "\n\t-- %s\n" $name]
# 
# 	set lines [list]
# 	foreach {pin net} [array2sortedList inputBitPins] {
#     	lappend lines [list "$pin" "in  std_logic;" "$net"]
#   	}
# 	foreach {pin busInfo} [array2sortedList inputBusPins] {
# 		lassign $busInfo stop start net
# 		if {$start>$stop} {
# 			lappend lines [list "$pin" "in  std_logic_vector($start downto $stop);" "$net"]
# 		} else {
# 			lappend lines [list "$pin" "in  std_logic_vector($start to $stop);" "$net"]
# 		}
#   	}
# 	foreach {pin net} [array2sortedList outputBitPins] {
#     	lappend lines [list "$pin" "out std_logic;" "$net"]
# 	}
# 	foreach {pin busInfo} [array2sortedList outputBusPins] {
# 		lassign $busInfo stop start net
# 		if {$start>$stop} {
# 			lappend lines [list "$pin"  "out std_logic_vector($start downto $stop);" "$net"]
# 		} else {
# 			lappend lines [list "$pin" "out std_logic_vector($start to $stop);" "$net"]
# 		}
# 	}
# 	# Detect maximum column width to align columns
# 	foreach line $lines {
# 		set width [string length [lindex $line 0]]
# 		if {![info exist maxWidth] || $maxWidth < $width} {
# 			set maxWidth $width
# 		}
# 	}
# 	set ports {}
# 	set port_map {}
# 	foreach line $lines {
# 		append ports [format "\n\t\t\t%-${maxWidth}s :  %-${maxWidth}s" [lindex $line 0] [lindex $line 1]]
# 		append port_map [format "\n\t\t\t%-${maxWidth}s =>  %-${maxWidth}s," [lindex $line 0] [lindex $line 2]]
# 	}
# 	# Remove the last semi-colon
#   	set index [string last {;} $ports]
#   	set ports [string replace $ports $index $index {}]
# 	# Remove the last ,
#   	set index [string last {,} $port_map]
#   	set port_map [string replace $port_map $index $index {}]
# 
# 	# nepridavat pokud uz tam ta komponenta je
# 	if {[string first $component_name $comps] < 0} {
# 		append comps "\tcomponent ${component_name}\n\t\tport ("
# 		append comps $ports
# 		append comps "\n\t\t);\n\tend component;\n\n"
# 	}
# 	append content "\tinst_${name} : ${component_name}\n"
# 	append content "\t\tport map ("
# 	append content $port_map
# 	append content "\n\t\t);\n"
# }
# proc getHier { cell debounce components modules} {
# 	global debounce_component
# 	upvar $components comps
# 	upvar $modules mods
# 	upvar $debounce debs
# 
# 	set inPins [lsort [get_bd_pins -quiet -of_objects [get_bd_cells $cell] -filter DIR==I]]
# 	array set inputBusPins [list]
# 	array set inputBitPins [list]
# 	sortPins $inPins inputBusPins inputBitPins
# 
# 	set outPins [lsort [get_bd_pins -quiet -of_objects [get_bd_cells $cell] -filter DIR==O]]
# 	array set outputBusPins [list]
# 	array set outputBitPins [list]
# 	sortPins $outPins outputBusPins outputBitPins
# 
# 	set content {}
# 	set name [get_property NAME $cell]
# 	append content [format "\n\t-- %s\n" $name]
# 
# 	set lines [list]
# 	foreach {pin net} [array2sortedList inputBitPins] {
#     	lappend lines [list "$pin" "in  std_logic;" "$net"]
#   	}
# 	foreach {pin busInfo} [array2sortedList inputBusPins] {
# 		lassign $busInfo stop start net
# 		if {$start>$stop} {
# 			lappend lines [list "$pin" "in  std_logic_vector($start downto $stop);" "$net"]
# 		} else {
# 			lappend lines [list "$pin" "in  std_logic_vector($start to $stop);" "$net"]
# 		}
#   	}
# 	foreach {pin net} [array2sortedList outputBitPins] {
#     	lappend lines [list "$pin" "out std_logic;" "$net"]
# 	}
# 	foreach {pin busInfo} [array2sortedList outputBusPins] {
# 		lassign $busInfo stop start net
# 		if {$start>$stop} {
# 			lappend lines [list "$pin"  "out std_logic_vector($start downto $stop);" "$net"]
# 		} else {
# 			lappend lines [list "$pin" "out std_logic_vector($start to $stop);" "$net"]
# 		}
# 	}
# 	# Detect maximum column width to align columns
# 	foreach line $lines {
# 		set width [string length [lindex $line 0]]
# 		if {![info exist maxWidth] || $maxWidth < $width} {
# 			set maxWidth $width
# 		}
# 	}
# 	set ports {}
# 	set port_map {}
# 	foreach line $lines {
# 		append ports [format "\n\t\t\t%-${maxWidth}s :  %-${maxWidth}s" [lindex $line 0] [lindex $line 1]]
# 		append port_map [format "\n\t\t\t%-${maxWidth}s =>  %-${maxWidth}s," [lindex $line 0] [lindex $line 2]]
# 	}
# 	# Remove the last semi-colon
#   	set index [string last {;} $ports]
#   	set ports [string replace $ports $index $index {}]
# 	# Remove the last ,
#   	set index [string last {,} $port_map]
#   	set port_map [string replace $port_map $index $index {}]
# 
# 	set filtr [format {PATH !~ "%s/.*/.*"} $cell]
# 	set nets [lsort [get_bd_nets -quiet -of_objects [get_bd_cells $cell] -regexp -filter $filtr]]
# 	array set busNets [list ]
# 	set bitNets [list]
# 	sortNets $nets busNets bitNets
# 
# 	set lines [list]
# 	# Process single bit nets
# 	foreach net [lsort -dictionary $bitNets] {
# 		lappend lines [list "$net" "  std_logic;"]
# 	}
# 	# Process bus nets
# 	foreach {net busInfo} [array2sortedList busNets] {
# 		lassign $busInfo stop start
# 		if {$start>$stop} {
# 		lappend lines [list "$net" "  std_logic_vector($start downto $stop);"]
# 		} else {
# 		lappend lines [list "$net" "  std_logic_vector($start to $stop);"]
# 		}
# 	}
# 
# 	# Detect maximum column width to align columns
# 	foreach line $lines {
# 		set width [string length [lindex $line 0]]
# 		if {![info exist maxWidth] || $maxWidth < $width} {
# 			set maxWidth $width
# 		}
# 	}
# 
# 	# Build the content of the stub:
# 	set signals {}
# 	foreach line $lines {
# 		append signals [format "\n\tsignal %-${maxWidth}s :  %-${maxWidth}s" [lindex $line 0] [lindex $line 1]]
# 	}
#   set ports2Signals {}
#     foreach net [lsort -dictionary $nets] {
#         set net_name [get_property NAME [get_bd_nets -quiet $net]]
#         set ports_b [get_bd_ports -quiet -of_objects [get_bd_nets -quiet $net]]
#         if {$ports == {}} {
#             break
#         }
#         foreach port [lsort -dictionary $ports_b] {
#             set port_name [get_property NAME [get_bd_pins -quiet $port]]
#             set dir [get_property DIR [get_bd_pins -quiet $port]]
#             if {$dir == "I"} {
#                 append ports2Signals "\t$net_name <= $port_name;\n"    
#             } else {
#                 append ports2Signals "\t$port_name <= $net_name;\n"
#             }
#         }
#     }
#   
# 	set debounce_inner false
#   	set components_inner {}
#   	set modules_inner {}
#   	set body [getIPs $cell debounce_inner components_inner modules_inner]
# 	if {$debounce_inner} {
# 		puts "######################################################################x"
# 		append components_inner $debounce_component
# 		set debs true
#     }
# 	
# 	set comp_name [string replace $cell 0 0 {}]
#     set comp_name [string map {/ _} $comp_name]
#     append comps "\tcomponent ${comp_name}\n\t\tport ("
#     append mods "\n\nlibrary IEEE;\nuse IEEE.std_logic_1164.all;\n\n"
#     append mods "entity ${comp_name} is\n\tport("
#     append mods $ports
#     append comps $ports
#     append mods "\n\t\t);\nend entity ${comp_name};\n\narchitecture Behavioral of ${comp_name} is\n"
#     append mods $components_inner
#     append mods $signals
#     append mods "\nbegin\n"
#     append mods $ports2Signals
#     append mods $body
#     append mods "\nend Behavioral;"
#     append comps "\n\t\t);\n\tend component;\n\n"
#     append content "\tinst_${comp_name} : ${comp_name}\n"
#     append content "\t\tport map ("
#     append content $port_map
#     append content "\n\t\t);\n"
#     append mods $modules_inner
# 
# 	return $content
# }
# proc getIPs { parent debounce components modules} {
#   upvar $debounce deb
#   upvar $components comps
#   upvar $modules mods
#   if {$parent == ""} {
# 	set cells [get_bd_cells]	  
#   } else {
# 	set filtr [format {PATH !~ "%s/.*/.*"} $parent]
# 	set cells [get_bd_cells -of_objects [get_bd_cells $parent] -regexp -filter $filtr]
#   }
#   
#   set content {}
#   foreach cell [lsort -dictionary $cells] {
# 	set type [get_property TYPE [get_bd_cells -quiet $cell]]
# 	set name [get_property NAME [get_bd_cells -quiet $cell]]
# 	set vlnv [get_property VLNV [get_bd_cells -quiet $cell]]
# 	if {$type == "ip"} {
# 		set vlnvs [split $vlnv ":"]
# 		if {[lindex $vlnvs 0] == "FIT"} {
# 		 	switch [lindex $vlnvs 2] {
# 				"or" {
# 					append content [getGate $cell "or"]
# 				}
# 				"and" {
# 					append content [getGate $cell "and"]
# 				}
# 				"xor" {
# 					append content [getGate $cell "xor"]
# 				}
# 				"buf" {
# 					append content [getBuf $cell false]
# 				}
# 				"inv" {
# 					append content [getBuf $cell true]
# 				}
# 				"gnd" {
# 					append content [getSource $cell false]
# 				}
# 				"vcc" {
# 					append content [getSource $cell true]
# 				}
# 				"splitter" {
# 					append content [getSplitter $cell]
# 				}
# 				"mux" {
# 					append content [getMux $cell]
# 				}
# 				"dff" {
# 					append content [getDff $cell]
# 				}
# 				"debounce" {
# 					append content [getDebounce $cell]
# 					set deb true
# 				}
# 			}
# 		} elseif {[lindex $vlnvs 0] == "xilinx.com" && [lindex $vlnvs 1] == "module_ref"} {
# 			append content [getModule_ref $cell comps [lindex $vlnvs 2]]
# 		}
# 			
# 	} elseif {$type == "hier"} {
# 		append content [getHier $cell deb comps mods]
# 	}
#   }
#   return $content
# }
# set debounce_code "\n\n\nlibrary IEEE;
# use IEEE.STD_LOGIC_1164.ALL;
# use ieee.std_logic_unsigned.all;
# 
# entity debounce is
#     generic (
# 		width: integer := 22 -- 100 MHz clock -> 4 - simulation (90 ns); 22 - synthesis (ca. 20 ms)
# 	);
#     port (
# 		clk : in STD_LOGIC;
#         tl_in : in STD_LOGIC;
#         tl_out : out STD_LOGIC
# 	);
# end entity debounce;
# 
# architecture Behavioral of debounce is
# 
# signal cnt       : std_logic_vector(width-1 downto 0) := (others => '0');
# signal reset, ce : std_logic := '0';
# signal tl_prev   : std_logic := '0';
# 
# 
# begin
# 
#     counter: process(clk) begin
#         if rising_edge(clk) then 
#             if (reset = '1') then
#                 cnt <= (others => '0');
#             elsif (ce = '1') then
#                 cnt <= cnt + 1;
#             end if;
#         end if;
#     end process;
# 
#     process(clk) begin
#         if rising_edge(clk) then
#             if (tl_prev /= tl_in) then
#                 reset <= '1';
#             else 
#                 reset <= '0';
#             end if;
#         end if;
#     end process;
#                 
#     process(clk) begin
#         if rising_edge(clk) then
#             if (reset = '1') then
#                 tl_prev <= tl_in;
#             end if;
#         end if;
#     end process;
#                 
#     process(clk) begin
#         if rising_edge(clk) then
#             if ((cnt(width-1) = '1') and (cnt(0) = '0')) then
#                 tl_out <= tl_prev;
#             end if;
#         end if;
#     end process;
#                 
# 
#     ce <= '0' when ((cnt(width-1) = '1') and (cnt(0) = '1'))
#                 else '1';
# 
# end Behavioral;\n"
# proc vhdlTemplate { module } {
#   global debounce_code
#   global debounce_component
# 
#   set inPorts [lsort [get_bd_ports -quiet -filter DIR==I]]
#   array set inputBusPorts [list ]
#   set inputBitPorts [list]
#   sortPorts $inPorts inputBusPorts inputBitPorts
# 
#   set outPorts [lsort [get_bd_ports -quiet -filter DIR==O]]
#   array set outputBusPorts [list ]
#   set outputBitPorts [list]
#   sortPorts $outPorts outputBusPorts outputBitPorts
# 
#   set inoutPorts [lsort [get_bd_ports -quiet -filter DIR==IO]]
#   array set inoutBusPorts [list ]
#   set inoutBitPorts [list]
#   sortPorts $inoutPorts inoutBusPorts inoutBitPorts
# 
#   set lines [list]
#   # Process input single bit ports
# #   lappend lines "-- Input Ports - Single Bit"
#   foreach port [lsort -dictionary $inputBitPorts] {
#     lappend lines [list "$port" "in  std_logic;"]
#   }
#   # Process input bus ports
# #   lappend lines "-- Input Ports - Busses"
#   foreach {port busInfo} [array2sortedList inputBusPorts] {
#     lassign $busInfo stop start
#     if {$start>$stop} {
#       lappend lines [list "$port" "in  std_logic_vector($start downto $stop);"]
#     } else {
#       lappend lines [list "$port" "in  std_logic_vector($start to $stop);"]
#     }
#   }
#   # Process output single bit ports
# #   lappend lines "-- Output Ports - Single Bit"
#   foreach port [lsort -dictionary $outputBitPorts] {
#     lappend lines [list "$port" "out std_logic;"]
#   }
#   # Process output bus ports
# #   lappend lines "-- Output Ports - Busses"
#   foreach {port busInfo} [array2sortedList outputBusPorts] {
#     lassign $busInfo stop start
#     if {$start>$stop} {
#       lappend lines [list "$port"  "out std_logic_vector($start downto $stop);"]
#     } else {
#       lappend lines [list "$port" "out std_logic_vector($start to $stop);"]
#     }
#   }
#   # Process inout single bit ports
# #   lappend lines "-- InOut Ports - Single Bit"
#   foreach port [lsort -dictionary $inoutBitPorts] {
#     lappend lines [list "$port" "inout  std_logic;"]
#   }
#   # Process inout bus ports
# #   lappend lines "-- InOut Ports - Busses"
#   foreach {port busInfo} [array2sortedList inoutBusPorts] {
#     lassign $busInfo stop start
#     if {$start>$stop} {
#       lappend lines [list "$port" "inout  std_logic_vector($start downto $stop);"]
#     } else {
#       lappend lines [list "$port" "inout  std_logic_vector($start to $stop);"]
#     }
#   }
# 
#   # Detect maximum column width to align columns
#   foreach line $lines {
#     if {[regexp {^\s*\-\-} $line]} {
#       # Skip lines that are just comments
#       continue
#     }
#     set width [string length [lindex $line 0]]
#     if {![info exist maxWidth] || $maxWidth < $width} {
#       set maxWidth $width
#     }
#   }
# 
#   # Build the content of the stub:
#   set content {}
#   foreach line $lines {
#     if {[regexp {^\s*\-\-} $line]} {
#       # Lines that are just comments
#       append content "\n      $line"
#       continue
#     }
#     append content [format "\n      %-${maxWidth}s :  %-${maxWidth}s" [lindex $line 0] [lindex $line 1]]
#   }
# 
#   # Remove the last semi-colon
#   set index [string last {;} $content]
#   set content [string replace $content $index $index {}]
# 
# 
#   set nets [lsort [get_bd_nets -quiet]]
#   array set busNets [list ]
#   set bitNets [list]
#   sortNets $nets busNets bitNets
# 
#   set lines [list]
#   # Process single bit nets
#   foreach net [lsort -dictionary $bitNets] {
#     lappend lines [list "$net" "  std_logic;"]
#   }
#   # Process bus nets
#   foreach {net busInfo} [array2sortedList busNets] {
#     lassign $busInfo stop start
#     if {$start>$stop} {
#       lappend lines [list "$net" "  std_logic_vector($start downto $stop);"]
#     } else {
#       lappend lines [list "$net" "  std_logic_vector($start to $stop);"]
#     }
#   }
# 
#   # Detect maximum column width to align columns
#   foreach line $lines {
#     if {[regexp {^\s*\-\-} $line]} {
#       # Skip lines that are just comments
#       continue
#     }
#     set width [string length [lindex $line 0]]
#     if {![info exist maxWidth] || $maxWidth < $width} {
#       set maxWidth $width
#     }
#   }
# 
#   # Build the content of the stub:
#   set signals {}
#   foreach line $lines {
#     if {[regexp {^\s*\-\-} $line]} {
#       # Lines that are just comments
#       append signals "\n      $line"
#       continue
#     }
#     append signals [format "\n      signal %-${maxWidth}s :  %-${maxWidth}s" [lindex $line 0] [lindex $line 1]]
#   }
#   set ports2Signals {}
#   foreach port [lsort -dictionary $inPorts] {
# 	set port_name [get_property NAME [get_bd_ports -quiet $port]]
# 	set net [get_bd_nets -quiet -of_objects [get_bd_ports -quiet $port]]
# 	if {$net != ""} {
# 		set net_name [get_property NAME $net]
# 		append ports2Signals "\t$net_name <= $port_name;\n"
# 	} else {
# 		catch {common::send_msg_id "bd2vhdl   port-2" "CRITICAL WARNING" "${port_name}: port nepripojen!"}
# 	}
#   }
#   foreach port [lsort -dictionary $outPorts] {
# 	set port_name [get_property NAME [get_bd_ports -quiet $port]]
# 	set net [get_bd_nets -quiet -of_objects [get_bd_ports -quiet $port]]
# 	if {$net != ""} {
# 		set net_name [get_property NAME $net]
# 		append ports2Signals "\t$port_name <= $net_name;\n"
# 	} else {
# 		catch {common::send_msg_id "bd2vhdl   port-3" "CRITICAL WARNING" "${port_name}: port nepripojen!"}
# 	}
#   }
#   set debounce false
#   set components {}
#   set modules {}
#   set body [getIPs "" debounce components modules]
#   
#   if {$debounce} {
# 	  append components $debounce_component
#   }
#   # Now that the last semi-colon is replaced, add the header and footer
#   set content [format "library IEEE;
# use IEEE.std_logic_1164.all;
# 
# library xil_defaultlib;
# use xil_defaultlib.all;
# 
# entity ${module}_vhdl is
#    port (%s
#    );
# end entity ${module}_vhdl;
# 
# architecture Behavioral of ${module}_vhdl is
# %s
# %s
# begin
# %s
# %s
# end Behavioral;" $content $components $signals $ports2Signals $body]
# 
#   append content $modules
# 
#   if {$debounce} {
# 	  append content $debounce_code
#   }
# 
#   return $content
# }
# set name [current_bd_design -quiet]
# if {$name == ""} {
#     common::send_msg_id -continue "bd2vhdl design-2" "ERROR" "Je potreba otevrit block design!"
# 	return
# }
# save_bd_design $name
# validate_bd_design -force
# if { [llength [get_bd_ports]] > 0 } {
# 	puts "\n##### ${name} #####"
# 	set content [vhdlTemplate $name]
# 	set PROJ_DIR [get_property DIRECTORY [current_project]]
# 	set PROJ_DIR [file normalize $PROJ_DIR]
# 	set tmp_dir [file join $PROJ_DIR "tmp"]
# 	file mkdir $tmp_dir
# 	set filename "${name}.vhd"
# 	set filename_path [file join $tmp_dir $filename]
# 	# Save the template
# 	set mode {w}
# 	puts "\nCreating VHDL for Design $name in [file normalize $filename]\n"
# 	set tfh [open $filename_path $mode]
# 	puts $tfh $content
# 	close $tfh
# 
# 	import_files -force -norecurse $filename_path
# 	common::send_msg_id "bd2vhdl design-1" "INFO" "${name}_vhdl.vhd vygenerovan"
# } else {
# 	common::send_msg_id -continue "bd2vhdl design-3" "ERROR" "${name} neobsahuje zadne porty!"
# }

##### counter #####

Creating VHDL for Design counter in X:/SAP/lab5/counter.vhd

INFO: [bd2vhdl design-1] counter_vhdl.vhd vygenerovan
update_compile_order -fileset sources_1
close_bd_design [get_bd_designs counter]
delete_bd_objs [get_bd_cells counter_vhdl_0]
source X:/SAP/lib_SAP_2022_02_02/gen_bd_vhdl.tcl
# proc sortPorts { ports &bus &bit } {
# 
#   upvar ${&bus} busPorts
#   upvar ${&bit} bitPorts
#   array set busPorts [list]
#   set bitPorts [list]
# 
#   foreach port $ports {
#     set name [get_property -quiet NAME [get_bd_ports $port]]
# 	set busStart [get_property -quiet LEFT [get_bd_ports $port]]
#     set busStop  [get_property -quiet RIGHT  [get_bd_ports $port]]
#     if {$busStart != {}} {
#     #   set busWidth [get_property -quiet BUS_WIDTH [get_ports $port]]
#       array set busPorts [list $name [list $busStop $busStart]]
#     } else {
#       lappend bitPorts $name
#     }
#   }
#   return 0
# }
# proc sortPins { pins &bus &bit } {
# 
#   upvar ${&bus} busPins
#   upvar ${&bit} bitPins
#   array set busPins [list]
#   array set bitPins [list]
# 
#   foreach pin $pins {
#     set name [get_property -quiet NAME [get_bd_pins $pin]]
# 	set dir [get_property -quiet DIR [get_bd_pins $pin]]
# 	set busStart [get_property -quiet LEFT [get_bd_pins $pin]]
#     set busStop  [get_property -quiet RIGHT  [get_bd_pins $pin]]
# 	set net [get_bd_nets -quiet -of_objects [get_bd_pins $pin]]
# 	if {$net != ""} {
# 		set net_name [get_property -quiet NAME $net]
# 	} else {
# 		if {$dir == "I"} {
# 			if {$busStart != {}} {
# 				set net_name "(others => '0')"
# 				catch {common::send_msg_id "bd2vhdl    pin-2" "CRITICAL WARNING" "${pin}: nepripojen, bude pripojen k '0'"}
# 			} else {
# 				set net_name "'0'"
# 				catch {common::send_msg_id "bd2vhdl    pin-2" "CRITICAL WARNING" "${pin}: nepripojen, bude pripojen k '0'"}
# 			}
# 		} else {
# 			set net_name "open"
# 			catch {common::send_msg_id "bd2vhdl    pin-3" "CRITICAL WARNING" "${pin}: pin odstranen, vystup neni pripojen!"}
# 		}
# 	}
# 	if {$busStart != {}} {
# 		array set busPins [list $name [list $busStop $busStart $net_name]]
# 	} else {
# 		array set bitPins [list $name $net_name]
# 	}
#   }
#   return 0
# }
# proc sortNets { nets &bus &bit } {
# 
#   upvar ${&bus} busNets
#   upvar ${&bit} bitNets
#   array set busNets [list ]
#   set bitNets [list]
# 
#   foreach net $nets {
#     set name [get_property -quiet NAME [get_bd_nets $net]]
# 	set pin [lindex [get_bd_pins -of_objects [get_bd_nets $net]] 0]
# 	set busStart [get_property -quiet LEFT [get_bd_pins $pin]]
#     set busStop  [get_property -quiet RIGHT  [get_bd_pins $pin]]
#     if {$busStart != {}} {
#     #   set busWidth [get_property -quiet BUS_WIDTH [get_ports $port]]
#       array set busNets [list $name [list $busStop $busStart]]
#     } else {
#       lappend bitNets $name
#     }
#   }
#   return 0
# }
# proc array2sortedList { &ar } {
# 
#   upvar ${&ar} ar
#   set sortedList [list]
#   foreach key [lsort -dictionary [array names ar]] {
#     lappend sortedList $key
#     lappend sortedList $ar($key)
#   }
#   return $sortedList
# }
# proc getInPinNet { cell pin default_value} {
# 	set pin [get_bd_pins -quiet $pin]
# 	set net [get_bd_nets -quiet -of_objects $pin]
# 	if {$net == ""} {
# 		catch {common::send_msg_id "bd2vhdl    pin-2" "CRITICAL WARNING" "${pin} nepripojen, bude pripojeno k $default_value"}
# 		set net_name $default_value
# 	} else {
# 		set net_name [get_property NAME $net]
# 	}
# 	return $net_name
# }
# proc getGate { cell  function} {
# 	set inputs_count [get_property CONFIG.Inputs [get_bd_cells -quiet $cell]]
# 	set content {}
# 	set prom {}
# 	set name [get_property NAME $cell]
# 	append content [format "\n\t-- %s\n" $name]
# 	for {set i 0} { $i < $inputs_count } { incr i } {
# 		set cfg [format "CONFIG.I%u_Inverted" $i]
# 		set pin [format "%s/I%u" $cell $i]
# 		set inverted [get_property $cfg  [get_bd_cells -quiet $cell]]
# 		#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 		set net_name [getInPinNet $cell $pin "\'0\'"]
# 		#set net_name [get_property NAME $net]
# 		if {$inverted == "true"} {
# 			append prom [format "not(%s)" $net_name]
# 		} else {
# 			append prom [format "%s" $net_name]
# 		}
# 		if {$i < ($inputs_count-1)} {
# 			append prom [format " %s " $function]
# 		}
# 	}
# 	set cfg [format "CONFIG.O_Inverted" $i]
# 	set pin [format "%s/O" $cell]
# 	set inverted [get_property $cfg  [get_bd_cells -quiet $cell]]
# 	set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 	if {$net != ""} {
# 		set out_name [get_property NAME $net]
# 		if {$inverted == "true"} {
# 			append content [format "\t%s <= not(%s);\n" $out_name $prom];	
# 		} else {
# 			append content [format "\t%s <= %s;\n" $out_name $prom];
# 		}
# 		return $content
# 	} else {
# 		catch {common::send_msg_id "bd2vhdl  jadro-3" "CRITICAL WARNING" "${cell}: odstraneno, vystup neni pripojen!"}
# 		return [append content "\t-- odstraneno, vystup neni pripojen\n"]
# 	}
# }
# proc getBuf { cell  function } {
# 	set content {}
# 	set name [get_property NAME $cell]
# 	append content [format "\n\t-- %s\n" $name]
# 
# 	set pin [format "%s/I" $cell]
# 	#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 	#set net_name [get_property NAME $net]
# 	set net_name [getInPinNet $cell $pin "\'0\'"]
# 
# 	set pin [format "%s/O" $cell]
# 	set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 	if {$net != ""} {
# 		set out_name [get_property NAME $net]
# 		if {$function == true} {
# 			append content [format "\t%s <= not(%s);\n" $out_name $net_name];	
# 		} else {
# 			append content  [format "\t%s <= %s;\n" $out_name $net_name];
# 		}
# 		return $content
# 	} else {
# 		catch {common::send_msg_id "bd2vhdl  jadro-3" "CRITICAL WARNING" "${cell}: odstraneno, vystup neni pripojen!"}
# 		return [append content "\t-- odstraneno, vystup neni pripojen\n"]
# 	}
# }
# proc getSource { cell  function } {
# 	set content {}
# 	set name [get_property NAME $cell]
# 	append content [format "\n\t-- %s\n" $name]
# 
# 	set pin [format "%s/O" $cell]
# 	set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 	if {$net != ""} {
# 		set out_name [get_property NAME $net]
# 		if {$function == true} {
# 			append content [format "\t%s <= '1';\n" $out_name];	
# 		} else {
# 			append content [format "\t%s <= '0';\n" $out_name];
# 		}
# 		return $content
# 	} else {
# 		catch {common::send_msg_id "bd2vhdl  jadro-3" "CRITICAL WARNING" "${cell}: odstraneno, vystup neni pripojen!"}
# 		return [append content "\t-- odstraneno, vystup neni pripojen\n"]
# 	}
# }
# proc getSplitter { cell } {
# 	set width [get_property CONFIG.WIDTH [get_bd_cells -quiet $cell]]
# 	set pin [format "%s/I" $cell]
# 	set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 	if {$net != ""} {
# 		set in_name [get_property NAME $net]
# 		set content {}
# 		set name [get_property NAME $cell]
# 		append content [format "\n\t-- %s\n" $name]
# 		for {set i 0} { $i < $width } { incr i } {
# 			set pin [format "%s/O%u" $cell $i]
# 			set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 			if {$net != ""} {
# 				set net_name [get_property NAME $net]
# 				append content [format "\t%s <= %s(%u);\n" $net_name $in_name $i]
# 			} else {
# 				catch {common::send_msg_id "bd2vhdl  jadro-3" "CRITICAL WARNING" "${cell}: ${pin} odstranen, vystup neni pripojen!"}
# 			}
# 		}
# 	} else {
# 		set content {}
# 		set name [get_property NAME $cell]
# 		append content [format "\n\t-- %s\n" $name]
# 		for {set i 0} { $i < $width } { incr i } {
# 			set pin [format "%s/O%u" $cell $i]
# 			set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 			if {$net != ""} {
# 				set net_name [get_property NAME $net]
# 				append content [format "\t%s <= \'0\';\n" $net_name $i]
# 				catch {common::send_msg_id "bd2vhdl  jadro-2" "CRITICAL WARNING" "${cell} nepripojen vstup, ${net_name} bude pripojeno k \'0\'"}
# 			} else {
# 				catch {common::send_msg_id "bd2vhdl  jadro-3" "CRITICAL WARNING" "${cell}: ${pin} odstranen, vystup neni pripojen!"}
# 			}
# 		}
# 	}
# 	return $content
# }
# proc getDff { cell } {
# 	set ce [get_property CONFIG.CE [get_bd_cells -quiet $cell]]
# 	set reset [get_property CONFIG.Reset [get_bd_cells -quiet $cell]]
# 
# 	set content {}
# 	set name [get_property NAME $cell]
# 	append content [format "\n\t-- %s\n" $name]
# 
# 	set pin [format "%s/q" $cell]
# 	set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 	if {$net != ""} {
# 		set out_name [get_property NAME $net]
# 
# 		set pin [format "%s/clk" $cell]
# 		set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 		if {$net == ""} {
# 			catch {common::send_msg_id "bd2vhdl  jadro-3" "CRITICAL WARNING" "${cell}: odstraneno, nejsou pripojene hodiny!"}
# 			return [append content "\t-- odstraneno, , nejsou pripojene hodiny!\n"]
# 		}
# 		#set clk_name [get_property NAME $net]
# 		set clk_name [getInPinNet $cell $pin "\'0\'"]
# 
# 		set pin [format "%s/d" $cell]
# 		#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 		#set in_name [get_property NAME $net]
# 		set in_name [getInPinNet $cell $pin "\'0\'"]
# 
# 		if {$ce == "true"} {
# 			set pin [format "%s/ce" $cell]
# 			#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 			#set ce_name [get_property NAME $net]
# 			set ce_name [getInPinNet $cell $pin "\'1\'"]
# 		}
# 
# 		if {$reset == "true"} {
# 			set pin [format "%s/reset" $cell]
# 			#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 			#set reset_name [get_property NAME $net]
# 			set reset_name [getInPinNet $cell $pin "\'0\'"]
# 		}
# 
# 		append content [format "\tprocess (%s)\n\tbegin\n" $clk_name]
# 		append content [format "\t\tif rising_edge(%s) then\n" $clk_name]
# 		if {$reset == "true"} {
# 			append content [format "\t\t\tif %s = '1' then\n\t\t\t\t%s <= '0';\n\t\t\tels" $reset_name $out_name]
# 		} else {
# 			append content "\t\t\t"
# 		}
# 
# 		if {$ce == "true"} {
# 			append content [format "if %s = '1' then\n" $ce_name]
# 			append content [format "\t\t\t\t%s <= %s;\n" $out_name $in_name]
# 			append content "\t\t\tend if;\n"
# 		} else {
# 			if {$reset == "true"} {
# 				append content [format "e\n\t\t\t\t%s <= %s;\n" $out_name $in_name]
# 				append content "\t\t\tend if;\n"
# 			} else {
# 				append content [format "%s <= %s;\n" $out_name $in_name]
# 			}
# 		}
# 
# 		append content "\t\tend if;\n\tend process;\n";
# 	} else {
# 		catch {common::send_msg_id "bd2vhdl jadro-3" "CRITICAL WARNING" "${cell}: odstraneno, vystup neni pripojen!"}
# 		return [append content "\t-- odstraneno, vystup neni pripojen\n"]
# 	}
# 	return $content
# }
# proc getMux { cell } {
# 	set ports_count [get_property CONFIG.Data_Ports [get_bd_cells -quiet $cell]]
# 	set width [get_property CONFIG.WIDTH [get_bd_cells -quiet $cell]]
# 	set i0_bus [get_property CONFIG.I0_BUS [get_bd_cells -quiet $cell]]
# 	set i1_bus [get_property CONFIG.I1_BUS [get_bd_cells -quiet $cell]]
# 	set i2_bus [get_property CONFIG.I2_BUS [get_bd_cells -quiet $cell]]
# 	set i3_bus [get_property CONFIG.I3_BUS [get_bd_cells -quiet $cell]]
# 	set o_bus [get_property CONFIG.O_BUS [get_bd_cells -quiet $cell]]
# 
# 	set content {}
# 	set name [get_property NAME $cell]
# 	append content [format "\n\t-- %s\n" $name]
# 
# 	for {set i 0} { $i < $width } { incr i } {
# 		if {$o_bus == "true"} {
# 			set pin [format "%s/O" $cell]
# 			set vecO [format "(%u)" $i]
# 		} else {
# 			set pin [format "%s/O_%u" $cell $i]
# 			set vecO ""
# 		}
# 		set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 		if {$net != ""} {
# 			set out_name [get_property NAME $net]
# 
# 			if {$i0_bus == "true"} {
# 				set pin [format "%s/I0" $cell]
# 				set vec0 [format "(%u)" $i]
# 			} else {
# 				set pin [format "%s/I0_%u" $cell $i]
# 				set vec0 ""
# 			}
# 			#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 			#set i0_name [get_property NAME $net]
# 			set i0_name [getInPinNet $cell $pin "\'0\'"]
# 			if {$i0_name == "'0'"} {
# 				set vec0 ""
# 			}
# 
# 			if {$i1_bus == "true"} {
# 				set pin [format "%s/I1" $cell]
# 				set vec1 [format "(%u)" $i]
# 			} else {
# 				set pin [format "%s/I1_%u" $cell $i]
# 				set vec1 ""
# 			}
# 			#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 			#set i1_name [get_property NAME $net]
# 			set i1_name [getInPinNet $cell $pin "\'0\'"]
# 			if {$i1_name == "'0'"} {
# 				set vec1 ""
# 			}
# 
# 			set pin [format "%s/Sel0" $cell]
# 			#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 			#set sel0_name [get_property NAME $net]
# 			set sel0_name [getInPinNet $cell $pin "\'0\'"]
# 
# 			if {$ports_count > 2} {
# 				if {$i2_bus == "true"} {
# 					set pin [format "%s/I2" $cell]
# 					set vec2 [format "(%u)" $i]
# 				} else {
# 					set pin [format "%s/I2_%u" $cell $i]
# 					set vec2 ""
# 				}
# 				#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 				#set i2_name [get_property NAME $net]
# 				set i2_name [getInPinNet $cell $pin "\'0\'"]
# 				if {$i2_name == "'0'"} {
# 					set vec2 ""
# 				}
# 
# 				if {$i3_bus == "true"} {
# 					set pin [format "%s/I3" $cell]
# 					set vec3 [format "(%u)" $i]
# 				} else {
# 					set pin [format "%s/I3_%u" $cell $i]
# 					set vec3 ""
# 				}
# 				#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 				#set i3_name [get_property NAME $net]
# 				set i3_name [getInPinNet $cell $pin "\'0\'"]
# 				if {$i3_name == "'0'"} {
# 					set vec3 ""
# 				}
# 
# 				set pin [format "%s/Sel1" $cell]
# 				#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 				#set sel1_name [get_property NAME $net]
# 				set sel1_name [getInPinNet $cell $pin "\'0\'"]
# 				
# 				if {$sel0_name != "'0'" && $sel1_name != "'0'"} {
# 					append content [format "\t%s%s <= %s%s when %s = '0' and %s = '0' else\n" $out_name $vecO $i0_name $vec0 $sel1_name $sel0_name]
# 					append content [format "\t\t%s%s when %s = '0' and %s = '1' else\n" $i1_name $vec1 $sel1_name $sel0_name]
# 					append content [format "\t\t%s%s when %s = '1' and %s = '0' else\n" $i2_name $vec2 $sel1_name $sel0_name]
# 					append content [format "\t\t%s%s when %s = '1' and %s = '1' else '0';\n\n" $i3_name $vec3 $sel1_name $sel0_name]
# 				} else {
# 					append content [format "\t%s%s <= %s%s;\n" $out_name $vecO $i0_name $vec0]
# 				}
# 			} else {
# 				if {$sel0_name != "'0'"} {
# 					append content [format "\t%s%s <= %s%s when (%s = '1') else %s%s;\n" $out_name $vecO $i1_name $vec1 $sel0_name $i0_name $vec0]
# 				} else {
# 					append content [format "\t%s%s <= %s%s;\n" $out_name $vecO $i0_name $vec0]
# 				}
# 			}
# 		} else {
# 			catch {common::send_msg_id "bd2vhdl  jadro-3" "CRITICAL WARNING" " ${cell}: pin ${pin} odstranen, vystup neni pripojen!"}
# 			return [append content "\t-- ${pin} odstranen, vystup neni pripojen\n"]
# 		}
# 		
# 	}
# 	return $content
# }
# proc getDebounce { cell } {
# 	set width [get_property CONFIG.width [get_bd_cells -quiet $cell]]
# 
# 	set content {}
# 	set name [get_property NAME $cell]
# 	append content [format "\n\t-- %s\n" $name]
# 
# 	set pin [format "%s/tl_out" $cell]
# 	set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 	if {$net != ""} {
# 		set tl_out [get_property NAME $net]
# 
# 		set pin [format "%s/clk" $cell]
# 		set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 		if {$net != ""} {
# 			set clk [get_property NAME $net]
# 
# 			set pin [format "%s/tl_in" $cell]
# 			#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 			#set tl_in [get_property NAME $net]
# 			set tl_in [getInPinNet $cell $pin "\'0\'"]
# 
# 			append content [ format "\t%s : debounce\n\t\tgeneric map (\n\t\t\twidth => %s\n\t\t)\n\t\tport map (\n\t\t\tclk	=> %s,\n\t\t\ttl_in	=> %s,\n\t\t\ttl_out	=> %s\n\t\t);\n" $name $width $clk $tl_in $tl_out]
# 		} else {
# 			catch {common::send_msg_id "bd2vhdl  jadro-3" "CRITICAL WARNING" "${cell}: odstraneno, nejsou pripojene hodiny!"}
# 			return [append content "\t-- odstraneno, , nejsou pripojene hodiny!\n"]	
# 		}
# 	} else {
# 		catch {common::send_msg_id "bd2vhdl  jadro-3" "CRITICAL WARNING" "${cell}: odstraneno, vystup neni pripojen!"}
# 		return [append content "\t-- odstraneno, vystup neni pripojen\n"]
# 	}
# 	
# 	return $content
# }
# set debounce_component "\tcomponent debounce
# \t\tgeneric (
# \t\t\twidth: integer := 22
# \t\t);
# \t\tport (
# \t\t\tclk    : in  std_logic;
# \t\t\ttl_in  : in  std_logic;
# \t\t\ttl_out : out std_logic
# \t\t);
# \tend component;\n"
# proc getModule_ref { cell components component_name} {
# 	upvar $components comps
# 
# 	set inPins [lsort [get_bd_pins -quiet -of_objects [get_bd_cells $cell] -filter DIR==I]]
# 	array set inputBusPins [list]
# 	array set inputBitPins [list]
# 	sortPins $inPins inputBusPins inputBitPins
# 
# 	set outPins [lsort [get_bd_pins -quiet -of_objects [get_bd_cells $cell] -filter DIR==O]]
# 	array set outputBusPins [list]
# 	array set outputBitPins [list]
# 	sortPins $outPins outputBusPins outputBitPins
# 
# 	set content {}
# 	set name [get_property NAME $cell]
# 	append content [format "\n\t-- %s\n" $name]
# 
# 	set lines [list]
# 	foreach {pin net} [array2sortedList inputBitPins] {
#     	lappend lines [list "$pin" "in  std_logic;" "$net"]
#   	}
# 	foreach {pin busInfo} [array2sortedList inputBusPins] {
# 		lassign $busInfo stop start net
# 		if {$start>$stop} {
# 			lappend lines [list "$pin" "in  std_logic_vector($start downto $stop);" "$net"]
# 		} else {
# 			lappend lines [list "$pin" "in  std_logic_vector($start to $stop);" "$net"]
# 		}
#   	}
# 	foreach {pin net} [array2sortedList outputBitPins] {
#     	lappend lines [list "$pin" "out std_logic;" "$net"]
# 	}
# 	foreach {pin busInfo} [array2sortedList outputBusPins] {
# 		lassign $busInfo stop start net
# 		if {$start>$stop} {
# 			lappend lines [list "$pin"  "out std_logic_vector($start downto $stop);" "$net"]
# 		} else {
# 			lappend lines [list "$pin" "out std_logic_vector($start to $stop);" "$net"]
# 		}
# 	}
# 	# Detect maximum column width to align columns
# 	foreach line $lines {
# 		set width [string length [lindex $line 0]]
# 		if {![info exist maxWidth] || $maxWidth < $width} {
# 			set maxWidth $width
# 		}
# 	}
# 	set ports {}
# 	set port_map {}
# 	foreach line $lines {
# 		append ports [format "\n\t\t\t%-${maxWidth}s :  %-${maxWidth}s" [lindex $line 0] [lindex $line 1]]
# 		append port_map [format "\n\t\t\t%-${maxWidth}s =>  %-${maxWidth}s," [lindex $line 0] [lindex $line 2]]
# 	}
# 	# Remove the last semi-colon
#   	set index [string last {;} $ports]
#   	set ports [string replace $ports $index $index {}]
# 	# Remove the last ,
#   	set index [string last {,} $port_map]
#   	set port_map [string replace $port_map $index $index {}]
# 
# 	# nepridavat pokud uz tam ta komponenta je
# 	if {[string first $component_name $comps] < 0} {
# 		append comps "\tcomponent ${component_name}\n\t\tport ("
# 		append comps $ports
# 		append comps "\n\t\t);\n\tend component;\n\n"
# 	}
# 	append content "\tinst_${name} : ${component_name}\n"
# 	append content "\t\tport map ("
# 	append content $port_map
# 	append content "\n\t\t);\n"
# }
# proc getHier { cell debounce components modules} {
# 	global debounce_component
# 	upvar $components comps
# 	upvar $modules mods
# 	upvar $debounce debs
# 
# 	set inPins [lsort [get_bd_pins -quiet -of_objects [get_bd_cells $cell] -filter DIR==I]]
# 	array set inputBusPins [list]
# 	array set inputBitPins [list]
# 	sortPins $inPins inputBusPins inputBitPins
# 
# 	set outPins [lsort [get_bd_pins -quiet -of_objects [get_bd_cells $cell] -filter DIR==O]]
# 	array set outputBusPins [list]
# 	array set outputBitPins [list]
# 	sortPins $outPins outputBusPins outputBitPins
# 
# 	set content {}
# 	set name [get_property NAME $cell]
# 	append content [format "\n\t-- %s\n" $name]
# 
# 	set lines [list]
# 	foreach {pin net} [array2sortedList inputBitPins] {
#     	lappend lines [list "$pin" "in  std_logic;" "$net"]
#   	}
# 	foreach {pin busInfo} [array2sortedList inputBusPins] {
# 		lassign $busInfo stop start net
# 		if {$start>$stop} {
# 			lappend lines [list "$pin" "in  std_logic_vector($start downto $stop);" "$net"]
# 		} else {
# 			lappend lines [list "$pin" "in  std_logic_vector($start to $stop);" "$net"]
# 		}
#   	}
# 	foreach {pin net} [array2sortedList outputBitPins] {
#     	lappend lines [list "$pin" "out std_logic;" "$net"]
# 	}
# 	foreach {pin busInfo} [array2sortedList outputBusPins] {
# 		lassign $busInfo stop start net
# 		if {$start>$stop} {
# 			lappend lines [list "$pin"  "out std_logic_vector($start downto $stop);" "$net"]
# 		} else {
# 			lappend lines [list "$pin" "out std_logic_vector($start to $stop);" "$net"]
# 		}
# 	}
# 	# Detect maximum column width to align columns
# 	foreach line $lines {
# 		set width [string length [lindex $line 0]]
# 		if {![info exist maxWidth] || $maxWidth < $width} {
# 			set maxWidth $width
# 		}
# 	}
# 	set ports {}
# 	set port_map {}
# 	foreach line $lines {
# 		append ports [format "\n\t\t\t%-${maxWidth}s :  %-${maxWidth}s" [lindex $line 0] [lindex $line 1]]
# 		append port_map [format "\n\t\t\t%-${maxWidth}s =>  %-${maxWidth}s," [lindex $line 0] [lindex $line 2]]
# 	}
# 	# Remove the last semi-colon
#   	set index [string last {;} $ports]
#   	set ports [string replace $ports $index $index {}]
# 	# Remove the last ,
#   	set index [string last {,} $port_map]
#   	set port_map [string replace $port_map $index $index {}]
# 
# 	set filtr [format {PATH !~ "%s/.*/.*"} $cell]
# 	set nets [lsort [get_bd_nets -quiet -of_objects [get_bd_cells $cell] -regexp -filter $filtr]]
# 	array set busNets [list ]
# 	set bitNets [list]
# 	sortNets $nets busNets bitNets
# 
# 	set lines [list]
# 	# Process single bit nets
# 	foreach net [lsort -dictionary $bitNets] {
# 		lappend lines [list "$net" "  std_logic;"]
# 	}
# 	# Process bus nets
# 	foreach {net busInfo} [array2sortedList busNets] {
# 		lassign $busInfo stop start
# 		if {$start>$stop} {
# 		lappend lines [list "$net" "  std_logic_vector($start downto $stop);"]
# 		} else {
# 		lappend lines [list "$net" "  std_logic_vector($start to $stop);"]
# 		}
# 	}
# 
# 	# Detect maximum column width to align columns
# 	foreach line $lines {
# 		set width [string length [lindex $line 0]]
# 		if {![info exist maxWidth] || $maxWidth < $width} {
# 			set maxWidth $width
# 		}
# 	}
# 
# 	# Build the content of the stub:
# 	set signals {}
# 	foreach line $lines {
# 		append signals [format "\n\tsignal %-${maxWidth}s :  %-${maxWidth}s" [lindex $line 0] [lindex $line 1]]
# 	}
#   set ports2Signals {}
#     foreach net [lsort -dictionary $nets] {
#         set net_name [get_property NAME [get_bd_nets -quiet $net]]
#         set ports_b [get_bd_ports -quiet -of_objects [get_bd_nets -quiet $net]]
#         if {$ports == {}} {
#             break
#         }
#         foreach port [lsort -dictionary $ports_b] {
#             set port_name [get_property NAME [get_bd_pins -quiet $port]]
#             set dir [get_property DIR [get_bd_pins -quiet $port]]
#             if {$dir == "I"} {
#                 append ports2Signals "\t$net_name <= $port_name;\n"    
#             } else {
#                 append ports2Signals "\t$port_name <= $net_name;\n"
#             }
#         }
#     }
#   
# 	set debounce_inner false
#   	set components_inner {}
#   	set modules_inner {}
#   	set body [getIPs $cell debounce_inner components_inner modules_inner]
# 	if {$debounce_inner} {
# 		puts "######################################################################x"
# 		append components_inner $debounce_component
# 		set debs true
#     }
# 	
# 	set comp_name [string replace $cell 0 0 {}]
#     set comp_name [string map {/ _} $comp_name]
#     append comps "\tcomponent ${comp_name}\n\t\tport ("
#     append mods "\n\nlibrary IEEE;\nuse IEEE.std_logic_1164.all;\n\n"
#     append mods "entity ${comp_name} is\n\tport("
#     append mods $ports
#     append comps $ports
#     append mods "\n\t\t);\nend entity ${comp_name};\n\narchitecture Behavioral of ${comp_name} is\n"
#     append mods $components_inner
#     append mods $signals
#     append mods "\nbegin\n"
#     append mods $ports2Signals
#     append mods $body
#     append mods "\nend Behavioral;"
#     append comps "\n\t\t);\n\tend component;\n\n"
#     append content "\tinst_${comp_name} : ${comp_name}\n"
#     append content "\t\tport map ("
#     append content $port_map
#     append content "\n\t\t);\n"
#     append mods $modules_inner
# 
# 	return $content
# }
# proc getIPs { parent debounce components modules} {
#   upvar $debounce deb
#   upvar $components comps
#   upvar $modules mods
#   if {$parent == ""} {
# 	set cells [get_bd_cells]	  
#   } else {
# 	set filtr [format {PATH !~ "%s/.*/.*"} $parent]
# 	set cells [get_bd_cells -of_objects [get_bd_cells $parent] -regexp -filter $filtr]
#   }
#   
#   set content {}
#   foreach cell [lsort -dictionary $cells] {
# 	set type [get_property TYPE [get_bd_cells -quiet $cell]]
# 	set name [get_property NAME [get_bd_cells -quiet $cell]]
# 	set vlnv [get_property VLNV [get_bd_cells -quiet $cell]]
# 	if {$type == "ip"} {
# 		set vlnvs [split $vlnv ":"]
# 		if {[lindex $vlnvs 0] == "FIT"} {
# 		 	switch [lindex $vlnvs 2] {
# 				"or" {
# 					append content [getGate $cell "or"]
# 				}
# 				"and" {
# 					append content [getGate $cell "and"]
# 				}
# 				"xor" {
# 					append content [getGate $cell "xor"]
# 				}
# 				"buf" {
# 					append content [getBuf $cell false]
# 				}
# 				"inv" {
# 					append content [getBuf $cell true]
# 				}
# 				"gnd" {
# 					append content [getSource $cell false]
# 				}
# 				"vcc" {
# 					append content [getSource $cell true]
# 				}
# 				"splitter" {
# 					append content [getSplitter $cell]
# 				}
# 				"mux" {
# 					append content [getMux $cell]
# 				}
# 				"dff" {
# 					append content [getDff $cell]
# 				}
# 				"debounce" {
# 					append content [getDebounce $cell]
# 					set deb true
# 				}
# 			}
# 		} elseif {[lindex $vlnvs 0] == "xilinx.com" && [lindex $vlnvs 1] == "module_ref"} {
# 			append content [getModule_ref $cell comps [lindex $vlnvs 2]]
# 		}
# 			
# 	} elseif {$type == "hier"} {
# 		append content [getHier $cell deb comps mods]
# 	}
#   }
#   return $content
# }
# set debounce_code "\n\n\nlibrary IEEE;
# use IEEE.STD_LOGIC_1164.ALL;
# use ieee.std_logic_unsigned.all;
# 
# entity debounce is
#     generic (
# 		width: integer := 22 -- 100 MHz clock -> 4 - simulation (90 ns); 22 - synthesis (ca. 20 ms)
# 	);
#     port (
# 		clk : in STD_LOGIC;
#         tl_in : in STD_LOGIC;
#         tl_out : out STD_LOGIC
# 	);
# end entity debounce;
# 
# architecture Behavioral of debounce is
# 
# signal cnt       : std_logic_vector(width-1 downto 0) := (others => '0');
# signal reset, ce : std_logic := '0';
# signal tl_prev   : std_logic := '0';
# 
# 
# begin
# 
#     counter: process(clk) begin
#         if rising_edge(clk) then 
#             if (reset = '1') then
#                 cnt <= (others => '0');
#             elsif (ce = '1') then
#                 cnt <= cnt + 1;
#             end if;
#         end if;
#     end process;
# 
#     process(clk) begin
#         if rising_edge(clk) then
#             if (tl_prev /= tl_in) then
#                 reset <= '1';
#             else 
#                 reset <= '0';
#             end if;
#         end if;
#     end process;
#                 
#     process(clk) begin
#         if rising_edge(clk) then
#             if (reset = '1') then
#                 tl_prev <= tl_in;
#             end if;
#         end if;
#     end process;
#                 
#     process(clk) begin
#         if rising_edge(clk) then
#             if ((cnt(width-1) = '1') and (cnt(0) = '0')) then
#                 tl_out <= tl_prev;
#             end if;
#         end if;
#     end process;
#                 
# 
#     ce <= '0' when ((cnt(width-1) = '1') and (cnt(0) = '1'))
#                 else '1';
# 
# end Behavioral;\n"
# proc vhdlTemplate { module } {
#   global debounce_code
#   global debounce_component
# 
#   set inPorts [lsort [get_bd_ports -quiet -filter DIR==I]]
#   array set inputBusPorts [list ]
#   set inputBitPorts [list]
#   sortPorts $inPorts inputBusPorts inputBitPorts
# 
#   set outPorts [lsort [get_bd_ports -quiet -filter DIR==O]]
#   array set outputBusPorts [list ]
#   set outputBitPorts [list]
#   sortPorts $outPorts outputBusPorts outputBitPorts
# 
#   set inoutPorts [lsort [get_bd_ports -quiet -filter DIR==IO]]
#   array set inoutBusPorts [list ]
#   set inoutBitPorts [list]
#   sortPorts $inoutPorts inoutBusPorts inoutBitPorts
# 
#   set lines [list]
#   # Process input single bit ports
# #   lappend lines "-- Input Ports - Single Bit"
#   foreach port [lsort -dictionary $inputBitPorts] {
#     lappend lines [list "$port" "in  std_logic;"]
#   }
#   # Process input bus ports
# #   lappend lines "-- Input Ports - Busses"
#   foreach {port busInfo} [array2sortedList inputBusPorts] {
#     lassign $busInfo stop start
#     if {$start>$stop} {
#       lappend lines [list "$port" "in  std_logic_vector($start downto $stop);"]
#     } else {
#       lappend lines [list "$port" "in  std_logic_vector($start to $stop);"]
#     }
#   }
#   # Process output single bit ports
# #   lappend lines "-- Output Ports - Single Bit"
#   foreach port [lsort -dictionary $outputBitPorts] {
#     lappend lines [list "$port" "out std_logic;"]
#   }
#   # Process output bus ports
# #   lappend lines "-- Output Ports - Busses"
#   foreach {port busInfo} [array2sortedList outputBusPorts] {
#     lassign $busInfo stop start
#     if {$start>$stop} {
#       lappend lines [list "$port"  "out std_logic_vector($start downto $stop);"]
#     } else {
#       lappend lines [list "$port" "out std_logic_vector($start to $stop);"]
#     }
#   }
#   # Process inout single bit ports
# #   lappend lines "-- InOut Ports - Single Bit"
#   foreach port [lsort -dictionary $inoutBitPorts] {
#     lappend lines [list "$port" "inout  std_logic;"]
#   }
#   # Process inout bus ports
# #   lappend lines "-- InOut Ports - Busses"
#   foreach {port busInfo} [array2sortedList inoutBusPorts] {
#     lassign $busInfo stop start
#     if {$start>$stop} {
#       lappend lines [list "$port" "inout  std_logic_vector($start downto $stop);"]
#     } else {
#       lappend lines [list "$port" "inout  std_logic_vector($start to $stop);"]
#     }
#   }
# 
#   # Detect maximum column width to align columns
#   foreach line $lines {
#     if {[regexp {^\s*\-\-} $line]} {
#       # Skip lines that are just comments
#       continue
#     }
#     set width [string length [lindex $line 0]]
#     if {![info exist maxWidth] || $maxWidth < $width} {
#       set maxWidth $width
#     }
#   }
# 
#   # Build the content of the stub:
#   set content {}
#   foreach line $lines {
#     if {[regexp {^\s*\-\-} $line]} {
#       # Lines that are just comments
#       append content "\n      $line"
#       continue
#     }
#     append content [format "\n      %-${maxWidth}s :  %-${maxWidth}s" [lindex $line 0] [lindex $line 1]]
#   }
# 
#   # Remove the last semi-colon
#   set index [string last {;} $content]
#   set content [string replace $content $index $index {}]
# 
# 
#   set nets [lsort [get_bd_nets -quiet]]
#   array set busNets [list ]
#   set bitNets [list]
#   sortNets $nets busNets bitNets
# 
#   set lines [list]
#   # Process single bit nets
#   foreach net [lsort -dictionary $bitNets] {
#     lappend lines [list "$net" "  std_logic;"]
#   }
#   # Process bus nets
#   foreach {net busInfo} [array2sortedList busNets] {
#     lassign $busInfo stop start
#     if {$start>$stop} {
#       lappend lines [list "$net" "  std_logic_vector($start downto $stop);"]
#     } else {
#       lappend lines [list "$net" "  std_logic_vector($start to $stop);"]
#     }
#   }
# 
#   # Detect maximum column width to align columns
#   foreach line $lines {
#     if {[regexp {^\s*\-\-} $line]} {
#       # Skip lines that are just comments
#       continue
#     }
#     set width [string length [lindex $line 0]]
#     if {![info exist maxWidth] || $maxWidth < $width} {
#       set maxWidth $width
#     }
#   }
# 
#   # Build the content of the stub:
#   set signals {}
#   foreach line $lines {
#     if {[regexp {^\s*\-\-} $line]} {
#       # Lines that are just comments
#       append signals "\n      $line"
#       continue
#     }
#     append signals [format "\n      signal %-${maxWidth}s :  %-${maxWidth}s" [lindex $line 0] [lindex $line 1]]
#   }
#   set ports2Signals {}
#   foreach port [lsort -dictionary $inPorts] {
# 	set port_name [get_property NAME [get_bd_ports -quiet $port]]
# 	set net [get_bd_nets -quiet -of_objects [get_bd_ports -quiet $port]]
# 	if {$net != ""} {
# 		set net_name [get_property NAME $net]
# 		append ports2Signals "\t$net_name <= $port_name;\n"
# 	} else {
# 		catch {common::send_msg_id "bd2vhdl   port-2" "CRITICAL WARNING" "${port_name}: port nepripojen!"}
# 	}
#   }
#   foreach port [lsort -dictionary $outPorts] {
# 	set port_name [get_property NAME [get_bd_ports -quiet $port]]
# 	set net [get_bd_nets -quiet -of_objects [get_bd_ports -quiet $port]]
# 	if {$net != ""} {
# 		set net_name [get_property NAME $net]
# 		append ports2Signals "\t$port_name <= $net_name;\n"
# 	} else {
# 		catch {common::send_msg_id "bd2vhdl   port-3" "CRITICAL WARNING" "${port_name}: port nepripojen!"}
# 	}
#   }
#   set debounce false
#   set components {}
#   set modules {}
#   set body [getIPs "" debounce components modules]
#   
#   if {$debounce} {
# 	  append components $debounce_component
#   }
#   # Now that the last semi-colon is replaced, add the header and footer
#   set content [format "library IEEE;
# use IEEE.std_logic_1164.all;
# 
# library xil_defaultlib;
# use xil_defaultlib.all;
# 
# entity ${module}_vhdl is
#    port (%s
#    );
# end entity ${module}_vhdl;
# 
# architecture Behavioral of ${module}_vhdl is
# %s
# %s
# begin
# %s
# %s
# end Behavioral;" $content $components $signals $ports2Signals $body]
# 
#   append content $modules
# 
#   if {$debounce} {
# 	  append content $debounce_code
#   }
# 
#   return $content
# }
# set name [current_bd_design -quiet]
# if {$name == ""} {
#     common::send_msg_id -continue "bd2vhdl design-2" "ERROR" "Je potreba otevrit block design!"
# 	return
# }
# save_bd_design $name
Wrote  : <X:/SAP/lab5/lab5.srcs/sources_1/bd/counter_full/counter_full.bd> 
Wrote  : <X:/SAP/lab5/lab5.srcs/sources_1/bd/counter_full/ui/bd_7d1008b2.ui> 
# validate_bd_design -force
CRITICAL WARNING: [BD 41-759] The input pins (listed below) are either not connected or do not have a source port, and they don't have a tie-off specified. These pins are tied-off to all 0's to avoid error in Implementation flow.
Please check your design and connect them as needed: 
/debounce_0/clk
/debounce_0/tl_in

# if { [llength [get_bd_ports]] > 0 } {
# 	puts "\n##### ${name} #####"
# 	set content [vhdlTemplate $name]
# 	set PROJ_DIR [get_property DIRECTORY [current_project]]
# 	set PROJ_DIR [file normalize $PROJ_DIR]
# 	set tmp_dir [file join $PROJ_DIR "tmp"]
# 	file mkdir $tmp_dir
# 	set filename "${name}.vhd"
# 	set filename_path [file join $tmp_dir $filename]
# 	# Save the template
# 	set mode {w}
# 	puts "\nCreating VHDL for Design $name in [file normalize $filename]\n"
# 	set tfh [open $filename_path $mode]
# 	puts $tfh $content
# 	close $tfh
# 
# 	import_files -force -norecurse $filename_path
# 	common::send_msg_id "bd2vhdl design-1" "INFO" "${name}_vhdl.vhd vygenerovan"
# } else {
# 	common::send_msg_id -continue "bd2vhdl design-3" "ERROR" "${name} neobsahuje zadne porty!"
# }
WARNING: [BD 5-236] No ports matched 'get_bd_ports'
ERROR: [bd2vhdl design-3] counter_full neobsahuje zadne porty!
create_bd_cell -type module -reference counter_vhdl counter_vhdl_0
create_bd_cell -type module -reference decoder_7seg decoder_7seg_0
INFO: [IP_Flow 19-234] Refreshing IP repositories
INFO: [IP_Flow 19-1700] Loaded user IP repository 'x:/SAP/lib_SAP_2022_02_02'.
set_property location {2.5 355 -58} [get_bd_cells decoder_7seg_0]
set_property location {1.5 29 -50} [get_bd_cells counter_vhdl_0]
startgroup
create_bd_cell -type ip -vlnv FIT:user:gnd:1.0 gnd_0
endgroup
set_property location {2 31 125} [get_bd_cells gnd_0]
connect_bd_net [get_bd_pins gnd_0/O] [get_bd_pins decoder_7seg_0/d]
startgroup
make_bd_pins_external  [get_bd_cells debounce_0]
make_bd_intf_pins_external  [get_bd_cells debounce_0]
INFO: [BD 5-409] No interface pins to be made external for /debounce_0
endgroup
delete_bd_objs [get_bd_nets debounce_0_tl_out]
delete_bd_objs [get_bd_ports tl_out_0]
set_property name clk [get_bd_ports clk_0]
set_property name tl_in [get_bd_ports tl_in_0]
connect_bd_net [get_bd_pins debounce_0/tl_out] [get_bd_pins counter_vhdl_0/clk]
WARNING: [BD 41-1731] Type mismatch between connected pins: /debounce_0/tl_out(undef) and /counter_vhdl_0/clk(clk)
startgroup
make_bd_pins_external  [get_bd_cells counter_vhdl_0]
make_bd_intf_pins_external  [get_bd_cells counter_vhdl_0]
INFO: [BD 5-409] No interface pins to be made external for /counter_vhdl_0
endgroup
delete_bd_objs [get_bd_nets counter_vhdl_0_y2] [get_bd_ports y2_0]
delete_bd_objs [get_bd_nets counter_vhdl_0_y0] [get_bd_ports y0_0]
delete_bd_objs [get_bd_nets counter_vhdl_0_y1] [get_bd_ports y1_0]
set_property name inc [get_bd_ports inc_0]
set_property name reset [get_bd_ports reset_0]
save_bd_design
Wrote  : <X:/SAP/lab5/lab5.srcs/sources_1/bd/counter_full/counter_full.bd> 
Wrote  : <X:/SAP/lab5/lab5.srcs/sources_1/bd/counter_full/ui/bd_7d1008b2.ui> 
delete_bd_objs [get_bd_nets inc_0_1] [get_bd_ports inc]
delete_bd_objs [get_bd_nets reset_0_1] [get_bd_ports reset]
delete_bd_objs [get_bd_nets clk_0_1] [get_bd_ports clk]
create_bd_port -dir I -type ce clk
connect_bd_net [get_bd_ports clk] [get_bd_pins debounce_0/clk]
WARNING: [BD 41-1731] Type mismatch between connected pins: /clk(ce) and /debounce_0/clk(undef)
set_property location {-445 51} [get_bd_ports clk]
create_bd_port -dir I -type rst reset
set_property CONFIG.POLARITY ACTIVE_HIGH [get_bd_ports reset]
connect_bd_net [get_bd_ports reset] [get_bd_pins counter_vhdl_0/reset]
set_property location {-450 -66} [get_bd_ports reset]
create_bd_port -dir I inc
connect_bd_net [get_bd_ports inc] [get_bd_pins counter_vhdl_0/inc]
set_property location {-448 -110} [get_bd_ports inc]
save_bd_design
Wrote  : <X:/SAP/lab5/lab5.srcs/sources_1/bd/counter_full/counter_full.bd> 
Wrote  : <X:/SAP/lab5/lab5.srcs/sources_1/bd/counter_full/ui/bd_7d1008b2.ui> 
connect_bd_net [get_bd_pins counter_vhdl_0/y0] [get_bd_pins decoder_7seg_0/a]
connect_bd_net [get_bd_pins counter_vhdl_0/y1] [get_bd_pins decoder_7seg_0/b]
connect_bd_net [get_bd_pins counter_vhdl_0/y2] [get_bd_pins decoder_7seg_0/c]
save_bd_design
Wrote  : <X:/SAP/lab5/lab5.srcs/sources_1/bd/counter_full/counter_full.bd> 
Wrote  : <X:/SAP/lab5/lab5.srcs/sources_1/bd/counter_full/ui/bd_7d1008b2.ui> 
startgroup
make_bd_pins_external  [get_bd_cells decoder_7seg_0]
make_bd_intf_pins_external  [get_bd_cells decoder_7seg_0]
INFO: [BD 5-409] No interface pins to be made external for /decoder_7seg_0
endgroup
set_property name f_a [get_bd_ports f_a_0]
set_property name f_b [get_bd_ports f_b_0]
set_property name f_c [get_bd_ports f_c_0]
set_property name f_d [get_bd_ports f_d_0]
set_property name f_e [get_bd_ports f_e_0]
set_property name f_f [get_bd_ports f_f_0]
set_property name f_g [get_bd_ports f_g_0]
save_bd_design
Wrote  : <X:/SAP/lab5/lab5.srcs/sources_1/bd/counter_full/counter_full.bd> 
Wrote  : <X:/SAP/lab5/lab5.srcs/sources_1/bd/counter_full/ui/bd_7d1008b2.ui> 
source X:/SAP/lib_SAP_2022_02_02/gen_bd_vhdl.tcl
# proc sortPorts { ports &bus &bit } {
# 
#   upvar ${&bus} busPorts
#   upvar ${&bit} bitPorts
#   array set busPorts [list]
#   set bitPorts [list]
# 
#   foreach port $ports {
#     set name [get_property -quiet NAME [get_bd_ports $port]]
# 	set busStart [get_property -quiet LEFT [get_bd_ports $port]]
#     set busStop  [get_property -quiet RIGHT  [get_bd_ports $port]]
#     if {$busStart != {}} {
#     #   set busWidth [get_property -quiet BUS_WIDTH [get_ports $port]]
#       array set busPorts [list $name [list $busStop $busStart]]
#     } else {
#       lappend bitPorts $name
#     }
#   }
#   return 0
# }
# proc sortPins { pins &bus &bit } {
# 
#   upvar ${&bus} busPins
#   upvar ${&bit} bitPins
#   array set busPins [list]
#   array set bitPins [list]
# 
#   foreach pin $pins {
#     set name [get_property -quiet NAME [get_bd_pins $pin]]
# 	set dir [get_property -quiet DIR [get_bd_pins $pin]]
# 	set busStart [get_property -quiet LEFT [get_bd_pins $pin]]
#     set busStop  [get_property -quiet RIGHT  [get_bd_pins $pin]]
# 	set net [get_bd_nets -quiet -of_objects [get_bd_pins $pin]]
# 	if {$net != ""} {
# 		set net_name [get_property -quiet NAME $net]
# 	} else {
# 		if {$dir == "I"} {
# 			if {$busStart != {}} {
# 				set net_name "(others => '0')"
# 				catch {common::send_msg_id "bd2vhdl    pin-2" "CRITICAL WARNING" "${pin}: nepripojen, bude pripojen k '0'"}
# 			} else {
# 				set net_name "'0'"
# 				catch {common::send_msg_id "bd2vhdl    pin-2" "CRITICAL WARNING" "${pin}: nepripojen, bude pripojen k '0'"}
# 			}
# 		} else {
# 			set net_name "open"
# 			catch {common::send_msg_id "bd2vhdl    pin-3" "CRITICAL WARNING" "${pin}: pin odstranen, vystup neni pripojen!"}
# 		}
# 	}
# 	if {$busStart != {}} {
# 		array set busPins [list $name [list $busStop $busStart $net_name]]
# 	} else {
# 		array set bitPins [list $name $net_name]
# 	}
#   }
#   return 0
# }
# proc sortNets { nets &bus &bit } {
# 
#   upvar ${&bus} busNets
#   upvar ${&bit} bitNets
#   array set busNets [list ]
#   set bitNets [list]
# 
#   foreach net $nets {
#     set name [get_property -quiet NAME [get_bd_nets $net]]
# 	set pin [lindex [get_bd_pins -of_objects [get_bd_nets $net]] 0]
# 	set busStart [get_property -quiet LEFT [get_bd_pins $pin]]
#     set busStop  [get_property -quiet RIGHT  [get_bd_pins $pin]]
#     if {$busStart != {}} {
#     #   set busWidth [get_property -quiet BUS_WIDTH [get_ports $port]]
#       array set busNets [list $name [list $busStop $busStart]]
#     } else {
#       lappend bitNets $name
#     }
#   }
#   return 0
# }
# proc array2sortedList { &ar } {
# 
#   upvar ${&ar} ar
#   set sortedList [list]
#   foreach key [lsort -dictionary [array names ar]] {
#     lappend sortedList $key
#     lappend sortedList $ar($key)
#   }
#   return $sortedList
# }
# proc getInPinNet { cell pin default_value} {
# 	set pin [get_bd_pins -quiet $pin]
# 	set net [get_bd_nets -quiet -of_objects $pin]
# 	if {$net == ""} {
# 		catch {common::send_msg_id "bd2vhdl    pin-2" "CRITICAL WARNING" "${pin} nepripojen, bude pripojeno k $default_value"}
# 		set net_name $default_value
# 	} else {
# 		set net_name [get_property NAME $net]
# 	}
# 	return $net_name
# }
# proc getGate { cell  function} {
# 	set inputs_count [get_property CONFIG.Inputs [get_bd_cells -quiet $cell]]
# 	set content {}
# 	set prom {}
# 	set name [get_property NAME $cell]
# 	append content [format "\n\t-- %s\n" $name]
# 	for {set i 0} { $i < $inputs_count } { incr i } {
# 		set cfg [format "CONFIG.I%u_Inverted" $i]
# 		set pin [format "%s/I%u" $cell $i]
# 		set inverted [get_property $cfg  [get_bd_cells -quiet $cell]]
# 		#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 		set net_name [getInPinNet $cell $pin "\'0\'"]
# 		#set net_name [get_property NAME $net]
# 		if {$inverted == "true"} {
# 			append prom [format "not(%s)" $net_name]
# 		} else {
# 			append prom [format "%s" $net_name]
# 		}
# 		if {$i < ($inputs_count-1)} {
# 			append prom [format " %s " $function]
# 		}
# 	}
# 	set cfg [format "CONFIG.O_Inverted" $i]
# 	set pin [format "%s/O" $cell]
# 	set inverted [get_property $cfg  [get_bd_cells -quiet $cell]]
# 	set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 	if {$net != ""} {
# 		set out_name [get_property NAME $net]
# 		if {$inverted == "true"} {
# 			append content [format "\t%s <= not(%s);\n" $out_name $prom];	
# 		} else {
# 			append content [format "\t%s <= %s;\n" $out_name $prom];
# 		}
# 		return $content
# 	} else {
# 		catch {common::send_msg_id "bd2vhdl  jadro-3" "CRITICAL WARNING" "${cell}: odstraneno, vystup neni pripojen!"}
# 		return [append content "\t-- odstraneno, vystup neni pripojen\n"]
# 	}
# }
# proc getBuf { cell  function } {
# 	set content {}
# 	set name [get_property NAME $cell]
# 	append content [format "\n\t-- %s\n" $name]
# 
# 	set pin [format "%s/I" $cell]
# 	#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 	#set net_name [get_property NAME $net]
# 	set net_name [getInPinNet $cell $pin "\'0\'"]
# 
# 	set pin [format "%s/O" $cell]
# 	set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 	if {$net != ""} {
# 		set out_name [get_property NAME $net]
# 		if {$function == true} {
# 			append content [format "\t%s <= not(%s);\n" $out_name $net_name];	
# 		} else {
# 			append content  [format "\t%s <= %s;\n" $out_name $net_name];
# 		}
# 		return $content
# 	} else {
# 		catch {common::send_msg_id "bd2vhdl  jadro-3" "CRITICAL WARNING" "${cell}: odstraneno, vystup neni pripojen!"}
# 		return [append content "\t-- odstraneno, vystup neni pripojen\n"]
# 	}
# }
# proc getSource { cell  function } {
# 	set content {}
# 	set name [get_property NAME $cell]
# 	append content [format "\n\t-- %s\n" $name]
# 
# 	set pin [format "%s/O" $cell]
# 	set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 	if {$net != ""} {
# 		set out_name [get_property NAME $net]
# 		if {$function == true} {
# 			append content [format "\t%s <= '1';\n" $out_name];	
# 		} else {
# 			append content [format "\t%s <= '0';\n" $out_name];
# 		}
# 		return $content
# 	} else {
# 		catch {common::send_msg_id "bd2vhdl  jadro-3" "CRITICAL WARNING" "${cell}: odstraneno, vystup neni pripojen!"}
# 		return [append content "\t-- odstraneno, vystup neni pripojen\n"]
# 	}
# }
# proc getSplitter { cell } {
# 	set width [get_property CONFIG.WIDTH [get_bd_cells -quiet $cell]]
# 	set pin [format "%s/I" $cell]
# 	set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 	if {$net != ""} {
# 		set in_name [get_property NAME $net]
# 		set content {}
# 		set name [get_property NAME $cell]
# 		append content [format "\n\t-- %s\n" $name]
# 		for {set i 0} { $i < $width } { incr i } {
# 			set pin [format "%s/O%u" $cell $i]
# 			set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 			if {$net != ""} {
# 				set net_name [get_property NAME $net]
# 				append content [format "\t%s <= %s(%u);\n" $net_name $in_name $i]
# 			} else {
# 				catch {common::send_msg_id "bd2vhdl  jadro-3" "CRITICAL WARNING" "${cell}: ${pin} odstranen, vystup neni pripojen!"}
# 			}
# 		}
# 	} else {
# 		set content {}
# 		set name [get_property NAME $cell]
# 		append content [format "\n\t-- %s\n" $name]
# 		for {set i 0} { $i < $width } { incr i } {
# 			set pin [format "%s/O%u" $cell $i]
# 			set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 			if {$net != ""} {
# 				set net_name [get_property NAME $net]
# 				append content [format "\t%s <= \'0\';\n" $net_name $i]
# 				catch {common::send_msg_id "bd2vhdl  jadro-2" "CRITICAL WARNING" "${cell} nepripojen vstup, ${net_name} bude pripojeno k \'0\'"}
# 			} else {
# 				catch {common::send_msg_id "bd2vhdl  jadro-3" "CRITICAL WARNING" "${cell}: ${pin} odstranen, vystup neni pripojen!"}
# 			}
# 		}
# 	}
# 	return $content
# }
# proc getDff { cell } {
# 	set ce [get_property CONFIG.CE [get_bd_cells -quiet $cell]]
# 	set reset [get_property CONFIG.Reset [get_bd_cells -quiet $cell]]
# 
# 	set content {}
# 	set name [get_property NAME $cell]
# 	append content [format "\n\t-- %s\n" $name]
# 
# 	set pin [format "%s/q" $cell]
# 	set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 	if {$net != ""} {
# 		set out_name [get_property NAME $net]
# 
# 		set pin [format "%s/clk" $cell]
# 		set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 		if {$net == ""} {
# 			catch {common::send_msg_id "bd2vhdl  jadro-3" "CRITICAL WARNING" "${cell}: odstraneno, nejsou pripojene hodiny!"}
# 			return [append content "\t-- odstraneno, , nejsou pripojene hodiny!\n"]
# 		}
# 		#set clk_name [get_property NAME $net]
# 		set clk_name [getInPinNet $cell $pin "\'0\'"]
# 
# 		set pin [format "%s/d" $cell]
# 		#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 		#set in_name [get_property NAME $net]
# 		set in_name [getInPinNet $cell $pin "\'0\'"]
# 
# 		if {$ce == "true"} {
# 			set pin [format "%s/ce" $cell]
# 			#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 			#set ce_name [get_property NAME $net]
# 			set ce_name [getInPinNet $cell $pin "\'1\'"]
# 		}
# 
# 		if {$reset == "true"} {
# 			set pin [format "%s/reset" $cell]
# 			#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 			#set reset_name [get_property NAME $net]
# 			set reset_name [getInPinNet $cell $pin "\'0\'"]
# 		}
# 
# 		append content [format "\tprocess (%s)\n\tbegin\n" $clk_name]
# 		append content [format "\t\tif rising_edge(%s) then\n" $clk_name]
# 		if {$reset == "true"} {
# 			append content [format "\t\t\tif %s = '1' then\n\t\t\t\t%s <= '0';\n\t\t\tels" $reset_name $out_name]
# 		} else {
# 			append content "\t\t\t"
# 		}
# 
# 		if {$ce == "true"} {
# 			append content [format "if %s = '1' then\n" $ce_name]
# 			append content [format "\t\t\t\t%s <= %s;\n" $out_name $in_name]
# 			append content "\t\t\tend if;\n"
# 		} else {
# 			if {$reset == "true"} {
# 				append content [format "e\n\t\t\t\t%s <= %s;\n" $out_name $in_name]
# 				append content "\t\t\tend if;\n"
# 			} else {
# 				append content [format "%s <= %s;\n" $out_name $in_name]
# 			}
# 		}
# 
# 		append content "\t\tend if;\n\tend process;\n";
# 	} else {
# 		catch {common::send_msg_id "bd2vhdl jadro-3" "CRITICAL WARNING" "${cell}: odstraneno, vystup neni pripojen!"}
# 		return [append content "\t-- odstraneno, vystup neni pripojen\n"]
# 	}
# 	return $content
# }
# proc getMux { cell } {
# 	set ports_count [get_property CONFIG.Data_Ports [get_bd_cells -quiet $cell]]
# 	set width [get_property CONFIG.WIDTH [get_bd_cells -quiet $cell]]
# 	set i0_bus [get_property CONFIG.I0_BUS [get_bd_cells -quiet $cell]]
# 	set i1_bus [get_property CONFIG.I1_BUS [get_bd_cells -quiet $cell]]
# 	set i2_bus [get_property CONFIG.I2_BUS [get_bd_cells -quiet $cell]]
# 	set i3_bus [get_property CONFIG.I3_BUS [get_bd_cells -quiet $cell]]
# 	set o_bus [get_property CONFIG.O_BUS [get_bd_cells -quiet $cell]]
# 
# 	set content {}
# 	set name [get_property NAME $cell]
# 	append content [format "\n\t-- %s\n" $name]
# 
# 	for {set i 0} { $i < $width } { incr i } {
# 		if {$o_bus == "true"} {
# 			set pin [format "%s/O" $cell]
# 			set vecO [format "(%u)" $i]
# 		} else {
# 			set pin [format "%s/O_%u" $cell $i]
# 			set vecO ""
# 		}
# 		set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 		if {$net != ""} {
# 			set out_name [get_property NAME $net]
# 
# 			if {$i0_bus == "true"} {
# 				set pin [format "%s/I0" $cell]
# 				set vec0 [format "(%u)" $i]
# 			} else {
# 				set pin [format "%s/I0_%u" $cell $i]
# 				set vec0 ""
# 			}
# 			#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 			#set i0_name [get_property NAME $net]
# 			set i0_name [getInPinNet $cell $pin "\'0\'"]
# 			if {$i0_name == "'0'"} {
# 				set vec0 ""
# 			}
# 
# 			if {$i1_bus == "true"} {
# 				set pin [format "%s/I1" $cell]
# 				set vec1 [format "(%u)" $i]
# 			} else {
# 				set pin [format "%s/I1_%u" $cell $i]
# 				set vec1 ""
# 			}
# 			#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 			#set i1_name [get_property NAME $net]
# 			set i1_name [getInPinNet $cell $pin "\'0\'"]
# 			if {$i1_name == "'0'"} {
# 				set vec1 ""
# 			}
# 
# 			set pin [format "%s/Sel0" $cell]
# 			#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 			#set sel0_name [get_property NAME $net]
# 			set sel0_name [getInPinNet $cell $pin "\'0\'"]
# 
# 			if {$ports_count > 2} {
# 				if {$i2_bus == "true"} {
# 					set pin [format "%s/I2" $cell]
# 					set vec2 [format "(%u)" $i]
# 				} else {
# 					set pin [format "%s/I2_%u" $cell $i]
# 					set vec2 ""
# 				}
# 				#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 				#set i2_name [get_property NAME $net]
# 				set i2_name [getInPinNet $cell $pin "\'0\'"]
# 				if {$i2_name == "'0'"} {
# 					set vec2 ""
# 				}
# 
# 				if {$i3_bus == "true"} {
# 					set pin [format "%s/I3" $cell]
# 					set vec3 [format "(%u)" $i]
# 				} else {
# 					set pin [format "%s/I3_%u" $cell $i]
# 					set vec3 ""
# 				}
# 				#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 				#set i3_name [get_property NAME $net]
# 				set i3_name [getInPinNet $cell $pin "\'0\'"]
# 				if {$i3_name == "'0'"} {
# 					set vec3 ""
# 				}
# 
# 				set pin [format "%s/Sel1" $cell]
# 				#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 				#set sel1_name [get_property NAME $net]
# 				set sel1_name [getInPinNet $cell $pin "\'0\'"]
# 				
# 				if {$sel0_name != "'0'" && $sel1_name != "'0'"} {
# 					append content [format "\t%s%s <= %s%s when %s = '0' and %s = '0' else\n" $out_name $vecO $i0_name $vec0 $sel1_name $sel0_name]
# 					append content [format "\t\t%s%s when %s = '0' and %s = '1' else\n" $i1_name $vec1 $sel1_name $sel0_name]
# 					append content [format "\t\t%s%s when %s = '1' and %s = '0' else\n" $i2_name $vec2 $sel1_name $sel0_name]
# 					append content [format "\t\t%s%s when %s = '1' and %s = '1' else '0';\n\n" $i3_name $vec3 $sel1_name $sel0_name]
# 				} else {
# 					append content [format "\t%s%s <= %s%s;\n" $out_name $vecO $i0_name $vec0]
# 				}
# 			} else {
# 				if {$sel0_name != "'0'"} {
# 					append content [format "\t%s%s <= %s%s when (%s = '1') else %s%s;\n" $out_name $vecO $i1_name $vec1 $sel0_name $i0_name $vec0]
# 				} else {
# 					append content [format "\t%s%s <= %s%s;\n" $out_name $vecO $i0_name $vec0]
# 				}
# 			}
# 		} else {
# 			catch {common::send_msg_id "bd2vhdl  jadro-3" "CRITICAL WARNING" " ${cell}: pin ${pin} odstranen, vystup neni pripojen!"}
# 			return [append content "\t-- ${pin} odstranen, vystup neni pripojen\n"]
# 		}
# 		
# 	}
# 	return $content
# }
# proc getDebounce { cell } {
# 	set width [get_property CONFIG.width [get_bd_cells -quiet $cell]]
# 
# 	set content {}
# 	set name [get_property NAME $cell]
# 	append content [format "\n\t-- %s\n" $name]
# 
# 	set pin [format "%s/tl_out" $cell]
# 	set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 	if {$net != ""} {
# 		set tl_out [get_property NAME $net]
# 
# 		set pin [format "%s/clk" $cell]
# 		set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 		if {$net != ""} {
# 			set clk [get_property NAME $net]
# 
# 			set pin [format "%s/tl_in" $cell]
# 			#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 			#set tl_in [get_property NAME $net]
# 			set tl_in [getInPinNet $cell $pin "\'0\'"]
# 
# 			append content [ format "\t%s : debounce\n\t\tgeneric map (\n\t\t\twidth => %s\n\t\t)\n\t\tport map (\n\t\t\tclk	=> %s,\n\t\t\ttl_in	=> %s,\n\t\t\ttl_out	=> %s\n\t\t);\n" $name $width $clk $tl_in $tl_out]
# 		} else {
# 			catch {common::send_msg_id "bd2vhdl  jadro-3" "CRITICAL WARNING" "${cell}: odstraneno, nejsou pripojene hodiny!"}
# 			return [append content "\t-- odstraneno, , nejsou pripojene hodiny!\n"]	
# 		}
# 	} else {
# 		catch {common::send_msg_id "bd2vhdl  jadro-3" "CRITICAL WARNING" "${cell}: odstraneno, vystup neni pripojen!"}
# 		return [append content "\t-- odstraneno, vystup neni pripojen\n"]
# 	}
# 	
# 	return $content
# }
# set debounce_component "\tcomponent debounce
# \t\tgeneric (
# \t\t\twidth: integer := 22
# \t\t);
# \t\tport (
# \t\t\tclk    : in  std_logic;
# \t\t\ttl_in  : in  std_logic;
# \t\t\ttl_out : out std_logic
# \t\t);
# \tend component;\n"
# proc getModule_ref { cell components component_name} {
# 	upvar $components comps
# 
# 	set inPins [lsort [get_bd_pins -quiet -of_objects [get_bd_cells $cell] -filter DIR==I]]
# 	array set inputBusPins [list]
# 	array set inputBitPins [list]
# 	sortPins $inPins inputBusPins inputBitPins
# 
# 	set outPins [lsort [get_bd_pins -quiet -of_objects [get_bd_cells $cell] -filter DIR==O]]
# 	array set outputBusPins [list]
# 	array set outputBitPins [list]
# 	sortPins $outPins outputBusPins outputBitPins
# 
# 	set content {}
# 	set name [get_property NAME $cell]
# 	append content [format "\n\t-- %s\n" $name]
# 
# 	set lines [list]
# 	foreach {pin net} [array2sortedList inputBitPins] {
#     	lappend lines [list "$pin" "in  std_logic;" "$net"]
#   	}
# 	foreach {pin busInfo} [array2sortedList inputBusPins] {
# 		lassign $busInfo stop start net
# 		if {$start>$stop} {
# 			lappend lines [list "$pin" "in  std_logic_vector($start downto $stop);" "$net"]
# 		} else {
# 			lappend lines [list "$pin" "in  std_logic_vector($start to $stop);" "$net"]
# 		}
#   	}
# 	foreach {pin net} [array2sortedList outputBitPins] {
#     	lappend lines [list "$pin" "out std_logic;" "$net"]
# 	}
# 	foreach {pin busInfo} [array2sortedList outputBusPins] {
# 		lassign $busInfo stop start net
# 		if {$start>$stop} {
# 			lappend lines [list "$pin"  "out std_logic_vector($start downto $stop);" "$net"]
# 		} else {
# 			lappend lines [list "$pin" "out std_logic_vector($start to $stop);" "$net"]
# 		}
# 	}
# 	# Detect maximum column width to align columns
# 	foreach line $lines {
# 		set width [string length [lindex $line 0]]
# 		if {![info exist maxWidth] || $maxWidth < $width} {
# 			set maxWidth $width
# 		}
# 	}
# 	set ports {}
# 	set port_map {}
# 	foreach line $lines {
# 		append ports [format "\n\t\t\t%-${maxWidth}s :  %-${maxWidth}s" [lindex $line 0] [lindex $line 1]]
# 		append port_map [format "\n\t\t\t%-${maxWidth}s =>  %-${maxWidth}s," [lindex $line 0] [lindex $line 2]]
# 	}
# 	# Remove the last semi-colon
#   	set index [string last {;} $ports]
#   	set ports [string replace $ports $index $index {}]
# 	# Remove the last ,
#   	set index [string last {,} $port_map]
#   	set port_map [string replace $port_map $index $index {}]
# 
# 	# nepridavat pokud uz tam ta komponenta je
# 	if {[string first $component_name $comps] < 0} {
# 		append comps "\tcomponent ${component_name}\n\t\tport ("
# 		append comps $ports
# 		append comps "\n\t\t);\n\tend component;\n\n"
# 	}
# 	append content "\tinst_${name} : ${component_name}\n"
# 	append content "\t\tport map ("
# 	append content $port_map
# 	append content "\n\t\t);\n"
# }
# proc getHier { cell debounce components modules} {
# 	global debounce_component
# 	upvar $components comps
# 	upvar $modules mods
# 	upvar $debounce debs
# 
# 	set inPins [lsort [get_bd_pins -quiet -of_objects [get_bd_cells $cell] -filter DIR==I]]
# 	array set inputBusPins [list]
# 	array set inputBitPins [list]
# 	sortPins $inPins inputBusPins inputBitPins
# 
# 	set outPins [lsort [get_bd_pins -quiet -of_objects [get_bd_cells $cell] -filter DIR==O]]
# 	array set outputBusPins [list]
# 	array set outputBitPins [list]
# 	sortPins $outPins outputBusPins outputBitPins
# 
# 	set content {}
# 	set name [get_property NAME $cell]
# 	append content [format "\n\t-- %s\n" $name]
# 
# 	set lines [list]
# 	foreach {pin net} [array2sortedList inputBitPins] {
#     	lappend lines [list "$pin" "in  std_logic;" "$net"]
#   	}
# 	foreach {pin busInfo} [array2sortedList inputBusPins] {
# 		lassign $busInfo stop start net
# 		if {$start>$stop} {
# 			lappend lines [list "$pin" "in  std_logic_vector($start downto $stop);" "$net"]
# 		} else {
# 			lappend lines [list "$pin" "in  std_logic_vector($start to $stop);" "$net"]
# 		}
#   	}
# 	foreach {pin net} [array2sortedList outputBitPins] {
#     	lappend lines [list "$pin" "out std_logic;" "$net"]
# 	}
# 	foreach {pin busInfo} [array2sortedList outputBusPins] {
# 		lassign $busInfo stop start net
# 		if {$start>$stop} {
# 			lappend lines [list "$pin"  "out std_logic_vector($start downto $stop);" "$net"]
# 		} else {
# 			lappend lines [list "$pin" "out std_logic_vector($start to $stop);" "$net"]
# 		}
# 	}
# 	# Detect maximum column width to align columns
# 	foreach line $lines {
# 		set width [string length [lindex $line 0]]
# 		if {![info exist maxWidth] || $maxWidth < $width} {
# 			set maxWidth $width
# 		}
# 	}
# 	set ports {}
# 	set port_map {}
# 	foreach line $lines {
# 		append ports [format "\n\t\t\t%-${maxWidth}s :  %-${maxWidth}s" [lindex $line 0] [lindex $line 1]]
# 		append port_map [format "\n\t\t\t%-${maxWidth}s =>  %-${maxWidth}s," [lindex $line 0] [lindex $line 2]]
# 	}
# 	# Remove the last semi-colon
#   	set index [string last {;} $ports]
#   	set ports [string replace $ports $index $index {}]
# 	# Remove the last ,
#   	set index [string last {,} $port_map]
#   	set port_map [string replace $port_map $index $index {}]
# 
# 	set filtr [format {PATH !~ "%s/.*/.*"} $cell]
# 	set nets [lsort [get_bd_nets -quiet -of_objects [get_bd_cells $cell] -regexp -filter $filtr]]
# 	array set busNets [list ]
# 	set bitNets [list]
# 	sortNets $nets busNets bitNets
# 
# 	set lines [list]
# 	# Process single bit nets
# 	foreach net [lsort -dictionary $bitNets] {
# 		lappend lines [list "$net" "  std_logic;"]
# 	}
# 	# Process bus nets
# 	foreach {net busInfo} [array2sortedList busNets] {
# 		lassign $busInfo stop start
# 		if {$start>$stop} {
# 		lappend lines [list "$net" "  std_logic_vector($start downto $stop);"]
# 		} else {
# 		lappend lines [list "$net" "  std_logic_vector($start to $stop);"]
# 		}
# 	}
# 
# 	# Detect maximum column width to align columns
# 	foreach line $lines {
# 		set width [string length [lindex $line 0]]
# 		if {![info exist maxWidth] || $maxWidth < $width} {
# 			set maxWidth $width
# 		}
# 	}
# 
# 	# Build the content of the stub:
# 	set signals {}
# 	foreach line $lines {
# 		append signals [format "\n\tsignal %-${maxWidth}s :  %-${maxWidth}s" [lindex $line 0] [lindex $line 1]]
# 	}
#   set ports2Signals {}
#     foreach net [lsort -dictionary $nets] {
#         set net_name [get_property NAME [get_bd_nets -quiet $net]]
#         set ports_b [get_bd_ports -quiet -of_objects [get_bd_nets -quiet $net]]
#         if {$ports == {}} {
#             break
#         }
#         foreach port [lsort -dictionary $ports_b] {
#             set port_name [get_property NAME [get_bd_pins -quiet $port]]
#             set dir [get_property DIR [get_bd_pins -quiet $port]]
#             if {$dir == "I"} {
#                 append ports2Signals "\t$net_name <= $port_name;\n"    
#             } else {
#                 append ports2Signals "\t$port_name <= $net_name;\n"
#             }
#         }
#     }
#   
# 	set debounce_inner false
#   	set components_inner {}
#   	set modules_inner {}
#   	set body [getIPs $cell debounce_inner components_inner modules_inner]
# 	if {$debounce_inner} {
# 		puts "######################################################################x"
# 		append components_inner $debounce_component
# 		set debs true
#     }
# 	
# 	set comp_name [string replace $cell 0 0 {}]
#     set comp_name [string map {/ _} $comp_name]
#     append comps "\tcomponent ${comp_name}\n\t\tport ("
#     append mods "\n\nlibrary IEEE;\nuse IEEE.std_logic_1164.all;\n\n"
#     append mods "entity ${comp_name} is\n\tport("
#     append mods $ports
#     append comps $ports
#     append mods "\n\t\t);\nend entity ${comp_name};\n\narchitecture Behavioral of ${comp_name} is\n"
#     append mods $components_inner
#     append mods $signals
#     append mods "\nbegin\n"
#     append mods $ports2Signals
#     append mods $body
#     append mods "\nend Behavioral;"
#     append comps "\n\t\t);\n\tend component;\n\n"
#     append content "\tinst_${comp_name} : ${comp_name}\n"
#     append content "\t\tport map ("
#     append content $port_map
#     append content "\n\t\t);\n"
#     append mods $modules_inner
# 
# 	return $content
# }
# proc getIPs { parent debounce components modules} {
#   upvar $debounce deb
#   upvar $components comps
#   upvar $modules mods
#   if {$parent == ""} {
# 	set cells [get_bd_cells]	  
#   } else {
# 	set filtr [format {PATH !~ "%s/.*/.*"} $parent]
# 	set cells [get_bd_cells -of_objects [get_bd_cells $parent] -regexp -filter $filtr]
#   }
#   
#   set content {}
#   foreach cell [lsort -dictionary $cells] {
# 	set type [get_property TYPE [get_bd_cells -quiet $cell]]
# 	set name [get_property NAME [get_bd_cells -quiet $cell]]
# 	set vlnv [get_property VLNV [get_bd_cells -quiet $cell]]
# 	if {$type == "ip"} {
# 		set vlnvs [split $vlnv ":"]
# 		if {[lindex $vlnvs 0] == "FIT"} {
# 		 	switch [lindex $vlnvs 2] {
# 				"or" {
# 					append content [getGate $cell "or"]
# 				}
# 				"and" {
# 					append content [getGate $cell "and"]
# 				}
# 				"xor" {
# 					append content [getGate $cell "xor"]
# 				}
# 				"buf" {
# 					append content [getBuf $cell false]
# 				}
# 				"inv" {
# 					append content [getBuf $cell true]
# 				}
# 				"gnd" {
# 					append content [getSource $cell false]
# 				}
# 				"vcc" {
# 					append content [getSource $cell true]
# 				}
# 				"splitter" {
# 					append content [getSplitter $cell]
# 				}
# 				"mux" {
# 					append content [getMux $cell]
# 				}
# 				"dff" {
# 					append content [getDff $cell]
# 				}
# 				"debounce" {
# 					append content [getDebounce $cell]
# 					set deb true
# 				}
# 			}
# 		} elseif {[lindex $vlnvs 0] == "xilinx.com" && [lindex $vlnvs 1] == "module_ref"} {
# 			append content [getModule_ref $cell comps [lindex $vlnvs 2]]
# 		}
# 			
# 	} elseif {$type == "hier"} {
# 		append content [getHier $cell deb comps mods]
# 	}
#   }
#   return $content
# }
# set debounce_code "\n\n\nlibrary IEEE;
# use IEEE.STD_LOGIC_1164.ALL;
# use ieee.std_logic_unsigned.all;
# 
# entity debounce is
#     generic (
# 		width: integer := 22 -- 100 MHz clock -> 4 - simulation (90 ns); 22 - synthesis (ca. 20 ms)
# 	);
#     port (
# 		clk : in STD_LOGIC;
#         tl_in : in STD_LOGIC;
#         tl_out : out STD_LOGIC
# 	);
# end entity debounce;
# 
# architecture Behavioral of debounce is
# 
# signal cnt       : std_logic_vector(width-1 downto 0) := (others => '0');
# signal reset, ce : std_logic := '0';
# signal tl_prev   : std_logic := '0';
# 
# 
# begin
# 
#     counter: process(clk) begin
#         if rising_edge(clk) then 
#             if (reset = '1') then
#                 cnt <= (others => '0');
#             elsif (ce = '1') then
#                 cnt <= cnt + 1;
#             end if;
#         end if;
#     end process;
# 
#     process(clk) begin
#         if rising_edge(clk) then
#             if (tl_prev /= tl_in) then
#                 reset <= '1';
#             else 
#                 reset <= '0';
#             end if;
#         end if;
#     end process;
#                 
#     process(clk) begin
#         if rising_edge(clk) then
#             if (reset = '1') then
#                 tl_prev <= tl_in;
#             end if;
#         end if;
#     end process;
#                 
#     process(clk) begin
#         if rising_edge(clk) then
#             if ((cnt(width-1) = '1') and (cnt(0) = '0')) then
#                 tl_out <= tl_prev;
#             end if;
#         end if;
#     end process;
#                 
# 
#     ce <= '0' when ((cnt(width-1) = '1') and (cnt(0) = '1'))
#                 else '1';
# 
# end Behavioral;\n"
# proc vhdlTemplate { module } {
#   global debounce_code
#   global debounce_component
# 
#   set inPorts [lsort [get_bd_ports -quiet -filter DIR==I]]
#   array set inputBusPorts [list ]
#   set inputBitPorts [list]
#   sortPorts $inPorts inputBusPorts inputBitPorts
# 
#   set outPorts [lsort [get_bd_ports -quiet -filter DIR==O]]
#   array set outputBusPorts [list ]
#   set outputBitPorts [list]
#   sortPorts $outPorts outputBusPorts outputBitPorts
# 
#   set inoutPorts [lsort [get_bd_ports -quiet -filter DIR==IO]]
#   array set inoutBusPorts [list ]
#   set inoutBitPorts [list]
#   sortPorts $inoutPorts inoutBusPorts inoutBitPorts
# 
#   set lines [list]
#   # Process input single bit ports
# #   lappend lines "-- Input Ports - Single Bit"
#   foreach port [lsort -dictionary $inputBitPorts] {
#     lappend lines [list "$port" "in  std_logic;"]
#   }
#   # Process input bus ports
# #   lappend lines "-- Input Ports - Busses"
#   foreach {port busInfo} [array2sortedList inputBusPorts] {
#     lassign $busInfo stop start
#     if {$start>$stop} {
#       lappend lines [list "$port" "in  std_logic_vector($start downto $stop);"]
#     } else {
#       lappend lines [list "$port" "in  std_logic_vector($start to $stop);"]
#     }
#   }
#   # Process output single bit ports
# #   lappend lines "-- Output Ports - Single Bit"
#   foreach port [lsort -dictionary $outputBitPorts] {
#     lappend lines [list "$port" "out std_logic;"]
#   }
#   # Process output bus ports
# #   lappend lines "-- Output Ports - Busses"
#   foreach {port busInfo} [array2sortedList outputBusPorts] {
#     lassign $busInfo stop start
#     if {$start>$stop} {
#       lappend lines [list "$port"  "out std_logic_vector($start downto $stop);"]
#     } else {
#       lappend lines [list "$port" "out std_logic_vector($start to $stop);"]
#     }
#   }
#   # Process inout single bit ports
# #   lappend lines "-- InOut Ports - Single Bit"
#   foreach port [lsort -dictionary $inoutBitPorts] {
#     lappend lines [list "$port" "inout  std_logic;"]
#   }
#   # Process inout bus ports
# #   lappend lines "-- InOut Ports - Busses"
#   foreach {port busInfo} [array2sortedList inoutBusPorts] {
#     lassign $busInfo stop start
#     if {$start>$stop} {
#       lappend lines [list "$port" "inout  std_logic_vector($start downto $stop);"]
#     } else {
#       lappend lines [list "$port" "inout  std_logic_vector($start to $stop);"]
#     }
#   }
# 
#   # Detect maximum column width to align columns
#   foreach line $lines {
#     if {[regexp {^\s*\-\-} $line]} {
#       # Skip lines that are just comments
#       continue
#     }
#     set width [string length [lindex $line 0]]
#     if {![info exist maxWidth] || $maxWidth < $width} {
#       set maxWidth $width
#     }
#   }
# 
#   # Build the content of the stub:
#   set content {}
#   foreach line $lines {
#     if {[regexp {^\s*\-\-} $line]} {
#       # Lines that are just comments
#       append content "\n      $line"
#       continue
#     }
#     append content [format "\n      %-${maxWidth}s :  %-${maxWidth}s" [lindex $line 0] [lindex $line 1]]
#   }
# 
#   # Remove the last semi-colon
#   set index [string last {;} $content]
#   set content [string replace $content $index $index {}]
# 
# 
#   set nets [lsort [get_bd_nets -quiet]]
#   array set busNets [list ]
#   set bitNets [list]
#   sortNets $nets busNets bitNets
# 
#   set lines [list]
#   # Process single bit nets
#   foreach net [lsort -dictionary $bitNets] {
#     lappend lines [list "$net" "  std_logic;"]
#   }
#   # Process bus nets
#   foreach {net busInfo} [array2sortedList busNets] {
#     lassign $busInfo stop start
#     if {$start>$stop} {
#       lappend lines [list "$net" "  std_logic_vector($start downto $stop);"]
#     } else {
#       lappend lines [list "$net" "  std_logic_vector($start to $stop);"]
#     }
#   }
# 
#   # Detect maximum column width to align columns
#   foreach line $lines {
#     if {[regexp {^\s*\-\-} $line]} {
#       # Skip lines that are just comments
#       continue
#     }
#     set width [string length [lindex $line 0]]
#     if {![info exist maxWidth] || $maxWidth < $width} {
#       set maxWidth $width
#     }
#   }
# 
#   # Build the content of the stub:
#   set signals {}
#   foreach line $lines {
#     if {[regexp {^\s*\-\-} $line]} {
#       # Lines that are just comments
#       append signals "\n      $line"
#       continue
#     }
#     append signals [format "\n      signal %-${maxWidth}s :  %-${maxWidth}s" [lindex $line 0] [lindex $line 1]]
#   }
#   set ports2Signals {}
#   foreach port [lsort -dictionary $inPorts] {
# 	set port_name [get_property NAME [get_bd_ports -quiet $port]]
# 	set net [get_bd_nets -quiet -of_objects [get_bd_ports -quiet $port]]
# 	if {$net != ""} {
# 		set net_name [get_property NAME $net]
# 		append ports2Signals "\t$net_name <= $port_name;\n"
# 	} else {
# 		catch {common::send_msg_id "bd2vhdl   port-2" "CRITICAL WARNING" "${port_name}: port nepripojen!"}
# 	}
#   }
#   foreach port [lsort -dictionary $outPorts] {
# 	set port_name [get_property NAME [get_bd_ports -quiet $port]]
# 	set net [get_bd_nets -quiet -of_objects [get_bd_ports -quiet $port]]
# 	if {$net != ""} {
# 		set net_name [get_property NAME $net]
# 		append ports2Signals "\t$port_name <= $net_name;\n"
# 	} else {
# 		catch {common::send_msg_id "bd2vhdl   port-3" "CRITICAL WARNING" "${port_name}: port nepripojen!"}
# 	}
#   }
#   set debounce false
#   set components {}
#   set modules {}
#   set body [getIPs "" debounce components modules]
#   
#   if {$debounce} {
# 	  append components $debounce_component
#   }
#   # Now that the last semi-colon is replaced, add the header and footer
#   set content [format "library IEEE;
# use IEEE.std_logic_1164.all;
# 
# library xil_defaultlib;
# use xil_defaultlib.all;
# 
# entity ${module}_vhdl is
#    port (%s
#    );
# end entity ${module}_vhdl;
# 
# architecture Behavioral of ${module}_vhdl is
# %s
# %s
# begin
# %s
# %s
# end Behavioral;" $content $components $signals $ports2Signals $body]
# 
#   append content $modules
# 
#   if {$debounce} {
# 	  append content $debounce_code
#   }
# 
#   return $content
# }
# set name [current_bd_design -quiet]
# if {$name == ""} {
#     common::send_msg_id -continue "bd2vhdl design-2" "ERROR" "Je potreba otevrit block design!"
# 	return
# }
# save_bd_design $name
# validate_bd_design -force
CRITICAL WARNING: [BD 41-1348] Reset pin /counter_vhdl_0/reset (associated clock /counter_vhdl_0/clk) is connected to asynchronous reset source /reset.
This may prevent design from meeting timing. Please add Processor System Reset module to create a reset that is synchronous to the associated clock source /debounce_0/tl_out.
# if { [llength [get_bd_ports]] > 0 } {
# 	puts "\n##### ${name} #####"
# 	set content [vhdlTemplate $name]
# 	set PROJ_DIR [get_property DIRECTORY [current_project]]
# 	set PROJ_DIR [file normalize $PROJ_DIR]
# 	set tmp_dir [file join $PROJ_DIR "tmp"]
# 	file mkdir $tmp_dir
# 	set filename "${name}.vhd"
# 	set filename_path [file join $tmp_dir $filename]
# 	# Save the template
# 	set mode {w}
# 	puts "\nCreating VHDL for Design $name in [file normalize $filename]\n"
# 	set tfh [open $filename_path $mode]
# 	puts $tfh $content
# 	close $tfh
# 
# 	import_files -force -norecurse $filename_path
# 	common::send_msg_id "bd2vhdl design-1" "INFO" "${name}_vhdl.vhd vygenerovan"
# } else {
# 	common::send_msg_id -continue "bd2vhdl design-3" "ERROR" "${name} neobsahuje zadne porty!"
# }

##### counter_full #####

Creating VHDL for Design counter_full in X:/SAP/lab5/counter_full.vhd

INFO: [bd2vhdl design-1] counter_full_vhdl.vhd vygenerovan
update_compile_order -fileset sources_1
set_property top counter_full_vhdl [current_fileset]
update_compile_order -fileset sources_1
source X:/SAP/lib_SAP_2022_02_02/gen_bd_vhdl.tcl
# proc sortPorts { ports &bus &bit } {
# 
#   upvar ${&bus} busPorts
#   upvar ${&bit} bitPorts
#   array set busPorts [list]
#   set bitPorts [list]
# 
#   foreach port $ports {
#     set name [get_property -quiet NAME [get_bd_ports $port]]
# 	set busStart [get_property -quiet LEFT [get_bd_ports $port]]
#     set busStop  [get_property -quiet RIGHT  [get_bd_ports $port]]
#     if {$busStart != {}} {
#     #   set busWidth [get_property -quiet BUS_WIDTH [get_ports $port]]
#       array set busPorts [list $name [list $busStop $busStart]]
#     } else {
#       lappend bitPorts $name
#     }
#   }
#   return 0
# }
# proc sortPins { pins &bus &bit } {
# 
#   upvar ${&bus} busPins
#   upvar ${&bit} bitPins
#   array set busPins [list]
#   array set bitPins [list]
# 
#   foreach pin $pins {
#     set name [get_property -quiet NAME [get_bd_pins $pin]]
# 	set dir [get_property -quiet DIR [get_bd_pins $pin]]
# 	set busStart [get_property -quiet LEFT [get_bd_pins $pin]]
#     set busStop  [get_property -quiet RIGHT  [get_bd_pins $pin]]
# 	set net [get_bd_nets -quiet -of_objects [get_bd_pins $pin]]
# 	if {$net != ""} {
# 		set net_name [get_property -quiet NAME $net]
# 	} else {
# 		if {$dir == "I"} {
# 			if {$busStart != {}} {
# 				set net_name "(others => '0')"
# 				catch {common::send_msg_id "bd2vhdl    pin-2" "CRITICAL WARNING" "${pin}: nepripojen, bude pripojen k '0'"}
# 			} else {
# 				set net_name "'0'"
# 				catch {common::send_msg_id "bd2vhdl    pin-2" "CRITICAL WARNING" "${pin}: nepripojen, bude pripojen k '0'"}
# 			}
# 		} else {
# 			set net_name "open"
# 			catch {common::send_msg_id "bd2vhdl    pin-3" "CRITICAL WARNING" "${pin}: pin odstranen, vystup neni pripojen!"}
# 		}
# 	}
# 	if {$busStart != {}} {
# 		array set busPins [list $name [list $busStop $busStart $net_name]]
# 	} else {
# 		array set bitPins [list $name $net_name]
# 	}
#   }
#   return 0
# }
# proc sortNets { nets &bus &bit } {
# 
#   upvar ${&bus} busNets
#   upvar ${&bit} bitNets
#   array set busNets [list ]
#   set bitNets [list]
# 
#   foreach net $nets {
#     set name [get_property -quiet NAME [get_bd_nets $net]]
# 	set pin [lindex [get_bd_pins -of_objects [get_bd_nets $net]] 0]
# 	set busStart [get_property -quiet LEFT [get_bd_pins $pin]]
#     set busStop  [get_property -quiet RIGHT  [get_bd_pins $pin]]
#     if {$busStart != {}} {
#     #   set busWidth [get_property -quiet BUS_WIDTH [get_ports $port]]
#       array set busNets [list $name [list $busStop $busStart]]
#     } else {
#       lappend bitNets $name
#     }
#   }
#   return 0
# }
# proc array2sortedList { &ar } {
# 
#   upvar ${&ar} ar
#   set sortedList [list]
#   foreach key [lsort -dictionary [array names ar]] {
#     lappend sortedList $key
#     lappend sortedList $ar($key)
#   }
#   return $sortedList
# }
# proc getInPinNet { cell pin default_value} {
# 	set pin [get_bd_pins -quiet $pin]
# 	set net [get_bd_nets -quiet -of_objects $pin]
# 	if {$net == ""} {
# 		catch {common::send_msg_id "bd2vhdl    pin-2" "CRITICAL WARNING" "${pin} nepripojen, bude pripojeno k $default_value"}
# 		set net_name $default_value
# 	} else {
# 		set net_name [get_property NAME $net]
# 	}
# 	return $net_name
# }
# proc getGate { cell  function} {
# 	set inputs_count [get_property CONFIG.Inputs [get_bd_cells -quiet $cell]]
# 	set content {}
# 	set prom {}
# 	set name [get_property NAME $cell]
# 	append content [format "\n\t-- %s\n" $name]
# 	for {set i 0} { $i < $inputs_count } { incr i } {
# 		set cfg [format "CONFIG.I%u_Inverted" $i]
# 		set pin [format "%s/I%u" $cell $i]
# 		set inverted [get_property $cfg  [get_bd_cells -quiet $cell]]
# 		#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 		set net_name [getInPinNet $cell $pin "\'0\'"]
# 		#set net_name [get_property NAME $net]
# 		if {$inverted == "true"} {
# 			append prom [format "not(%s)" $net_name]
# 		} else {
# 			append prom [format "%s" $net_name]
# 		}
# 		if {$i < ($inputs_count-1)} {
# 			append prom [format " %s " $function]
# 		}
# 	}
# 	set cfg [format "CONFIG.O_Inverted" $i]
# 	set pin [format "%s/O" $cell]
# 	set inverted [get_property $cfg  [get_bd_cells -quiet $cell]]
# 	set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 	if {$net != ""} {
# 		set out_name [get_property NAME $net]
# 		if {$inverted == "true"} {
# 			append content [format "\t%s <= not(%s);\n" $out_name $prom];	
# 		} else {
# 			append content [format "\t%s <= %s;\n" $out_name $prom];
# 		}
# 		return $content
# 	} else {
# 		catch {common::send_msg_id "bd2vhdl  jadro-3" "CRITICAL WARNING" "${cell}: odstraneno, vystup neni pripojen!"}
# 		return [append content "\t-- odstraneno, vystup neni pripojen\n"]
# 	}
# }
# proc getBuf { cell  function } {
# 	set content {}
# 	set name [get_property NAME $cell]
# 	append content [format "\n\t-- %s\n" $name]
# 
# 	set pin [format "%s/I" $cell]
# 	#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 	#set net_name [get_property NAME $net]
# 	set net_name [getInPinNet $cell $pin "\'0\'"]
# 
# 	set pin [format "%s/O" $cell]
# 	set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 	if {$net != ""} {
# 		set out_name [get_property NAME $net]
# 		if {$function == true} {
# 			append content [format "\t%s <= not(%s);\n" $out_name $net_name];	
# 		} else {
# 			append content  [format "\t%s <= %s;\n" $out_name $net_name];
# 		}
# 		return $content
# 	} else {
# 		catch {common::send_msg_id "bd2vhdl  jadro-3" "CRITICAL WARNING" "${cell}: odstraneno, vystup neni pripojen!"}
# 		return [append content "\t-- odstraneno, vystup neni pripojen\n"]
# 	}
# }
# proc getSource { cell  function } {
# 	set content {}
# 	set name [get_property NAME $cell]
# 	append content [format "\n\t-- %s\n" $name]
# 
# 	set pin [format "%s/O" $cell]
# 	set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 	if {$net != ""} {
# 		set out_name [get_property NAME $net]
# 		if {$function == true} {
# 			append content [format "\t%s <= '1';\n" $out_name];	
# 		} else {
# 			append content [format "\t%s <= '0';\n" $out_name];
# 		}
# 		return $content
# 	} else {
# 		catch {common::send_msg_id "bd2vhdl  jadro-3" "CRITICAL WARNING" "${cell}: odstraneno, vystup neni pripojen!"}
# 		return [append content "\t-- odstraneno, vystup neni pripojen\n"]
# 	}
# }
# proc getSplitter { cell } {
# 	set width [get_property CONFIG.WIDTH [get_bd_cells -quiet $cell]]
# 	set pin [format "%s/I" $cell]
# 	set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 	if {$net != ""} {
# 		set in_name [get_property NAME $net]
# 		set content {}
# 		set name [get_property NAME $cell]
# 		append content [format "\n\t-- %s\n" $name]
# 		for {set i 0} { $i < $width } { incr i } {
# 			set pin [format "%s/O%u" $cell $i]
# 			set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 			if {$net != ""} {
# 				set net_name [get_property NAME $net]
# 				append content [format "\t%s <= %s(%u);\n" $net_name $in_name $i]
# 			} else {
# 				catch {common::send_msg_id "bd2vhdl  jadro-3" "CRITICAL WARNING" "${cell}: ${pin} odstranen, vystup neni pripojen!"}
# 			}
# 		}
# 	} else {
# 		set content {}
# 		set name [get_property NAME $cell]
# 		append content [format "\n\t-- %s\n" $name]
# 		for {set i 0} { $i < $width } { incr i } {
# 			set pin [format "%s/O%u" $cell $i]
# 			set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 			if {$net != ""} {
# 				set net_name [get_property NAME $net]
# 				append content [format "\t%s <= \'0\';\n" $net_name $i]
# 				catch {common::send_msg_id "bd2vhdl  jadro-2" "CRITICAL WARNING" "${cell} nepripojen vstup, ${net_name} bude pripojeno k \'0\'"}
# 			} else {
# 				catch {common::send_msg_id "bd2vhdl  jadro-3" "CRITICAL WARNING" "${cell}: ${pin} odstranen, vystup neni pripojen!"}
# 			}
# 		}
# 	}
# 	return $content
# }
# proc getDff { cell } {
# 	set ce [get_property CONFIG.CE [get_bd_cells -quiet $cell]]
# 	set reset [get_property CONFIG.Reset [get_bd_cells -quiet $cell]]
# 
# 	set content {}
# 	set name [get_property NAME $cell]
# 	append content [format "\n\t-- %s\n" $name]
# 
# 	set pin [format "%s/q" $cell]
# 	set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 	if {$net != ""} {
# 		set out_name [get_property NAME $net]
# 
# 		set pin [format "%s/clk" $cell]
# 		set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 		if {$net == ""} {
# 			catch {common::send_msg_id "bd2vhdl  jadro-3" "CRITICAL WARNING" "${cell}: odstraneno, nejsou pripojene hodiny!"}
# 			return [append content "\t-- odstraneno, , nejsou pripojene hodiny!\n"]
# 		}
# 		#set clk_name [get_property NAME $net]
# 		set clk_name [getInPinNet $cell $pin "\'0\'"]
# 
# 		set pin [format "%s/d" $cell]
# 		#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 		#set in_name [get_property NAME $net]
# 		set in_name [getInPinNet $cell $pin "\'0\'"]
# 
# 		if {$ce == "true"} {
# 			set pin [format "%s/ce" $cell]
# 			#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 			#set ce_name [get_property NAME $net]
# 			set ce_name [getInPinNet $cell $pin "\'1\'"]
# 		}
# 
# 		if {$reset == "true"} {
# 			set pin [format "%s/reset" $cell]
# 			#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 			#set reset_name [get_property NAME $net]
# 			set reset_name [getInPinNet $cell $pin "\'0\'"]
# 		}
# 
# 		append content [format "\tprocess (%s)\n\tbegin\n" $clk_name]
# 		append content [format "\t\tif rising_edge(%s) then\n" $clk_name]
# 		if {$reset == "true"} {
# 			append content [format "\t\t\tif %s = '1' then\n\t\t\t\t%s <= '0';\n\t\t\tels" $reset_name $out_name]
# 		} else {
# 			append content "\t\t\t"
# 		}
# 
# 		if {$ce == "true"} {
# 			append content [format "if %s = '1' then\n" $ce_name]
# 			append content [format "\t\t\t\t%s <= %s;\n" $out_name $in_name]
# 			append content "\t\t\tend if;\n"
# 		} else {
# 			if {$reset == "true"} {
# 				append content [format "e\n\t\t\t\t%s <= %s;\n" $out_name $in_name]
# 				append content "\t\t\tend if;\n"
# 			} else {
# 				append content [format "%s <= %s;\n" $out_name $in_name]
# 			}
# 		}
# 
# 		append content "\t\tend if;\n\tend process;\n";
# 	} else {
# 		catch {common::send_msg_id "bd2vhdl jadro-3" "CRITICAL WARNING" "${cell}: odstraneno, vystup neni pripojen!"}
# 		return [append content "\t-- odstraneno, vystup neni pripojen\n"]
# 	}
# 	return $content
# }
# proc getMux { cell } {
# 	set ports_count [get_property CONFIG.Data_Ports [get_bd_cells -quiet $cell]]
# 	set width [get_property CONFIG.WIDTH [get_bd_cells -quiet $cell]]
# 	set i0_bus [get_property CONFIG.I0_BUS [get_bd_cells -quiet $cell]]
# 	set i1_bus [get_property CONFIG.I1_BUS [get_bd_cells -quiet $cell]]
# 	set i2_bus [get_property CONFIG.I2_BUS [get_bd_cells -quiet $cell]]
# 	set i3_bus [get_property CONFIG.I3_BUS [get_bd_cells -quiet $cell]]
# 	set o_bus [get_property CONFIG.O_BUS [get_bd_cells -quiet $cell]]
# 
# 	set content {}
# 	set name [get_property NAME $cell]
# 	append content [format "\n\t-- %s\n" $name]
# 
# 	for {set i 0} { $i < $width } { incr i } {
# 		if {$o_bus == "true"} {
# 			set pin [format "%s/O" $cell]
# 			set vecO [format "(%u)" $i]
# 		} else {
# 			set pin [format "%s/O_%u" $cell $i]
# 			set vecO ""
# 		}
# 		set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 		if {$net != ""} {
# 			set out_name [get_property NAME $net]
# 
# 			if {$i0_bus == "true"} {
# 				set pin [format "%s/I0" $cell]
# 				set vec0 [format "(%u)" $i]
# 			} else {
# 				set pin [format "%s/I0_%u" $cell $i]
# 				set vec0 ""
# 			}
# 			#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 			#set i0_name [get_property NAME $net]
# 			set i0_name [getInPinNet $cell $pin "\'0\'"]
# 			if {$i0_name == "'0'"} {
# 				set vec0 ""
# 			}
# 
# 			if {$i1_bus == "true"} {
# 				set pin [format "%s/I1" $cell]
# 				set vec1 [format "(%u)" $i]
# 			} else {
# 				set pin [format "%s/I1_%u" $cell $i]
# 				set vec1 ""
# 			}
# 			#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 			#set i1_name [get_property NAME $net]
# 			set i1_name [getInPinNet $cell $pin "\'0\'"]
# 			if {$i1_name == "'0'"} {
# 				set vec1 ""
# 			}
# 
# 			set pin [format "%s/Sel0" $cell]
# 			#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 			#set sel0_name [get_property NAME $net]
# 			set sel0_name [getInPinNet $cell $pin "\'0\'"]
# 
# 			if {$ports_count > 2} {
# 				if {$i2_bus == "true"} {
# 					set pin [format "%s/I2" $cell]
# 					set vec2 [format "(%u)" $i]
# 				} else {
# 					set pin [format "%s/I2_%u" $cell $i]
# 					set vec2 ""
# 				}
# 				#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 				#set i2_name [get_property NAME $net]
# 				set i2_name [getInPinNet $cell $pin "\'0\'"]
# 				if {$i2_name == "'0'"} {
# 					set vec2 ""
# 				}
# 
# 				if {$i3_bus == "true"} {
# 					set pin [format "%s/I3" $cell]
# 					set vec3 [format "(%u)" $i]
# 				} else {
# 					set pin [format "%s/I3_%u" $cell $i]
# 					set vec3 ""
# 				}
# 				#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 				#set i3_name [get_property NAME $net]
# 				set i3_name [getInPinNet $cell $pin "\'0\'"]
# 				if {$i3_name == "'0'"} {
# 					set vec3 ""
# 				}
# 
# 				set pin [format "%s/Sel1" $cell]
# 				#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 				#set sel1_name [get_property NAME $net]
# 				set sel1_name [getInPinNet $cell $pin "\'0\'"]
# 				
# 				if {$sel0_name != "'0'" && $sel1_name != "'0'"} {
# 					append content [format "\t%s%s <= %s%s when %s = '0' and %s = '0' else\n" $out_name $vecO $i0_name $vec0 $sel1_name $sel0_name]
# 					append content [format "\t\t%s%s when %s = '0' and %s = '1' else\n" $i1_name $vec1 $sel1_name $sel0_name]
# 					append content [format "\t\t%s%s when %s = '1' and %s = '0' else\n" $i2_name $vec2 $sel1_name $sel0_name]
# 					append content [format "\t\t%s%s when %s = '1' and %s = '1' else '0';\n\n" $i3_name $vec3 $sel1_name $sel0_name]
# 				} else {
# 					append content [format "\t%s%s <= %s%s;\n" $out_name $vecO $i0_name $vec0]
# 				}
# 			} else {
# 				if {$sel0_name != "'0'"} {
# 					append content [format "\t%s%s <= %s%s when (%s = '1') else %s%s;\n" $out_name $vecO $i1_name $vec1 $sel0_name $i0_name $vec0]
# 				} else {
# 					append content [format "\t%s%s <= %s%s;\n" $out_name $vecO $i0_name $vec0]
# 				}
# 			}
# 		} else {
# 			catch {common::send_msg_id "bd2vhdl  jadro-3" "CRITICAL WARNING" " ${cell}: pin ${pin} odstranen, vystup neni pripojen!"}
# 			return [append content "\t-- ${pin} odstranen, vystup neni pripojen\n"]
# 		}
# 		
# 	}
# 	return $content
# }
# proc getDebounce { cell } {
# 	set width [get_property CONFIG.width [get_bd_cells -quiet $cell]]
# 
# 	set content {}
# 	set name [get_property NAME $cell]
# 	append content [format "\n\t-- %s\n" $name]
# 
# 	set pin [format "%s/tl_out" $cell]
# 	set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 	if {$net != ""} {
# 		set tl_out [get_property NAME $net]
# 
# 		set pin [format "%s/clk" $cell]
# 		set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 		if {$net != ""} {
# 			set clk [get_property NAME $net]
# 
# 			set pin [format "%s/tl_in" $cell]
# 			#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 			#set tl_in [get_property NAME $net]
# 			set tl_in [getInPinNet $cell $pin "\'0\'"]
# 
# 			append content [ format "\t%s : debounce\n\t\tgeneric map (\n\t\t\twidth => %s\n\t\t)\n\t\tport map (\n\t\t\tclk	=> %s,\n\t\t\ttl_in	=> %s,\n\t\t\ttl_out	=> %s\n\t\t);\n" $name $width $clk $tl_in $tl_out]
# 		} else {
# 			catch {common::send_msg_id "bd2vhdl  jadro-3" "CRITICAL WARNING" "${cell}: odstraneno, nejsou pripojene hodiny!"}
# 			return [append content "\t-- odstraneno, , nejsou pripojene hodiny!\n"]	
# 		}
# 	} else {
# 		catch {common::send_msg_id "bd2vhdl  jadro-3" "CRITICAL WARNING" "${cell}: odstraneno, vystup neni pripojen!"}
# 		return [append content "\t-- odstraneno, vystup neni pripojen\n"]
# 	}
# 	
# 	return $content
# }
# set debounce_component "\tcomponent debounce
# \t\tgeneric (
# \t\t\twidth: integer := 22
# \t\t);
# \t\tport (
# \t\t\tclk    : in  std_logic;
# \t\t\ttl_in  : in  std_logic;
# \t\t\ttl_out : out std_logic
# \t\t);
# \tend component;\n"
# proc getModule_ref { cell components component_name} {
# 	upvar $components comps
# 
# 	set inPins [lsort [get_bd_pins -quiet -of_objects [get_bd_cells $cell] -filter DIR==I]]
# 	array set inputBusPins [list]
# 	array set inputBitPins [list]
# 	sortPins $inPins inputBusPins inputBitPins
# 
# 	set outPins [lsort [get_bd_pins -quiet -of_objects [get_bd_cells $cell] -filter DIR==O]]
# 	array set outputBusPins [list]
# 	array set outputBitPins [list]
# 	sortPins $outPins outputBusPins outputBitPins
# 
# 	set content {}
# 	set name [get_property NAME $cell]
# 	append content [format "\n\t-- %s\n" $name]
# 
# 	set lines [list]
# 	foreach {pin net} [array2sortedList inputBitPins] {
#     	lappend lines [list "$pin" "in  std_logic;" "$net"]
#   	}
# 	foreach {pin busInfo} [array2sortedList inputBusPins] {
# 		lassign $busInfo stop start net
# 		if {$start>$stop} {
# 			lappend lines [list "$pin" "in  std_logic_vector($start downto $stop);" "$net"]
# 		} else {
# 			lappend lines [list "$pin" "in  std_logic_vector($start to $stop);" "$net"]
# 		}
#   	}
# 	foreach {pin net} [array2sortedList outputBitPins] {
#     	lappend lines [list "$pin" "out std_logic;" "$net"]
# 	}
# 	foreach {pin busInfo} [array2sortedList outputBusPins] {
# 		lassign $busInfo stop start net
# 		if {$start>$stop} {
# 			lappend lines [list "$pin"  "out std_logic_vector($start downto $stop);" "$net"]
# 		} else {
# 			lappend lines [list "$pin" "out std_logic_vector($start to $stop);" "$net"]
# 		}
# 	}
# 	# Detect maximum column width to align columns
# 	foreach line $lines {
# 		set width [string length [lindex $line 0]]
# 		if {![info exist maxWidth] || $maxWidth < $width} {
# 			set maxWidth $width
# 		}
# 	}
# 	set ports {}
# 	set port_map {}
# 	foreach line $lines {
# 		append ports [format "\n\t\t\t%-${maxWidth}s :  %-${maxWidth}s" [lindex $line 0] [lindex $line 1]]
# 		append port_map [format "\n\t\t\t%-${maxWidth}s =>  %-${maxWidth}s," [lindex $line 0] [lindex $line 2]]
# 	}
# 	# Remove the last semi-colon
#   	set index [string last {;} $ports]
#   	set ports [string replace $ports $index $index {}]
# 	# Remove the last ,
#   	set index [string last {,} $port_map]
#   	set port_map [string replace $port_map $index $index {}]
# 
# 	# nepridavat pokud uz tam ta komponenta je
# 	if {[string first $component_name $comps] < 0} {
# 		append comps "\tcomponent ${component_name}\n\t\tport ("
# 		append comps $ports
# 		append comps "\n\t\t);\n\tend component;\n\n"
# 	}
# 	append content "\tinst_${name} : ${component_name}\n"
# 	append content "\t\tport map ("
# 	append content $port_map
# 	append content "\n\t\t);\n"
# }
# proc getHier { cell debounce components modules} {
# 	global debounce_component
# 	upvar $components comps
# 	upvar $modules mods
# 	upvar $debounce debs
# 
# 	set inPins [lsort [get_bd_pins -quiet -of_objects [get_bd_cells $cell] -filter DIR==I]]
# 	array set inputBusPins [list]
# 	array set inputBitPins [list]
# 	sortPins $inPins inputBusPins inputBitPins
# 
# 	set outPins [lsort [get_bd_pins -quiet -of_objects [get_bd_cells $cell] -filter DIR==O]]
# 	array set outputBusPins [list]
# 	array set outputBitPins [list]
# 	sortPins $outPins outputBusPins outputBitPins
# 
# 	set content {}
# 	set name [get_property NAME $cell]
# 	append content [format "\n\t-- %s\n" $name]
# 
# 	set lines [list]
# 	foreach {pin net} [array2sortedList inputBitPins] {
#     	lappend lines [list "$pin" "in  std_logic;" "$net"]
#   	}
# 	foreach {pin busInfo} [array2sortedList inputBusPins] {
# 		lassign $busInfo stop start net
# 		if {$start>$stop} {
# 			lappend lines [list "$pin" "in  std_logic_vector($start downto $stop);" "$net"]
# 		} else {
# 			lappend lines [list "$pin" "in  std_logic_vector($start to $stop);" "$net"]
# 		}
#   	}
# 	foreach {pin net} [array2sortedList outputBitPins] {
#     	lappend lines [list "$pin" "out std_logic;" "$net"]
# 	}
# 	foreach {pin busInfo} [array2sortedList outputBusPins] {
# 		lassign $busInfo stop start net
# 		if {$start>$stop} {
# 			lappend lines [list "$pin"  "out std_logic_vector($start downto $stop);" "$net"]
# 		} else {
# 			lappend lines [list "$pin" "out std_logic_vector($start to $stop);" "$net"]
# 		}
# 	}
# 	# Detect maximum column width to align columns
# 	foreach line $lines {
# 		set width [string length [lindex $line 0]]
# 		if {![info exist maxWidth] || $maxWidth < $width} {
# 			set maxWidth $width
# 		}
# 	}
# 	set ports {}
# 	set port_map {}
# 	foreach line $lines {
# 		append ports [format "\n\t\t\t%-${maxWidth}s :  %-${maxWidth}s" [lindex $line 0] [lindex $line 1]]
# 		append port_map [format "\n\t\t\t%-${maxWidth}s =>  %-${maxWidth}s," [lindex $line 0] [lindex $line 2]]
# 	}
# 	# Remove the last semi-colon
#   	set index [string last {;} $ports]
#   	set ports [string replace $ports $index $index {}]
# 	# Remove the last ,
#   	set index [string last {,} $port_map]
#   	set port_map [string replace $port_map $index $index {}]
# 
# 	set filtr [format {PATH !~ "%s/.*/.*"} $cell]
# 	set nets [lsort [get_bd_nets -quiet -of_objects [get_bd_cells $cell] -regexp -filter $filtr]]
# 	array set busNets [list ]
# 	set bitNets [list]
# 	sortNets $nets busNets bitNets
# 
# 	set lines [list]
# 	# Process single bit nets
# 	foreach net [lsort -dictionary $bitNets] {
# 		lappend lines [list "$net" "  std_logic;"]
# 	}
# 	# Process bus nets
# 	foreach {net busInfo} [array2sortedList busNets] {
# 		lassign $busInfo stop start
# 		if {$start>$stop} {
# 		lappend lines [list "$net" "  std_logic_vector($start downto $stop);"]
# 		} else {
# 		lappend lines [list "$net" "  std_logic_vector($start to $stop);"]
# 		}
# 	}
# 
# 	# Detect maximum column width to align columns
# 	foreach line $lines {
# 		set width [string length [lindex $line 0]]
# 		if {![info exist maxWidth] || $maxWidth < $width} {
# 			set maxWidth $width
# 		}
# 	}
# 
# 	# Build the content of the stub:
# 	set signals {}
# 	foreach line $lines {
# 		append signals [format "\n\tsignal %-${maxWidth}s :  %-${maxWidth}s" [lindex $line 0] [lindex $line 1]]
# 	}
#   set ports2Signals {}
#     foreach net [lsort -dictionary $nets] {
#         set net_name [get_property NAME [get_bd_nets -quiet $net]]
#         set ports_b [get_bd_ports -quiet -of_objects [get_bd_nets -quiet $net]]
#         if {$ports == {}} {
#             break
#         }
#         foreach port [lsort -dictionary $ports_b] {
#             set port_name [get_property NAME [get_bd_pins -quiet $port]]
#             set dir [get_property DIR [get_bd_pins -quiet $port]]
#             if {$dir == "I"} {
#                 append ports2Signals "\t$net_name <= $port_name;\n"    
#             } else {
#                 append ports2Signals "\t$port_name <= $net_name;\n"
#             }
#         }
#     }
#   
# 	set debounce_inner false
#   	set components_inner {}
#   	set modules_inner {}
#   	set body [getIPs $cell debounce_inner components_inner modules_inner]
# 	if {$debounce_inner} {
# 		puts "######################################################################x"
# 		append components_inner $debounce_component
# 		set debs true
#     }
# 	
# 	set comp_name [string replace $cell 0 0 {}]
#     set comp_name [string map {/ _} $comp_name]
#     append comps "\tcomponent ${comp_name}\n\t\tport ("
#     append mods "\n\nlibrary IEEE;\nuse IEEE.std_logic_1164.all;\n\n"
#     append mods "entity ${comp_name} is\n\tport("
#     append mods $ports
#     append comps $ports
#     append mods "\n\t\t);\nend entity ${comp_name};\n\narchitecture Behavioral of ${comp_name} is\n"
#     append mods $components_inner
#     append mods $signals
#     append mods "\nbegin\n"
#     append mods $ports2Signals
#     append mods $body
#     append mods "\nend Behavioral;"
#     append comps "\n\t\t);\n\tend component;\n\n"
#     append content "\tinst_${comp_name} : ${comp_name}\n"
#     append content "\t\tport map ("
#     append content $port_map
#     append content "\n\t\t);\n"
#     append mods $modules_inner
# 
# 	return $content
# }
# proc getIPs { parent debounce components modules} {
#   upvar $debounce deb
#   upvar $components comps
#   upvar $modules mods
#   if {$parent == ""} {
# 	set cells [get_bd_cells]	  
#   } else {
# 	set filtr [format {PATH !~ "%s/.*/.*"} $parent]
# 	set cells [get_bd_cells -of_objects [get_bd_cells $parent] -regexp -filter $filtr]
#   }
#   
#   set content {}
#   foreach cell [lsort -dictionary $cells] {
# 	set type [get_property TYPE [get_bd_cells -quiet $cell]]
# 	set name [get_property NAME [get_bd_cells -quiet $cell]]
# 	set vlnv [get_property VLNV [get_bd_cells -quiet $cell]]
# 	if {$type == "ip"} {
# 		set vlnvs [split $vlnv ":"]
# 		if {[lindex $vlnvs 0] == "FIT"} {
# 		 	switch [lindex $vlnvs 2] {
# 				"or" {
# 					append content [getGate $cell "or"]
# 				}
# 				"and" {
# 					append content [getGate $cell "and"]
# 				}
# 				"xor" {
# 					append content [getGate $cell "xor"]
# 				}
# 				"buf" {
# 					append content [getBuf $cell false]
# 				}
# 				"inv" {
# 					append content [getBuf $cell true]
# 				}
# 				"gnd" {
# 					append content [getSource $cell false]
# 				}
# 				"vcc" {
# 					append content [getSource $cell true]
# 				}
# 				"splitter" {
# 					append content [getSplitter $cell]
# 				}
# 				"mux" {
# 					append content [getMux $cell]
# 				}
# 				"dff" {
# 					append content [getDff $cell]
# 				}
# 				"debounce" {
# 					append content [getDebounce $cell]
# 					set deb true
# 				}
# 			}
# 		} elseif {[lindex $vlnvs 0] == "xilinx.com" && [lindex $vlnvs 1] == "module_ref"} {
# 			append content [getModule_ref $cell comps [lindex $vlnvs 2]]
# 		}
# 			
# 	} elseif {$type == "hier"} {
# 		append content [getHier $cell deb comps mods]
# 	}
#   }
#   return $content
# }
# set debounce_code "\n\n\nlibrary IEEE;
# use IEEE.STD_LOGIC_1164.ALL;
# use ieee.std_logic_unsigned.all;
# 
# entity debounce is
#     generic (
# 		width: integer := 22 -- 100 MHz clock -> 4 - simulation (90 ns); 22 - synthesis (ca. 20 ms)
# 	);
#     port (
# 		clk : in STD_LOGIC;
#         tl_in : in STD_LOGIC;
#         tl_out : out STD_LOGIC
# 	);
# end entity debounce;
# 
# architecture Behavioral of debounce is
# 
# signal cnt       : std_logic_vector(width-1 downto 0) := (others => '0');
# signal reset, ce : std_logic := '0';
# signal tl_prev   : std_logic := '0';
# 
# 
# begin
# 
#     counter: process(clk) begin
#         if rising_edge(clk) then 
#             if (reset = '1') then
#                 cnt <= (others => '0');
#             elsif (ce = '1') then
#                 cnt <= cnt + 1;
#             end if;
#         end if;
#     end process;
# 
#     process(clk) begin
#         if rising_edge(clk) then
#             if (tl_prev /= tl_in) then
#                 reset <= '1';
#             else 
#                 reset <= '0';
#             end if;
#         end if;
#     end process;
#                 
#     process(clk) begin
#         if rising_edge(clk) then
#             if (reset = '1') then
#                 tl_prev <= tl_in;
#             end if;
#         end if;
#     end process;
#                 
#     process(clk) begin
#         if rising_edge(clk) then
#             if ((cnt(width-1) = '1') and (cnt(0) = '0')) then
#                 tl_out <= tl_prev;
#             end if;
#         end if;
#     end process;
#                 
# 
#     ce <= '0' when ((cnt(width-1) = '1') and (cnt(0) = '1'))
#                 else '1';
# 
# end Behavioral;\n"
# proc vhdlTemplate { module } {
#   global debounce_code
#   global debounce_component
# 
#   set inPorts [lsort [get_bd_ports -quiet -filter DIR==I]]
#   array set inputBusPorts [list ]
#   set inputBitPorts [list]
#   sortPorts $inPorts inputBusPorts inputBitPorts
# 
#   set outPorts [lsort [get_bd_ports -quiet -filter DIR==O]]
#   array set outputBusPorts [list ]
#   set outputBitPorts [list]
#   sortPorts $outPorts outputBusPorts outputBitPorts
# 
#   set inoutPorts [lsort [get_bd_ports -quiet -filter DIR==IO]]
#   array set inoutBusPorts [list ]
#   set inoutBitPorts [list]
#   sortPorts $inoutPorts inoutBusPorts inoutBitPorts
# 
#   set lines [list]
#   # Process input single bit ports
# #   lappend lines "-- Input Ports - Single Bit"
#   foreach port [lsort -dictionary $inputBitPorts] {
#     lappend lines [list "$port" "in  std_logic;"]
#   }
#   # Process input bus ports
# #   lappend lines "-- Input Ports - Busses"
#   foreach {port busInfo} [array2sortedList inputBusPorts] {
#     lassign $busInfo stop start
#     if {$start>$stop} {
#       lappend lines [list "$port" "in  std_logic_vector($start downto $stop);"]
#     } else {
#       lappend lines [list "$port" "in  std_logic_vector($start to $stop);"]
#     }
#   }
#   # Process output single bit ports
# #   lappend lines "-- Output Ports - Single Bit"
#   foreach port [lsort -dictionary $outputBitPorts] {
#     lappend lines [list "$port" "out std_logic;"]
#   }
#   # Process output bus ports
# #   lappend lines "-- Output Ports - Busses"
#   foreach {port busInfo} [array2sortedList outputBusPorts] {
#     lassign $busInfo stop start
#     if {$start>$stop} {
#       lappend lines [list "$port"  "out std_logic_vector($start downto $stop);"]
#     } else {
#       lappend lines [list "$port" "out std_logic_vector($start to $stop);"]
#     }
#   }
#   # Process inout single bit ports
# #   lappend lines "-- InOut Ports - Single Bit"
#   foreach port [lsort -dictionary $inoutBitPorts] {
#     lappend lines [list "$port" "inout  std_logic;"]
#   }
#   # Process inout bus ports
# #   lappend lines "-- InOut Ports - Busses"
#   foreach {port busInfo} [array2sortedList inoutBusPorts] {
#     lassign $busInfo stop start
#     if {$start>$stop} {
#       lappend lines [list "$port" "inout  std_logic_vector($start downto $stop);"]
#     } else {
#       lappend lines [list "$port" "inout  std_logic_vector($start to $stop);"]
#     }
#   }
# 
#   # Detect maximum column width to align columns
#   foreach line $lines {
#     if {[regexp {^\s*\-\-} $line]} {
#       # Skip lines that are just comments
#       continue
#     }
#     set width [string length [lindex $line 0]]
#     if {![info exist maxWidth] || $maxWidth < $width} {
#       set maxWidth $width
#     }
#   }
# 
#   # Build the content of the stub:
#   set content {}
#   foreach line $lines {
#     if {[regexp {^\s*\-\-} $line]} {
#       # Lines that are just comments
#       append content "\n      $line"
#       continue
#     }
#     append content [format "\n      %-${maxWidth}s :  %-${maxWidth}s" [lindex $line 0] [lindex $line 1]]
#   }
# 
#   # Remove the last semi-colon
#   set index [string last {;} $content]
#   set content [string replace $content $index $index {}]
# 
# 
#   set nets [lsort [get_bd_nets -quiet]]
#   array set busNets [list ]
#   set bitNets [list]
#   sortNets $nets busNets bitNets
# 
#   set lines [list]
#   # Process single bit nets
#   foreach net [lsort -dictionary $bitNets] {
#     lappend lines [list "$net" "  std_logic;"]
#   }
#   # Process bus nets
#   foreach {net busInfo} [array2sortedList busNets] {
#     lassign $busInfo stop start
#     if {$start>$stop} {
#       lappend lines [list "$net" "  std_logic_vector($start downto $stop);"]
#     } else {
#       lappend lines [list "$net" "  std_logic_vector($start to $stop);"]
#     }
#   }
# 
#   # Detect maximum column width to align columns
#   foreach line $lines {
#     if {[regexp {^\s*\-\-} $line]} {
#       # Skip lines that are just comments
#       continue
#     }
#     set width [string length [lindex $line 0]]
#     if {![info exist maxWidth] || $maxWidth < $width} {
#       set maxWidth $width
#     }
#   }
# 
#   # Build the content of the stub:
#   set signals {}
#   foreach line $lines {
#     if {[regexp {^\s*\-\-} $line]} {
#       # Lines that are just comments
#       append signals "\n      $line"
#       continue
#     }
#     append signals [format "\n      signal %-${maxWidth}s :  %-${maxWidth}s" [lindex $line 0] [lindex $line 1]]
#   }
#   set ports2Signals {}
#   foreach port [lsort -dictionary $inPorts] {
# 	set port_name [get_property NAME [get_bd_ports -quiet $port]]
# 	set net [get_bd_nets -quiet -of_objects [get_bd_ports -quiet $port]]
# 	if {$net != ""} {
# 		set net_name [get_property NAME $net]
# 		append ports2Signals "\t$net_name <= $port_name;\n"
# 	} else {
# 		catch {common::send_msg_id "bd2vhdl   port-2" "CRITICAL WARNING" "${port_name}: port nepripojen!"}
# 	}
#   }
#   foreach port [lsort -dictionary $outPorts] {
# 	set port_name [get_property NAME [get_bd_ports -quiet $port]]
# 	set net [get_bd_nets -quiet -of_objects [get_bd_ports -quiet $port]]
# 	if {$net != ""} {
# 		set net_name [get_property NAME $net]
# 		append ports2Signals "\t$port_name <= $net_name;\n"
# 	} else {
# 		catch {common::send_msg_id "bd2vhdl   port-3" "CRITICAL WARNING" "${port_name}: port nepripojen!"}
# 	}
#   }
#   set debounce false
#   set components {}
#   set modules {}
#   set body [getIPs "" debounce components modules]
#   
#   if {$debounce} {
# 	  append components $debounce_component
#   }
#   # Now that the last semi-colon is replaced, add the header and footer
#   set content [format "library IEEE;
# use IEEE.std_logic_1164.all;
# 
# library xil_defaultlib;
# use xil_defaultlib.all;
# 
# entity ${module}_vhdl is
#    port (%s
#    );
# end entity ${module}_vhdl;
# 
# architecture Behavioral of ${module}_vhdl is
# %s
# %s
# begin
# %s
# %s
# end Behavioral;" $content $components $signals $ports2Signals $body]
# 
#   append content $modules
# 
#   if {$debounce} {
# 	  append content $debounce_code
#   }
# 
#   return $content
# }
# set name [current_bd_design -quiet]
# if {$name == ""} {
#     common::send_msg_id -continue "bd2vhdl design-2" "ERROR" "Je potreba otevrit block design!"
# 	return
# }
# save_bd_design $name
Wrote  : <X:/SAP/lab5/lab5.srcs/sources_1/bd/counter_full/counter_full.bd> 
# validate_bd_design -force
CRITICAL WARNING: [BD 41-1348] Reset pin /counter_vhdl_0/reset (associated clock /counter_vhdl_0/clk) is connected to asynchronous reset source /reset.
This may prevent design from meeting timing. Please add Processor System Reset module to create a reset that is synchronous to the associated clock source /debounce_0/tl_out.
# if { [llength [get_bd_ports]] > 0 } {
# 	puts "\n##### ${name} #####"
# 	set content [vhdlTemplate $name]
# 	set PROJ_DIR [get_property DIRECTORY [current_project]]
# 	set PROJ_DIR [file normalize $PROJ_DIR]
# 	set tmp_dir [file join $PROJ_DIR "tmp"]
# 	file mkdir $tmp_dir
# 	set filename "${name}.vhd"
# 	set filename_path [file join $tmp_dir $filename]
# 	# Save the template
# 	set mode {w}
# 	puts "\nCreating VHDL for Design $name in [file normalize $filename]\n"
# 	set tfh [open $filename_path $mode]
# 	puts $tfh $content
# 	close $tfh
# 
# 	import_files -force -norecurse $filename_path
# 	common::send_msg_id "bd2vhdl design-1" "INFO" "${name}_vhdl.vhd vygenerovan"
# } else {
# 	common::send_msg_id -continue "bd2vhdl design-3" "ERROR" "${name} neobsahuje zadne porty!"
# }

##### counter_full #####

Creating VHDL for Design counter_full in X:/SAP/lab5/counter_full.vhd

INFO: [bd2vhdl design-1] counter_full_vhdl.vhd vygenerovan
launch_runs synth_1 -jobs 4
[Tue Mar 15 08:28:57 2022] Launched synth_1...
Run output will be captured here: X:/SAP/lab5/lab5.runs/synth_1/runme.log
source X:/SAP/lib_SAP_2022_02_02/gen_bd_vhdl.tcl
# proc sortPorts { ports &bus &bit } {
# 
#   upvar ${&bus} busPorts
#   upvar ${&bit} bitPorts
#   array set busPorts [list]
#   set bitPorts [list]
# 
#   foreach port $ports {
#     set name [get_property -quiet NAME [get_bd_ports $port]]
# 	set busStart [get_property -quiet LEFT [get_bd_ports $port]]
#     set busStop  [get_property -quiet RIGHT  [get_bd_ports $port]]
#     if {$busStart != {}} {
#     #   set busWidth [get_property -quiet BUS_WIDTH [get_ports $port]]
#       array set busPorts [list $name [list $busStop $busStart]]
#     } else {
#       lappend bitPorts $name
#     }
#   }
#   return 0
# }
# proc sortPins { pins &bus &bit } {
# 
#   upvar ${&bus} busPins
#   upvar ${&bit} bitPins
#   array set busPins [list]
#   array set bitPins [list]
# 
#   foreach pin $pins {
#     set name [get_property -quiet NAME [get_bd_pins $pin]]
# 	set dir [get_property -quiet DIR [get_bd_pins $pin]]
# 	set busStart [get_property -quiet LEFT [get_bd_pins $pin]]
#     set busStop  [get_property -quiet RIGHT  [get_bd_pins $pin]]
# 	set net [get_bd_nets -quiet -of_objects [get_bd_pins $pin]]
# 	if {$net != ""} {
# 		set net_name [get_property -quiet NAME $net]
# 	} else {
# 		if {$dir == "I"} {
# 			if {$busStart != {}} {
# 				set net_name "(others => '0')"
# 				catch {common::send_msg_id "bd2vhdl    pin-2" "CRITICAL WARNING" "${pin}: nepripojen, bude pripojen k '0'"}
# 			} else {
# 				set net_name "'0'"
# 				catch {common::send_msg_id "bd2vhdl    pin-2" "CRITICAL WARNING" "${pin}: nepripojen, bude pripojen k '0'"}
# 			}
# 		} else {
# 			set net_name "open"
# 			catch {common::send_msg_id "bd2vhdl    pin-3" "CRITICAL WARNING" "${pin}: pin odstranen, vystup neni pripojen!"}
# 		}
# 	}
# 	if {$busStart != {}} {
# 		array set busPins [list $name [list $busStop $busStart $net_name]]
# 	} else {
# 		array set bitPins [list $name $net_name]
# 	}
#   }
#   return 0
# }
# proc sortNets { nets &bus &bit } {
# 
#   upvar ${&bus} busNets
#   upvar ${&bit} bitNets
#   array set busNets [list ]
#   set bitNets [list]
# 
#   foreach net $nets {
#     set name [get_property -quiet NAME [get_bd_nets $net]]
# 	set pin [lindex [get_bd_pins -of_objects [get_bd_nets $net]] 0]
# 	set busStart [get_property -quiet LEFT [get_bd_pins $pin]]
#     set busStop  [get_property -quiet RIGHT  [get_bd_pins $pin]]
#     if {$busStart != {}} {
#     #   set busWidth [get_property -quiet BUS_WIDTH [get_ports $port]]
#       array set busNets [list $name [list $busStop $busStart]]
#     } else {
#       lappend bitNets $name
#     }
#   }
#   return 0
# }
# proc array2sortedList { &ar } {
# 
#   upvar ${&ar} ar
#   set sortedList [list]
#   foreach key [lsort -dictionary [array names ar]] {
#     lappend sortedList $key
#     lappend sortedList $ar($key)
#   }
#   return $sortedList
# }
# proc getInPinNet { cell pin default_value} {
# 	set pin [get_bd_pins -quiet $pin]
# 	set net [get_bd_nets -quiet -of_objects $pin]
# 	if {$net == ""} {
# 		catch {common::send_msg_id "bd2vhdl    pin-2" "CRITICAL WARNING" "${pin} nepripojen, bude pripojeno k $default_value"}
# 		set net_name $default_value
# 	} else {
# 		set net_name [get_property NAME $net]
# 	}
# 	return $net_name
# }
# proc getGate { cell  function} {
# 	set inputs_count [get_property CONFIG.Inputs [get_bd_cells -quiet $cell]]
# 	set content {}
# 	set prom {}
# 	set name [get_property NAME $cell]
# 	append content [format "\n\t-- %s\n" $name]
# 	for {set i 0} { $i < $inputs_count } { incr i } {
# 		set cfg [format "CONFIG.I%u_Inverted" $i]
# 		set pin [format "%s/I%u" $cell $i]
# 		set inverted [get_property $cfg  [get_bd_cells -quiet $cell]]
# 		#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 		set net_name [getInPinNet $cell $pin "\'0\'"]
# 		#set net_name [get_property NAME $net]
# 		if {$inverted == "true"} {
# 			append prom [format "not(%s)" $net_name]
# 		} else {
# 			append prom [format "%s" $net_name]
# 		}
# 		if {$i < ($inputs_count-1)} {
# 			append prom [format " %s " $function]
# 		}
# 	}
# 	set cfg [format "CONFIG.O_Inverted" $i]
# 	set pin [format "%s/O" $cell]
# 	set inverted [get_property $cfg  [get_bd_cells -quiet $cell]]
# 	set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 	if {$net != ""} {
# 		set out_name [get_property NAME $net]
# 		if {$inverted == "true"} {
# 			append content [format "\t%s <= not(%s);\n" $out_name $prom];	
# 		} else {
# 			append content [format "\t%s <= %s;\n" $out_name $prom];
# 		}
# 		return $content
# 	} else {
# 		catch {common::send_msg_id "bd2vhdl  jadro-3" "CRITICAL WARNING" "${cell}: odstraneno, vystup neni pripojen!"}
# 		return [append content "\t-- odstraneno, vystup neni pripojen\n"]
# 	}
# }
# proc getBuf { cell  function } {
# 	set content {}
# 	set name [get_property NAME $cell]
# 	append content [format "\n\t-- %s\n" $name]
# 
# 	set pin [format "%s/I" $cell]
# 	#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 	#set net_name [get_property NAME $net]
# 	set net_name [getInPinNet $cell $pin "\'0\'"]
# 
# 	set pin [format "%s/O" $cell]
# 	set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 	if {$net != ""} {
# 		set out_name [get_property NAME $net]
# 		if {$function == true} {
# 			append content [format "\t%s <= not(%s);\n" $out_name $net_name];	
# 		} else {
# 			append content  [format "\t%s <= %s;\n" $out_name $net_name];
# 		}
# 		return $content
# 	} else {
# 		catch {common::send_msg_id "bd2vhdl  jadro-3" "CRITICAL WARNING" "${cell}: odstraneno, vystup neni pripojen!"}
# 		return [append content "\t-- odstraneno, vystup neni pripojen\n"]
# 	}
# }
# proc getSource { cell  function } {
# 	set content {}
# 	set name [get_property NAME $cell]
# 	append content [format "\n\t-- %s\n" $name]
# 
# 	set pin [format "%s/O" $cell]
# 	set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 	if {$net != ""} {
# 		set out_name [get_property NAME $net]
# 		if {$function == true} {
# 			append content [format "\t%s <= '1';\n" $out_name];	
# 		} else {
# 			append content [format "\t%s <= '0';\n" $out_name];
# 		}
# 		return $content
# 	} else {
# 		catch {common::send_msg_id "bd2vhdl  jadro-3" "CRITICAL WARNING" "${cell}: odstraneno, vystup neni pripojen!"}
# 		return [append content "\t-- odstraneno, vystup neni pripojen\n"]
# 	}
# }
# proc getSplitter { cell } {
# 	set width [get_property CONFIG.WIDTH [get_bd_cells -quiet $cell]]
# 	set pin [format "%s/I" $cell]
# 	set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 	if {$net != ""} {
# 		set in_name [get_property NAME $net]
# 		set content {}
# 		set name [get_property NAME $cell]
# 		append content [format "\n\t-- %s\n" $name]
# 		for {set i 0} { $i < $width } { incr i } {
# 			set pin [format "%s/O%u" $cell $i]
# 			set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 			if {$net != ""} {
# 				set net_name [get_property NAME $net]
# 				append content [format "\t%s <= %s(%u);\n" $net_name $in_name $i]
# 			} else {
# 				catch {common::send_msg_id "bd2vhdl  jadro-3" "CRITICAL WARNING" "${cell}: ${pin} odstranen, vystup neni pripojen!"}
# 			}
# 		}
# 	} else {
# 		set content {}
# 		set name [get_property NAME $cell]
# 		append content [format "\n\t-- %s\n" $name]
# 		for {set i 0} { $i < $width } { incr i } {
# 			set pin [format "%s/O%u" $cell $i]
# 			set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 			if {$net != ""} {
# 				set net_name [get_property NAME $net]
# 				append content [format "\t%s <= \'0\';\n" $net_name $i]
# 				catch {common::send_msg_id "bd2vhdl  jadro-2" "CRITICAL WARNING" "${cell} nepripojen vstup, ${net_name} bude pripojeno k \'0\'"}
# 			} else {
# 				catch {common::send_msg_id "bd2vhdl  jadro-3" "CRITICAL WARNING" "${cell}: ${pin} odstranen, vystup neni pripojen!"}
# 			}
# 		}
# 	}
# 	return $content
# }
# proc getDff { cell } {
# 	set ce [get_property CONFIG.CE [get_bd_cells -quiet $cell]]
# 	set reset [get_property CONFIG.Reset [get_bd_cells -quiet $cell]]
# 
# 	set content {}
# 	set name [get_property NAME $cell]
# 	append content [format "\n\t-- %s\n" $name]
# 
# 	set pin [format "%s/q" $cell]
# 	set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 	if {$net != ""} {
# 		set out_name [get_property NAME $net]
# 
# 		set pin [format "%s/clk" $cell]
# 		set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 		if {$net == ""} {
# 			catch {common::send_msg_id "bd2vhdl  jadro-3" "CRITICAL WARNING" "${cell}: odstraneno, nejsou pripojene hodiny!"}
# 			return [append content "\t-- odstraneno, , nejsou pripojene hodiny!\n"]
# 		}
# 		#set clk_name [get_property NAME $net]
# 		set clk_name [getInPinNet $cell $pin "\'0\'"]
# 
# 		set pin [format "%s/d" $cell]
# 		#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 		#set in_name [get_property NAME $net]
# 		set in_name [getInPinNet $cell $pin "\'0\'"]
# 
# 		if {$ce == "true"} {
# 			set pin [format "%s/ce" $cell]
# 			#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 			#set ce_name [get_property NAME $net]
# 			set ce_name [getInPinNet $cell $pin "\'1\'"]
# 		}
# 
# 		if {$reset == "true"} {
# 			set pin [format "%s/reset" $cell]
# 			#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 			#set reset_name [get_property NAME $net]
# 			set reset_name [getInPinNet $cell $pin "\'0\'"]
# 		}
# 
# 		append content [format "\tprocess (%s)\n\tbegin\n" $clk_name]
# 		append content [format "\t\tif rising_edge(%s) then\n" $clk_name]
# 		if {$reset == "true"} {
# 			append content [format "\t\t\tif %s = '1' then\n\t\t\t\t%s <= '0';\n\t\t\tels" $reset_name $out_name]
# 		} else {
# 			append content "\t\t\t"
# 		}
# 
# 		if {$ce == "true"} {
# 			append content [format "if %s = '1' then\n" $ce_name]
# 			append content [format "\t\t\t\t%s <= %s;\n" $out_name $in_name]
# 			append content "\t\t\tend if;\n"
# 		} else {
# 			if {$reset == "true"} {
# 				append content [format "e\n\t\t\t\t%s <= %s;\n" $out_name $in_name]
# 				append content "\t\t\tend if;\n"
# 			} else {
# 				append content [format "%s <= %s;\n" $out_name $in_name]
# 			}
# 		}
# 
# 		append content "\t\tend if;\n\tend process;\n";
# 	} else {
# 		catch {common::send_msg_id "bd2vhdl jadro-3" "CRITICAL WARNING" "${cell}: odstraneno, vystup neni pripojen!"}
# 		return [append content "\t-- odstraneno, vystup neni pripojen\n"]
# 	}
# 	return $content
# }
# proc getMux { cell } {
# 	set ports_count [get_property CONFIG.Data_Ports [get_bd_cells -quiet $cell]]
# 	set width [get_property CONFIG.WIDTH [get_bd_cells -quiet $cell]]
# 	set i0_bus [get_property CONFIG.I0_BUS [get_bd_cells -quiet $cell]]
# 	set i1_bus [get_property CONFIG.I1_BUS [get_bd_cells -quiet $cell]]
# 	set i2_bus [get_property CONFIG.I2_BUS [get_bd_cells -quiet $cell]]
# 	set i3_bus [get_property CONFIG.I3_BUS [get_bd_cells -quiet $cell]]
# 	set o_bus [get_property CONFIG.O_BUS [get_bd_cells -quiet $cell]]
# 
# 	set content {}
# 	set name [get_property NAME $cell]
# 	append content [format "\n\t-- %s\n" $name]
# 
# 	for {set i 0} { $i < $width } { incr i } {
# 		if {$o_bus == "true"} {
# 			set pin [format "%s/O" $cell]
# 			set vecO [format "(%u)" $i]
# 		} else {
# 			set pin [format "%s/O_%u" $cell $i]
# 			set vecO ""
# 		}
# 		set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 		if {$net != ""} {
# 			set out_name [get_property NAME $net]
# 
# 			if {$i0_bus == "true"} {
# 				set pin [format "%s/I0" $cell]
# 				set vec0 [format "(%u)" $i]
# 			} else {
# 				set pin [format "%s/I0_%u" $cell $i]
# 				set vec0 ""
# 			}
# 			#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 			#set i0_name [get_property NAME $net]
# 			set i0_name [getInPinNet $cell $pin "\'0\'"]
# 			if {$i0_name == "'0'"} {
# 				set vec0 ""
# 			}
# 
# 			if {$i1_bus == "true"} {
# 				set pin [format "%s/I1" $cell]
# 				set vec1 [format "(%u)" $i]
# 			} else {
# 				set pin [format "%s/I1_%u" $cell $i]
# 				set vec1 ""
# 			}
# 			#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 			#set i1_name [get_property NAME $net]
# 			set i1_name [getInPinNet $cell $pin "\'0\'"]
# 			if {$i1_name == "'0'"} {
# 				set vec1 ""
# 			}
# 
# 			set pin [format "%s/Sel0" $cell]
# 			#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 			#set sel0_name [get_property NAME $net]
# 			set sel0_name [getInPinNet $cell $pin "\'0\'"]
# 
# 			if {$ports_count > 2} {
# 				if {$i2_bus == "true"} {
# 					set pin [format "%s/I2" $cell]
# 					set vec2 [format "(%u)" $i]
# 				} else {
# 					set pin [format "%s/I2_%u" $cell $i]
# 					set vec2 ""
# 				}
# 				#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 				#set i2_name [get_property NAME $net]
# 				set i2_name [getInPinNet $cell $pin "\'0\'"]
# 				if {$i2_name == "'0'"} {
# 					set vec2 ""
# 				}
# 
# 				if {$i3_bus == "true"} {
# 					set pin [format "%s/I3" $cell]
# 					set vec3 [format "(%u)" $i]
# 				} else {
# 					set pin [format "%s/I3_%u" $cell $i]
# 					set vec3 ""
# 				}
# 				#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 				#set i3_name [get_property NAME $net]
# 				set i3_name [getInPinNet $cell $pin "\'0\'"]
# 				if {$i3_name == "'0'"} {
# 					set vec3 ""
# 				}
# 
# 				set pin [format "%s/Sel1" $cell]
# 				#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 				#set sel1_name [get_property NAME $net]
# 				set sel1_name [getInPinNet $cell $pin "\'0\'"]
# 				
# 				if {$sel0_name != "'0'" && $sel1_name != "'0'"} {
# 					append content [format "\t%s%s <= %s%s when %s = '0' and %s = '0' else\n" $out_name $vecO $i0_name $vec0 $sel1_name $sel0_name]
# 					append content [format "\t\t%s%s when %s = '0' and %s = '1' else\n" $i1_name $vec1 $sel1_name $sel0_name]
# 					append content [format "\t\t%s%s when %s = '1' and %s = '0' else\n" $i2_name $vec2 $sel1_name $sel0_name]
# 					append content [format "\t\t%s%s when %s = '1' and %s = '1' else '0';\n\n" $i3_name $vec3 $sel1_name $sel0_name]
# 				} else {
# 					append content [format "\t%s%s <= %s%s;\n" $out_name $vecO $i0_name $vec0]
# 				}
# 			} else {
# 				if {$sel0_name != "'0'"} {
# 					append content [format "\t%s%s <= %s%s when (%s = '1') else %s%s;\n" $out_name $vecO $i1_name $vec1 $sel0_name $i0_name $vec0]
# 				} else {
# 					append content [format "\t%s%s <= %s%s;\n" $out_name $vecO $i0_name $vec0]
# 				}
# 			}
# 		} else {
# 			catch {common::send_msg_id "bd2vhdl  jadro-3" "CRITICAL WARNING" " ${cell}: pin ${pin} odstranen, vystup neni pripojen!"}
# 			return [append content "\t-- ${pin} odstranen, vystup neni pripojen\n"]
# 		}
# 		
# 	}
# 	return $content
# }
# proc getDebounce { cell } {
# 	set width [get_property CONFIG.width [get_bd_cells -quiet $cell]]
# 
# 	set content {}
# 	set name [get_property NAME $cell]
# 	append content [format "\n\t-- %s\n" $name]
# 
# 	set pin [format "%s/tl_out" $cell]
# 	set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 	if {$net != ""} {
# 		set tl_out [get_property NAME $net]
# 
# 		set pin [format "%s/clk" $cell]
# 		set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 		if {$net != ""} {
# 			set clk [get_property NAME $net]
# 
# 			set pin [format "%s/tl_in" $cell]
# 			#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 			#set tl_in [get_property NAME $net]
# 			set tl_in [getInPinNet $cell $pin "\'0\'"]
# 
# 			append content [ format "\t%s : debounce\n\t\tgeneric map (\n\t\t\twidth => %s\n\t\t)\n\t\tport map (\n\t\t\tclk	=> %s,\n\t\t\ttl_in	=> %s,\n\t\t\ttl_out	=> %s\n\t\t);\n" $name $width $clk $tl_in $tl_out]
# 		} else {
# 			catch {common::send_msg_id "bd2vhdl  jadro-3" "CRITICAL WARNING" "${cell}: odstraneno, nejsou pripojene hodiny!"}
# 			return [append content "\t-- odstraneno, , nejsou pripojene hodiny!\n"]	
# 		}
# 	} else {
# 		catch {common::send_msg_id "bd2vhdl  jadro-3" "CRITICAL WARNING" "${cell}: odstraneno, vystup neni pripojen!"}
# 		return [append content "\t-- odstraneno, vystup neni pripojen\n"]
# 	}
# 	
# 	return $content
# }
# set debounce_component "\tcomponent debounce
# \t\tgeneric (
# \t\t\twidth: integer := 22
# \t\t);
# \t\tport (
# \t\t\tclk    : in  std_logic;
# \t\t\ttl_in  : in  std_logic;
# \t\t\ttl_out : out std_logic
# \t\t);
# \tend component;\n"
# proc getModule_ref { cell components component_name} {
# 	upvar $components comps
# 
# 	set inPins [lsort [get_bd_pins -quiet -of_objects [get_bd_cells $cell] -filter DIR==I]]
# 	array set inputBusPins [list]
# 	array set inputBitPins [list]
# 	sortPins $inPins inputBusPins inputBitPins
# 
# 	set outPins [lsort [get_bd_pins -quiet -of_objects [get_bd_cells $cell] -filter DIR==O]]
# 	array set outputBusPins [list]
# 	array set outputBitPins [list]
# 	sortPins $outPins outputBusPins outputBitPins
# 
# 	set content {}
# 	set name [get_property NAME $cell]
# 	append content [format "\n\t-- %s\n" $name]
# 
# 	set lines [list]
# 	foreach {pin net} [array2sortedList inputBitPins] {
#     	lappend lines [list "$pin" "in  std_logic;" "$net"]
#   	}
# 	foreach {pin busInfo} [array2sortedList inputBusPins] {
# 		lassign $busInfo stop start net
# 		if {$start>$stop} {
# 			lappend lines [list "$pin" "in  std_logic_vector($start downto $stop);" "$net"]
# 		} else {
# 			lappend lines [list "$pin" "in  std_logic_vector($start to $stop);" "$net"]
# 		}
#   	}
# 	foreach {pin net} [array2sortedList outputBitPins] {
#     	lappend lines [list "$pin" "out std_logic;" "$net"]
# 	}
# 	foreach {pin busInfo} [array2sortedList outputBusPins] {
# 		lassign $busInfo stop start net
# 		if {$start>$stop} {
# 			lappend lines [list "$pin"  "out std_logic_vector($start downto $stop);" "$net"]
# 		} else {
# 			lappend lines [list "$pin" "out std_logic_vector($start to $stop);" "$net"]
# 		}
# 	}
# 	# Detect maximum column width to align columns
# 	foreach line $lines {
# 		set width [string length [lindex $line 0]]
# 		if {![info exist maxWidth] || $maxWidth < $width} {
# 			set maxWidth $width
# 		}
# 	}
# 	set ports {}
# 	set port_map {}
# 	foreach line $lines {
# 		append ports [format "\n\t\t\t%-${maxWidth}s :  %-${maxWidth}s" [lindex $line 0] [lindex $line 1]]
# 		append port_map [format "\n\t\t\t%-${maxWidth}s =>  %-${maxWidth}s," [lindex $line 0] [lindex $line 2]]
# 	}
# 	# Remove the last semi-colon
#   	set index [string last {;} $ports]
#   	set ports [string replace $ports $index $index {}]
# 	# Remove the last ,
#   	set index [string last {,} $port_map]
#   	set port_map [string replace $port_map $index $index {}]
# 
# 	# nepridavat pokud uz tam ta komponenta je
# 	if {[string first $component_name $comps] < 0} {
# 		append comps "\tcomponent ${component_name}\n\t\tport ("
# 		append comps $ports
# 		append comps "\n\t\t);\n\tend component;\n\n"
# 	}
# 	append content "\tinst_${name} : ${component_name}\n"
# 	append content "\t\tport map ("
# 	append content $port_map
# 	append content "\n\t\t);\n"
# }
# proc getHier { cell debounce components modules} {
# 	global debounce_component
# 	upvar $components comps
# 	upvar $modules mods
# 	upvar $debounce debs
# 
# 	set inPins [lsort [get_bd_pins -quiet -of_objects [get_bd_cells $cell] -filter DIR==I]]
# 	array set inputBusPins [list]
# 	array set inputBitPins [list]
# 	sortPins $inPins inputBusPins inputBitPins
# 
# 	set outPins [lsort [get_bd_pins -quiet -of_objects [get_bd_cells $cell] -filter DIR==O]]
# 	array set outputBusPins [list]
# 	array set outputBitPins [list]
# 	sortPins $outPins outputBusPins outputBitPins
# 
# 	set content {}
# 	set name [get_property NAME $cell]
# 	append content [format "\n\t-- %s\n" $name]
# 
# 	set lines [list]
# 	foreach {pin net} [array2sortedList inputBitPins] {
#     	lappend lines [list "$pin" "in  std_logic;" "$net"]
#   	}
# 	foreach {pin busInfo} [array2sortedList inputBusPins] {
# 		lassign $busInfo stop start net
# 		if {$start>$stop} {
# 			lappend lines [list "$pin" "in  std_logic_vector($start downto $stop);" "$net"]
# 		} else {
# 			lappend lines [list "$pin" "in  std_logic_vector($start to $stop);" "$net"]
# 		}
#   	}
# 	foreach {pin net} [array2sortedList outputBitPins] {
#     	lappend lines [list "$pin" "out std_logic;" "$net"]
# 	}
# 	foreach {pin busInfo} [array2sortedList outputBusPins] {
# 		lassign $busInfo stop start net
# 		if {$start>$stop} {
# 			lappend lines [list "$pin"  "out std_logic_vector($start downto $stop);" "$net"]
# 		} else {
# 			lappend lines [list "$pin" "out std_logic_vector($start to $stop);" "$net"]
# 		}
# 	}
# 	# Detect maximum column width to align columns
# 	foreach line $lines {
# 		set width [string length [lindex $line 0]]
# 		if {![info exist maxWidth] || $maxWidth < $width} {
# 			set maxWidth $width
# 		}
# 	}
# 	set ports {}
# 	set port_map {}
# 	foreach line $lines {
# 		append ports [format "\n\t\t\t%-${maxWidth}s :  %-${maxWidth}s" [lindex $line 0] [lindex $line 1]]
# 		append port_map [format "\n\t\t\t%-${maxWidth}s =>  %-${maxWidth}s," [lindex $line 0] [lindex $line 2]]
# 	}
# 	# Remove the last semi-colon
#   	set index [string last {;} $ports]
#   	set ports [string replace $ports $index $index {}]
# 	# Remove the last ,
#   	set index [string last {,} $port_map]
#   	set port_map [string replace $port_map $index $index {}]
# 
# 	set filtr [format {PATH !~ "%s/.*/.*"} $cell]
# 	set nets [lsort [get_bd_nets -quiet -of_objects [get_bd_cells $cell] -regexp -filter $filtr]]
# 	array set busNets [list ]
# 	set bitNets [list]
# 	sortNets $nets busNets bitNets
# 
# 	set lines [list]
# 	# Process single bit nets
# 	foreach net [lsort -dictionary $bitNets] {
# 		lappend lines [list "$net" "  std_logic;"]
# 	}
# 	# Process bus nets
# 	foreach {net busInfo} [array2sortedList busNets] {
# 		lassign $busInfo stop start
# 		if {$start>$stop} {
# 		lappend lines [list "$net" "  std_logic_vector($start downto $stop);"]
# 		} else {
# 		lappend lines [list "$net" "  std_logic_vector($start to $stop);"]
# 		}
# 	}
# 
# 	# Detect maximum column width to align columns
# 	foreach line $lines {
# 		set width [string length [lindex $line 0]]
# 		if {![info exist maxWidth] || $maxWidth < $width} {
# 			set maxWidth $width
# 		}
# 	}
# 
# 	# Build the content of the stub:
# 	set signals {}
# 	foreach line $lines {
# 		append signals [format "\n\tsignal %-${maxWidth}s :  %-${maxWidth}s" [lindex $line 0] [lindex $line 1]]
# 	}
#   set ports2Signals {}
#     foreach net [lsort -dictionary $nets] {
#         set net_name [get_property NAME [get_bd_nets -quiet $net]]
#         set ports_b [get_bd_ports -quiet -of_objects [get_bd_nets -quiet $net]]
#         if {$ports == {}} {
#             break
#         }
#         foreach port [lsort -dictionary $ports_b] {
#             set port_name [get_property NAME [get_bd_pins -quiet $port]]
#             set dir [get_property DIR [get_bd_pins -quiet $port]]
#             if {$dir == "I"} {
#                 append ports2Signals "\t$net_name <= $port_name;\n"    
#             } else {
#                 append ports2Signals "\t$port_name <= $net_name;\n"
#             }
#         }
#     }
#   
# 	set debounce_inner false
#   	set components_inner {}
#   	set modules_inner {}
#   	set body [getIPs $cell debounce_inner components_inner modules_inner]
# 	if {$debounce_inner} {
# 		puts "######################################################################x"
# 		append components_inner $debounce_component
# 		set debs true
#     }
# 	
# 	set comp_name [string replace $cell 0 0 {}]
#     set comp_name [string map {/ _} $comp_name]
#     append comps "\tcomponent ${comp_name}\n\t\tport ("
#     append mods "\n\nlibrary IEEE;\nuse IEEE.std_logic_1164.all;\n\n"
#     append mods "entity ${comp_name} is\n\tport("
#     append mods $ports
#     append comps $ports
#     append mods "\n\t\t);\nend entity ${comp_name};\n\narchitecture Behavioral of ${comp_name} is\n"
#     append mods $components_inner
#     append mods $signals
#     append mods "\nbegin\n"
#     append mods $ports2Signals
#     append mods $body
#     append mods "\nend Behavioral;"
#     append comps "\n\t\t);\n\tend component;\n\n"
#     append content "\tinst_${comp_name} : ${comp_name}\n"
#     append content "\t\tport map ("
#     append content $port_map
#     append content "\n\t\t);\n"
#     append mods $modules_inner
# 
# 	return $content
# }
# proc getIPs { parent debounce components modules} {
#   upvar $debounce deb
#   upvar $components comps
#   upvar $modules mods
#   if {$parent == ""} {
# 	set cells [get_bd_cells]	  
#   } else {
# 	set filtr [format {PATH !~ "%s/.*/.*"} $parent]
# 	set cells [get_bd_cells -of_objects [get_bd_cells $parent] -regexp -filter $filtr]
#   }
#   
#   set content {}
#   foreach cell [lsort -dictionary $cells] {
# 	set type [get_property TYPE [get_bd_cells -quiet $cell]]
# 	set name [get_property NAME [get_bd_cells -quiet $cell]]
# 	set vlnv [get_property VLNV [get_bd_cells -quiet $cell]]
# 	if {$type == "ip"} {
# 		set vlnvs [split $vlnv ":"]
# 		if {[lindex $vlnvs 0] == "FIT"} {
# 		 	switch [lindex $vlnvs 2] {
# 				"or" {
# 					append content [getGate $cell "or"]
# 				}
# 				"and" {
# 					append content [getGate $cell "and"]
# 				}
# 				"xor" {
# 					append content [getGate $cell "xor"]
# 				}
# 				"buf" {
# 					append content [getBuf $cell false]
# 				}
# 				"inv" {
# 					append content [getBuf $cell true]
# 				}
# 				"gnd" {
# 					append content [getSource $cell false]
# 				}
# 				"vcc" {
# 					append content [getSource $cell true]
# 				}
# 				"splitter" {
# 					append content [getSplitter $cell]
# 				}
# 				"mux" {
# 					append content [getMux $cell]
# 				}
# 				"dff" {
# 					append content [getDff $cell]
# 				}
# 				"debounce" {
# 					append content [getDebounce $cell]
# 					set deb true
# 				}
# 			}
# 		} elseif {[lindex $vlnvs 0] == "xilinx.com" && [lindex $vlnvs 1] == "module_ref"} {
# 			append content [getModule_ref $cell comps [lindex $vlnvs 2]]
# 		}
# 			
# 	} elseif {$type == "hier"} {
# 		append content [getHier $cell deb comps mods]
# 	}
#   }
#   return $content
# }
# set debounce_code "\n\n\nlibrary IEEE;
# use IEEE.STD_LOGIC_1164.ALL;
# use ieee.std_logic_unsigned.all;
# 
# entity debounce is
#     generic (
# 		width: integer := 22 -- 100 MHz clock -> 4 - simulation (90 ns); 22 - synthesis (ca. 20 ms)
# 	);
#     port (
# 		clk : in STD_LOGIC;
#         tl_in : in STD_LOGIC;
#         tl_out : out STD_LOGIC
# 	);
# end entity debounce;
# 
# architecture Behavioral of debounce is
# 
# signal cnt       : std_logic_vector(width-1 downto 0) := (others => '0');
# signal reset, ce : std_logic := '0';
# signal tl_prev   : std_logic := '0';
# 
# 
# begin
# 
#     counter: process(clk) begin
#         if rising_edge(clk) then 
#             if (reset = '1') then
#                 cnt <= (others => '0');
#             elsif (ce = '1') then
#                 cnt <= cnt + 1;
#             end if;
#         end if;
#     end process;
# 
#     process(clk) begin
#         if rising_edge(clk) then
#             if (tl_prev /= tl_in) then
#                 reset <= '1';
#             else 
#                 reset <= '0';
#             end if;
#         end if;
#     end process;
#                 
#     process(clk) begin
#         if rising_edge(clk) then
#             if (reset = '1') then
#                 tl_prev <= tl_in;
#             end if;
#         end if;
#     end process;
#                 
#     process(clk) begin
#         if rising_edge(clk) then
#             if ((cnt(width-1) = '1') and (cnt(0) = '0')) then
#                 tl_out <= tl_prev;
#             end if;
#         end if;
#     end process;
#                 
# 
#     ce <= '0' when ((cnt(width-1) = '1') and (cnt(0) = '1'))
#                 else '1';
# 
# end Behavioral;\n"
# proc vhdlTemplate { module } {
#   global debounce_code
#   global debounce_component
# 
#   set inPorts [lsort [get_bd_ports -quiet -filter DIR==I]]
#   array set inputBusPorts [list ]
#   set inputBitPorts [list]
#   sortPorts $inPorts inputBusPorts inputBitPorts
# 
#   set outPorts [lsort [get_bd_ports -quiet -filter DIR==O]]
#   array set outputBusPorts [list ]
#   set outputBitPorts [list]
#   sortPorts $outPorts outputBusPorts outputBitPorts
# 
#   set inoutPorts [lsort [get_bd_ports -quiet -filter DIR==IO]]
#   array set inoutBusPorts [list ]
#   set inoutBitPorts [list]
#   sortPorts $inoutPorts inoutBusPorts inoutBitPorts
# 
#   set lines [list]
#   # Process input single bit ports
# #   lappend lines "-- Input Ports - Single Bit"
#   foreach port [lsort -dictionary $inputBitPorts] {
#     lappend lines [list "$port" "in  std_logic;"]
#   }
#   # Process input bus ports
# #   lappend lines "-- Input Ports - Busses"
#   foreach {port busInfo} [array2sortedList inputBusPorts] {
#     lassign $busInfo stop start
#     if {$start>$stop} {
#       lappend lines [list "$port" "in  std_logic_vector($start downto $stop);"]
#     } else {
#       lappend lines [list "$port" "in  std_logic_vector($start to $stop);"]
#     }
#   }
#   # Process output single bit ports
# #   lappend lines "-- Output Ports - Single Bit"
#   foreach port [lsort -dictionary $outputBitPorts] {
#     lappend lines [list "$port" "out std_logic;"]
#   }
#   # Process output bus ports
# #   lappend lines "-- Output Ports - Busses"
#   foreach {port busInfo} [array2sortedList outputBusPorts] {
#     lassign $busInfo stop start
#     if {$start>$stop} {
#       lappend lines [list "$port"  "out std_logic_vector($start downto $stop);"]
#     } else {
#       lappend lines [list "$port" "out std_logic_vector($start to $stop);"]
#     }
#   }
#   # Process inout single bit ports
# #   lappend lines "-- InOut Ports - Single Bit"
#   foreach port [lsort -dictionary $inoutBitPorts] {
#     lappend lines [list "$port" "inout  std_logic;"]
#   }
#   # Process inout bus ports
# #   lappend lines "-- InOut Ports - Busses"
#   foreach {port busInfo} [array2sortedList inoutBusPorts] {
#     lassign $busInfo stop start
#     if {$start>$stop} {
#       lappend lines [list "$port" "inout  std_logic_vector($start downto $stop);"]
#     } else {
#       lappend lines [list "$port" "inout  std_logic_vector($start to $stop);"]
#     }
#   }
# 
#   # Detect maximum column width to align columns
#   foreach line $lines {
#     if {[regexp {^\s*\-\-} $line]} {
#       # Skip lines that are just comments
#       continue
#     }
#     set width [string length [lindex $line 0]]
#     if {![info exist maxWidth] || $maxWidth < $width} {
#       set maxWidth $width
#     }
#   }
# 
#   # Build the content of the stub:
#   set content {}
#   foreach line $lines {
#     if {[regexp {^\s*\-\-} $line]} {
#       # Lines that are just comments
#       append content "\n      $line"
#       continue
#     }
#     append content [format "\n      %-${maxWidth}s :  %-${maxWidth}s" [lindex $line 0] [lindex $line 1]]
#   }
# 
#   # Remove the last semi-colon
#   set index [string last {;} $content]
#   set content [string replace $content $index $index {}]
# 
# 
#   set nets [lsort [get_bd_nets -quiet]]
#   array set busNets [list ]
#   set bitNets [list]
#   sortNets $nets busNets bitNets
# 
#   set lines [list]
#   # Process single bit nets
#   foreach net [lsort -dictionary $bitNets] {
#     lappend lines [list "$net" "  std_logic;"]
#   }
#   # Process bus nets
#   foreach {net busInfo} [array2sortedList busNets] {
#     lassign $busInfo stop start
#     if {$start>$stop} {
#       lappend lines [list "$net" "  std_logic_vector($start downto $stop);"]
#     } else {
#       lappend lines [list "$net" "  std_logic_vector($start to $stop);"]
#     }
#   }
# 
#   # Detect maximum column width to align columns
#   foreach line $lines {
#     if {[regexp {^\s*\-\-} $line]} {
#       # Skip lines that are just comments
#       continue
#     }
#     set width [string length [lindex $line 0]]
#     if {![info exist maxWidth] || $maxWidth < $width} {
#       set maxWidth $width
#     }
#   }
# 
#   # Build the content of the stub:
#   set signals {}
#   foreach line $lines {
#     if {[regexp {^\s*\-\-} $line]} {
#       # Lines that are just comments
#       append signals "\n      $line"
#       continue
#     }
#     append signals [format "\n      signal %-${maxWidth}s :  %-${maxWidth}s" [lindex $line 0] [lindex $line 1]]
#   }
#   set ports2Signals {}
#   foreach port [lsort -dictionary $inPorts] {
# 	set port_name [get_property NAME [get_bd_ports -quiet $port]]
# 	set net [get_bd_nets -quiet -of_objects [get_bd_ports -quiet $port]]
# 	if {$net != ""} {
# 		set net_name [get_property NAME $net]
# 		append ports2Signals "\t$net_name <= $port_name;\n"
# 	} else {
# 		catch {common::send_msg_id "bd2vhdl   port-2" "CRITICAL WARNING" "${port_name}: port nepripojen!"}
# 	}
#   }
#   foreach port [lsort -dictionary $outPorts] {
# 	set port_name [get_property NAME [get_bd_ports -quiet $port]]
# 	set net [get_bd_nets -quiet -of_objects [get_bd_ports -quiet $port]]
# 	if {$net != ""} {
# 		set net_name [get_property NAME $net]
# 		append ports2Signals "\t$port_name <= $net_name;\n"
# 	} else {
# 		catch {common::send_msg_id "bd2vhdl   port-3" "CRITICAL WARNING" "${port_name}: port nepripojen!"}
# 	}
#   }
#   set debounce false
#   set components {}
#   set modules {}
#   set body [getIPs "" debounce components modules]
#   
#   if {$debounce} {
# 	  append components $debounce_component
#   }
#   # Now that the last semi-colon is replaced, add the header and footer
#   set content [format "library IEEE;
# use IEEE.std_logic_1164.all;
# 
# library xil_defaultlib;
# use xil_defaultlib.all;
# 
# entity ${module}_vhdl is
#    port (%s
#    );
# end entity ${module}_vhdl;
# 
# architecture Behavioral of ${module}_vhdl is
# %s
# %s
# begin
# %s
# %s
# end Behavioral;" $content $components $signals $ports2Signals $body]
# 
#   append content $modules
# 
#   if {$debounce} {
# 	  append content $debounce_code
#   }
# 
#   return $content
# }
# set name [current_bd_design -quiet]
# if {$name == ""} {
#     common::send_msg_id -continue "bd2vhdl design-2" "ERROR" "Je potreba otevrit block design!"
# 	return
# }
# save_bd_design $name
# validate_bd_design -force
CRITICAL WARNING: [BD 41-1348] Reset pin /counter_vhdl_0/reset (associated clock /counter_vhdl_0/clk) is connected to asynchronous reset source /reset.
This may prevent design from meeting timing. Please add Processor System Reset module to create a reset that is synchronous to the associated clock source /debounce_0/tl_out.
# if { [llength [get_bd_ports]] > 0 } {
# 	puts "\n##### ${name} #####"
# 	set content [vhdlTemplate $name]
# 	set PROJ_DIR [get_property DIRECTORY [current_project]]
# 	set PROJ_DIR [file normalize $PROJ_DIR]
# 	set tmp_dir [file join $PROJ_DIR "tmp"]
# 	file mkdir $tmp_dir
# 	set filename "${name}.vhd"
# 	set filename_path [file join $tmp_dir $filename]
# 	# Save the template
# 	set mode {w}
# 	puts "\nCreating VHDL for Design $name in [file normalize $filename]\n"
# 	set tfh [open $filename_path $mode]
# 	puts $tfh $content
# 	close $tfh
# 
# 	import_files -force -norecurse $filename_path
# 	common::send_msg_id "bd2vhdl design-1" "INFO" "${name}_vhdl.vhd vygenerovan"
# } else {
# 	common::send_msg_id -continue "bd2vhdl design-3" "ERROR" "${name} neobsahuje zadne porty!"
# }

##### counter_full #####

Creating VHDL for Design counter_full in X:/SAP/lab5/counter_full.vhd

INFO: [bd2vhdl design-1] counter_full_vhdl.vhd vygenerovan
open_bd_design {X:/SAP/lab5/lab5.srcs/sources_1/bd/counter/counter.bd}
Adding cell -- xilinx.com:module_ref:next_state_logic:1.0 - next_state_logic_0
Adding cell -- xilinx.com:module_ref:output_logic:1.0 - output_logic_0
Adding cell -- FIT:user:dff:1.0 - dff_0
Adding cell -- FIT:user:dff:1.0 - dff_1
Adding cell -- FIT:user:gnd:1.0 - gnd_0
Adding cell -- FIT:user:dff:1.0 - dff_2
Successfully read diagram <counter> from BD file <X:/SAP/lab5/lab5.srcs/sources_1/bd/counter/counter.bd>
delete_bd_objs [get_bd_nets output_logic_0_y2] [get_bd_nets output_logic_0_y0] [get_bd_nets output_logic_0_y1] [get_bd_cells output_logic_0]
create_bd_cell -type module -reference output_logic output_logic_0
WARNING: [IP_Flow 19-3571] IP 'counter_output_logic_0_1' is restricted:
* Detected changes to module reference file(s).
Please select 'Report IP Status' from the 'Tools/Report' menu or run Tcl command 'report_ip_status' for more information.
set_property location {4.5 499 -48} [get_bd_cells output_logic_0]
connect_bd_net [get_bd_pins dff_0/q] [get_bd_pins output_logic_0/q0]
connect_bd_net [get_bd_pins dff_1/q] [get_bd_pins output_logic_0/q1]
connect_bd_net [get_bd_pins dff_1/q] [get_bd_pins output_logic_0/q2]
connect_bd_net [get_bd_pins gnd_0/O] [get_bd_pins output_logic_0/inc]
connect_bd_net [get_bd_pins gnd_0/O] [get_bd_pins output_logic_0/dir]
delete_bd_objs [get_bd_nets dff_1_q]
connect_bd_net [get_bd_pins dff_1/q] [get_bd_pins output_logic_0/q1]
connect_bd_net [get_bd_pins dff_2/q] [get_bd_pins output_logic_0/q2]
connect_bd_net [get_bd_pins dff_1/q] [get_bd_pins next_state_logic_0/q1]
save_bd_design
Wrote  : <X:/SAP/lab5/lab5.srcs/sources_1/bd/counter/counter.bd> 
Wrote  : <X:/SAP/lab5/lab5.srcs/sources_1/bd/counter/ui/bd_1aeeb13c.ui> 
connect_bd_net [get_bd_ports y0] [get_bd_pins output_logic_0/y0]
connect_bd_net [get_bd_ports y1] [get_bd_pins output_logic_0/y1]
connect_bd_net [get_bd_ports y2] [get_bd_pins output_logic_0/y2]
save_bd_design
Wrote  : <X:/SAP/lab5/lab5.srcs/sources_1/bd/counter/counter.bd> 
Wrote  : <X:/SAP/lab5/lab5.srcs/sources_1/bd/counter/ui/bd_1aeeb13c.ui> 
set_property top output_logic [current_fileset]
set_property top_lib xil_defaultlib [current_fileset]
set_property top_arch behavioral [current_fileset]
set_property top_file X:/SAP/lab5/lab5.srcs/sources_1/imports/SAP/l4_output_logic.vhd [current_fileset]
update_compile_order -fileset sources_1
source X:/SAP/lib_SAP_2022_02_02/gen_bd_vhdl.tcl
# proc sortPorts { ports &bus &bit } {
# 
#   upvar ${&bus} busPorts
#   upvar ${&bit} bitPorts
#   array set busPorts [list]
#   set bitPorts [list]
# 
#   foreach port $ports {
#     set name [get_property -quiet NAME [get_bd_ports $port]]
# 	set busStart [get_property -quiet LEFT [get_bd_ports $port]]
#     set busStop  [get_property -quiet RIGHT  [get_bd_ports $port]]
#     if {$busStart != {}} {
#     #   set busWidth [get_property -quiet BUS_WIDTH [get_ports $port]]
#       array set busPorts [list $name [list $busStop $busStart]]
#     } else {
#       lappend bitPorts $name
#     }
#   }
#   return 0
# }
# proc sortPins { pins &bus &bit } {
# 
#   upvar ${&bus} busPins
#   upvar ${&bit} bitPins
#   array set busPins [list]
#   array set bitPins [list]
# 
#   foreach pin $pins {
#     set name [get_property -quiet NAME [get_bd_pins $pin]]
# 	set dir [get_property -quiet DIR [get_bd_pins $pin]]
# 	set busStart [get_property -quiet LEFT [get_bd_pins $pin]]
#     set busStop  [get_property -quiet RIGHT  [get_bd_pins $pin]]
# 	set net [get_bd_nets -quiet -of_objects [get_bd_pins $pin]]
# 	if {$net != ""} {
# 		set net_name [get_property -quiet NAME $net]
# 	} else {
# 		if {$dir == "I"} {
# 			if {$busStart != {}} {
# 				set net_name "(others => '0')"
# 				catch {common::send_msg_id "bd2vhdl    pin-2" "CRITICAL WARNING" "${pin}: nepripojen, bude pripojen k '0'"}
# 			} else {
# 				set net_name "'0'"
# 				catch {common::send_msg_id "bd2vhdl    pin-2" "CRITICAL WARNING" "${pin}: nepripojen, bude pripojen k '0'"}
# 			}
# 		} else {
# 			set net_name "open"
# 			catch {common::send_msg_id "bd2vhdl    pin-3" "CRITICAL WARNING" "${pin}: pin odstranen, vystup neni pripojen!"}
# 		}
# 	}
# 	if {$busStart != {}} {
# 		array set busPins [list $name [list $busStop $busStart $net_name]]
# 	} else {
# 		array set bitPins [list $name $net_name]
# 	}
#   }
#   return 0
# }
# proc sortNets { nets &bus &bit } {
# 
#   upvar ${&bus} busNets
#   upvar ${&bit} bitNets
#   array set busNets [list ]
#   set bitNets [list]
# 
#   foreach net $nets {
#     set name [get_property -quiet NAME [get_bd_nets $net]]
# 	set pin [lindex [get_bd_pins -of_objects [get_bd_nets $net]] 0]
# 	set busStart [get_property -quiet LEFT [get_bd_pins $pin]]
#     set busStop  [get_property -quiet RIGHT  [get_bd_pins $pin]]
#     if {$busStart != {}} {
#     #   set busWidth [get_property -quiet BUS_WIDTH [get_ports $port]]
#       array set busNets [list $name [list $busStop $busStart]]
#     } else {
#       lappend bitNets $name
#     }
#   }
#   return 0
# }
# proc array2sortedList { &ar } {
# 
#   upvar ${&ar} ar
#   set sortedList [list]
#   foreach key [lsort -dictionary [array names ar]] {
#     lappend sortedList $key
#     lappend sortedList $ar($key)
#   }
#   return $sortedList
# }
# proc getInPinNet { cell pin default_value} {
# 	set pin [get_bd_pins -quiet $pin]
# 	set net [get_bd_nets -quiet -of_objects $pin]
# 	if {$net == ""} {
# 		catch {common::send_msg_id "bd2vhdl    pin-2" "CRITICAL WARNING" "${pin} nepripojen, bude pripojeno k $default_value"}
# 		set net_name $default_value
# 	} else {
# 		set net_name [get_property NAME $net]
# 	}
# 	return $net_name
# }
# proc getGate { cell  function} {
# 	set inputs_count [get_property CONFIG.Inputs [get_bd_cells -quiet $cell]]
# 	set content {}
# 	set prom {}
# 	set name [get_property NAME $cell]
# 	append content [format "\n\t-- %s\n" $name]
# 	for {set i 0} { $i < $inputs_count } { incr i } {
# 		set cfg [format "CONFIG.I%u_Inverted" $i]
# 		set pin [format "%s/I%u" $cell $i]
# 		set inverted [get_property $cfg  [get_bd_cells -quiet $cell]]
# 		#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 		set net_name [getInPinNet $cell $pin "\'0\'"]
# 		#set net_name [get_property NAME $net]
# 		if {$inverted == "true"} {
# 			append prom [format "not(%s)" $net_name]
# 		} else {
# 			append prom [format "%s" $net_name]
# 		}
# 		if {$i < ($inputs_count-1)} {
# 			append prom [format " %s " $function]
# 		}
# 	}
# 	set cfg [format "CONFIG.O_Inverted" $i]
# 	set pin [format "%s/O" $cell]
# 	set inverted [get_property $cfg  [get_bd_cells -quiet $cell]]
# 	set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 	if {$net != ""} {
# 		set out_name [get_property NAME $net]
# 		if {$inverted == "true"} {
# 			append content [format "\t%s <= not(%s);\n" $out_name $prom];	
# 		} else {
# 			append content [format "\t%s <= %s;\n" $out_name $prom];
# 		}
# 		return $content
# 	} else {
# 		catch {common::send_msg_id "bd2vhdl  jadro-3" "CRITICAL WARNING" "${cell}: odstraneno, vystup neni pripojen!"}
# 		return [append content "\t-- odstraneno, vystup neni pripojen\n"]
# 	}
# }
# proc getBuf { cell  function } {
# 	set content {}
# 	set name [get_property NAME $cell]
# 	append content [format "\n\t-- %s\n" $name]
# 
# 	set pin [format "%s/I" $cell]
# 	#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 	#set net_name [get_property NAME $net]
# 	set net_name [getInPinNet $cell $pin "\'0\'"]
# 
# 	set pin [format "%s/O" $cell]
# 	set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 	if {$net != ""} {
# 		set out_name [get_property NAME $net]
# 		if {$function == true} {
# 			append content [format "\t%s <= not(%s);\n" $out_name $net_name];	
# 		} else {
# 			append content  [format "\t%s <= %s;\n" $out_name $net_name];
# 		}
# 		return $content
# 	} else {
# 		catch {common::send_msg_id "bd2vhdl  jadro-3" "CRITICAL WARNING" "${cell}: odstraneno, vystup neni pripojen!"}
# 		return [append content "\t-- odstraneno, vystup neni pripojen\n"]
# 	}
# }
# proc getSource { cell  function } {
# 	set content {}
# 	set name [get_property NAME $cell]
# 	append content [format "\n\t-- %s\n" $name]
# 
# 	set pin [format "%s/O" $cell]
# 	set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 	if {$net != ""} {
# 		set out_name [get_property NAME $net]
# 		if {$function == true} {
# 			append content [format "\t%s <= '1';\n" $out_name];	
# 		} else {
# 			append content [format "\t%s <= '0';\n" $out_name];
# 		}
# 		return $content
# 	} else {
# 		catch {common::send_msg_id "bd2vhdl  jadro-3" "CRITICAL WARNING" "${cell}: odstraneno, vystup neni pripojen!"}
# 		return [append content "\t-- odstraneno, vystup neni pripojen\n"]
# 	}
# }
# proc getSplitter { cell } {
# 	set width [get_property CONFIG.WIDTH [get_bd_cells -quiet $cell]]
# 	set pin [format "%s/I" $cell]
# 	set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 	if {$net != ""} {
# 		set in_name [get_property NAME $net]
# 		set content {}
# 		set name [get_property NAME $cell]
# 		append content [format "\n\t-- %s\n" $name]
# 		for {set i 0} { $i < $width } { incr i } {
# 			set pin [format "%s/O%u" $cell $i]
# 			set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 			if {$net != ""} {
# 				set net_name [get_property NAME $net]
# 				append content [format "\t%s <= %s(%u);\n" $net_name $in_name $i]
# 			} else {
# 				catch {common::send_msg_id "bd2vhdl  jadro-3" "CRITICAL WARNING" "${cell}: ${pin} odstranen, vystup neni pripojen!"}
# 			}
# 		}
# 	} else {
# 		set content {}
# 		set name [get_property NAME $cell]
# 		append content [format "\n\t-- %s\n" $name]
# 		for {set i 0} { $i < $width } { incr i } {
# 			set pin [format "%s/O%u" $cell $i]
# 			set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 			if {$net != ""} {
# 				set net_name [get_property NAME $net]
# 				append content [format "\t%s <= \'0\';\n" $net_name $i]
# 				catch {common::send_msg_id "bd2vhdl  jadro-2" "CRITICAL WARNING" "${cell} nepripojen vstup, ${net_name} bude pripojeno k \'0\'"}
# 			} else {
# 				catch {common::send_msg_id "bd2vhdl  jadro-3" "CRITICAL WARNING" "${cell}: ${pin} odstranen, vystup neni pripojen!"}
# 			}
# 		}
# 	}
# 	return $content
# }
# proc getDff { cell } {
# 	set ce [get_property CONFIG.CE [get_bd_cells -quiet $cell]]
# 	set reset [get_property CONFIG.Reset [get_bd_cells -quiet $cell]]
# 
# 	set content {}
# 	set name [get_property NAME $cell]
# 	append content [format "\n\t-- %s\n" $name]
# 
# 	set pin [format "%s/q" $cell]
# 	set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 	if {$net != ""} {
# 		set out_name [get_property NAME $net]
# 
# 		set pin [format "%s/clk" $cell]
# 		set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 		if {$net == ""} {
# 			catch {common::send_msg_id "bd2vhdl  jadro-3" "CRITICAL WARNING" "${cell}: odstraneno, nejsou pripojene hodiny!"}
# 			return [append content "\t-- odstraneno, , nejsou pripojene hodiny!\n"]
# 		}
# 		#set clk_name [get_property NAME $net]
# 		set clk_name [getInPinNet $cell $pin "\'0\'"]
# 
# 		set pin [format "%s/d" $cell]
# 		#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 		#set in_name [get_property NAME $net]
# 		set in_name [getInPinNet $cell $pin "\'0\'"]
# 
# 		if {$ce == "true"} {
# 			set pin [format "%s/ce" $cell]
# 			#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 			#set ce_name [get_property NAME $net]
# 			set ce_name [getInPinNet $cell $pin "\'1\'"]
# 		}
# 
# 		if {$reset == "true"} {
# 			set pin [format "%s/reset" $cell]
# 			#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 			#set reset_name [get_property NAME $net]
# 			set reset_name [getInPinNet $cell $pin "\'0\'"]
# 		}
# 
# 		append content [format "\tprocess (%s)\n\tbegin\n" $clk_name]
# 		append content [format "\t\tif rising_edge(%s) then\n" $clk_name]
# 		if {$reset == "true"} {
# 			append content [format "\t\t\tif %s = '1' then\n\t\t\t\t%s <= '0';\n\t\t\tels" $reset_name $out_name]
# 		} else {
# 			append content "\t\t\t"
# 		}
# 
# 		if {$ce == "true"} {
# 			append content [format "if %s = '1' then\n" $ce_name]
# 			append content [format "\t\t\t\t%s <= %s;\n" $out_name $in_name]
# 			append content "\t\t\tend if;\n"
# 		} else {
# 			if {$reset == "true"} {
# 				append content [format "e\n\t\t\t\t%s <= %s;\n" $out_name $in_name]
# 				append content "\t\t\tend if;\n"
# 			} else {
# 				append content [format "%s <= %s;\n" $out_name $in_name]
# 			}
# 		}
# 
# 		append content "\t\tend if;\n\tend process;\n";
# 	} else {
# 		catch {common::send_msg_id "bd2vhdl jadro-3" "CRITICAL WARNING" "${cell}: odstraneno, vystup neni pripojen!"}
# 		return [append content "\t-- odstraneno, vystup neni pripojen\n"]
# 	}
# 	return $content
# }
# proc getMux { cell } {
# 	set ports_count [get_property CONFIG.Data_Ports [get_bd_cells -quiet $cell]]
# 	set width [get_property CONFIG.WIDTH [get_bd_cells -quiet $cell]]
# 	set i0_bus [get_property CONFIG.I0_BUS [get_bd_cells -quiet $cell]]
# 	set i1_bus [get_property CONFIG.I1_BUS [get_bd_cells -quiet $cell]]
# 	set i2_bus [get_property CONFIG.I2_BUS [get_bd_cells -quiet $cell]]
# 	set i3_bus [get_property CONFIG.I3_BUS [get_bd_cells -quiet $cell]]
# 	set o_bus [get_property CONFIG.O_BUS [get_bd_cells -quiet $cell]]
# 
# 	set content {}
# 	set name [get_property NAME $cell]
# 	append content [format "\n\t-- %s\n" $name]
# 
# 	for {set i 0} { $i < $width } { incr i } {
# 		if {$o_bus == "true"} {
# 			set pin [format "%s/O" $cell]
# 			set vecO [format "(%u)" $i]
# 		} else {
# 			set pin [format "%s/O_%u" $cell $i]
# 			set vecO ""
# 		}
# 		set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 		if {$net != ""} {
# 			set out_name [get_property NAME $net]
# 
# 			if {$i0_bus == "true"} {
# 				set pin [format "%s/I0" $cell]
# 				set vec0 [format "(%u)" $i]
# 			} else {
# 				set pin [format "%s/I0_%u" $cell $i]
# 				set vec0 ""
# 			}
# 			#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 			#set i0_name [get_property NAME $net]
# 			set i0_name [getInPinNet $cell $pin "\'0\'"]
# 			if {$i0_name == "'0'"} {
# 				set vec0 ""
# 			}
# 
# 			if {$i1_bus == "true"} {
# 				set pin [format "%s/I1" $cell]
# 				set vec1 [format "(%u)" $i]
# 			} else {
# 				set pin [format "%s/I1_%u" $cell $i]
# 				set vec1 ""
# 			}
# 			#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 			#set i1_name [get_property NAME $net]
# 			set i1_name [getInPinNet $cell $pin "\'0\'"]
# 			if {$i1_name == "'0'"} {
# 				set vec1 ""
# 			}
# 
# 			set pin [format "%s/Sel0" $cell]
# 			#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 			#set sel0_name [get_property NAME $net]
# 			set sel0_name [getInPinNet $cell $pin "\'0\'"]
# 
# 			if {$ports_count > 2} {
# 				if {$i2_bus == "true"} {
# 					set pin [format "%s/I2" $cell]
# 					set vec2 [format "(%u)" $i]
# 				} else {
# 					set pin [format "%s/I2_%u" $cell $i]
# 					set vec2 ""
# 				}
# 				#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 				#set i2_name [get_property NAME $net]
# 				set i2_name [getInPinNet $cell $pin "\'0\'"]
# 				if {$i2_name == "'0'"} {
# 					set vec2 ""
# 				}
# 
# 				if {$i3_bus == "true"} {
# 					set pin [format "%s/I3" $cell]
# 					set vec3 [format "(%u)" $i]
# 				} else {
# 					set pin [format "%s/I3_%u" $cell $i]
# 					set vec3 ""
# 				}
# 				#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 				#set i3_name [get_property NAME $net]
# 				set i3_name [getInPinNet $cell $pin "\'0\'"]
# 				if {$i3_name == "'0'"} {
# 					set vec3 ""
# 				}
# 
# 				set pin [format "%s/Sel1" $cell]
# 				#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 				#set sel1_name [get_property NAME $net]
# 				set sel1_name [getInPinNet $cell $pin "\'0\'"]
# 				
# 				if {$sel0_name != "'0'" && $sel1_name != "'0'"} {
# 					append content [format "\t%s%s <= %s%s when %s = '0' and %s = '0' else\n" $out_name $vecO $i0_name $vec0 $sel1_name $sel0_name]
# 					append content [format "\t\t%s%s when %s = '0' and %s = '1' else\n" $i1_name $vec1 $sel1_name $sel0_name]
# 					append content [format "\t\t%s%s when %s = '1' and %s = '0' else\n" $i2_name $vec2 $sel1_name $sel0_name]
# 					append content [format "\t\t%s%s when %s = '1' and %s = '1' else '0';\n\n" $i3_name $vec3 $sel1_name $sel0_name]
# 				} else {
# 					append content [format "\t%s%s <= %s%s;\n" $out_name $vecO $i0_name $vec0]
# 				}
# 			} else {
# 				if {$sel0_name != "'0'"} {
# 					append content [format "\t%s%s <= %s%s when (%s = '1') else %s%s;\n" $out_name $vecO $i1_name $vec1 $sel0_name $i0_name $vec0]
# 				} else {
# 					append content [format "\t%s%s <= %s%s;\n" $out_name $vecO $i0_name $vec0]
# 				}
# 			}
# 		} else {
# 			catch {common::send_msg_id "bd2vhdl  jadro-3" "CRITICAL WARNING" " ${cell}: pin ${pin} odstranen, vystup neni pripojen!"}
# 			return [append content "\t-- ${pin} odstranen, vystup neni pripojen\n"]
# 		}
# 		
# 	}
# 	return $content
# }
# proc getDebounce { cell } {
# 	set width [get_property CONFIG.width [get_bd_cells -quiet $cell]]
# 
# 	set content {}
# 	set name [get_property NAME $cell]
# 	append content [format "\n\t-- %s\n" $name]
# 
# 	set pin [format "%s/tl_out" $cell]
# 	set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 	if {$net != ""} {
# 		set tl_out [get_property NAME $net]
# 
# 		set pin [format "%s/clk" $cell]
# 		set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 		if {$net != ""} {
# 			set clk [get_property NAME $net]
# 
# 			set pin [format "%s/tl_in" $cell]
# 			#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 			#set tl_in [get_property NAME $net]
# 			set tl_in [getInPinNet $cell $pin "\'0\'"]
# 
# 			append content [ format "\t%s : debounce\n\t\tgeneric map (\n\t\t\twidth => %s\n\t\t)\n\t\tport map (\n\t\t\tclk	=> %s,\n\t\t\ttl_in	=> %s,\n\t\t\ttl_out	=> %s\n\t\t);\n" $name $width $clk $tl_in $tl_out]
# 		} else {
# 			catch {common::send_msg_id "bd2vhdl  jadro-3" "CRITICAL WARNING" "${cell}: odstraneno, nejsou pripojene hodiny!"}
# 			return [append content "\t-- odstraneno, , nejsou pripojene hodiny!\n"]	
# 		}
# 	} else {
# 		catch {common::send_msg_id "bd2vhdl  jadro-3" "CRITICAL WARNING" "${cell}: odstraneno, vystup neni pripojen!"}
# 		return [append content "\t-- odstraneno, vystup neni pripojen\n"]
# 	}
# 	
# 	return $content
# }
# set debounce_component "\tcomponent debounce
# \t\tgeneric (
# \t\t\twidth: integer := 22
# \t\t);
# \t\tport (
# \t\t\tclk    : in  std_logic;
# \t\t\ttl_in  : in  std_logic;
# \t\t\ttl_out : out std_logic
# \t\t);
# \tend component;\n"
# proc getModule_ref { cell components component_name} {
# 	upvar $components comps
# 
# 	set inPins [lsort [get_bd_pins -quiet -of_objects [get_bd_cells $cell] -filter DIR==I]]
# 	array set inputBusPins [list]
# 	array set inputBitPins [list]
# 	sortPins $inPins inputBusPins inputBitPins
# 
# 	set outPins [lsort [get_bd_pins -quiet -of_objects [get_bd_cells $cell] -filter DIR==O]]
# 	array set outputBusPins [list]
# 	array set outputBitPins [list]
# 	sortPins $outPins outputBusPins outputBitPins
# 
# 	set content {}
# 	set name [get_property NAME $cell]
# 	append content [format "\n\t-- %s\n" $name]
# 
# 	set lines [list]
# 	foreach {pin net} [array2sortedList inputBitPins] {
#     	lappend lines [list "$pin" "in  std_logic;" "$net"]
#   	}
# 	foreach {pin busInfo} [array2sortedList inputBusPins] {
# 		lassign $busInfo stop start net
# 		if {$start>$stop} {
# 			lappend lines [list "$pin" "in  std_logic_vector($start downto $stop);" "$net"]
# 		} else {
# 			lappend lines [list "$pin" "in  std_logic_vector($start to $stop);" "$net"]
# 		}
#   	}
# 	foreach {pin net} [array2sortedList outputBitPins] {
#     	lappend lines [list "$pin" "out std_logic;" "$net"]
# 	}
# 	foreach {pin busInfo} [array2sortedList outputBusPins] {
# 		lassign $busInfo stop start net
# 		if {$start>$stop} {
# 			lappend lines [list "$pin"  "out std_logic_vector($start downto $stop);" "$net"]
# 		} else {
# 			lappend lines [list "$pin" "out std_logic_vector($start to $stop);" "$net"]
# 		}
# 	}
# 	# Detect maximum column width to align columns
# 	foreach line $lines {
# 		set width [string length [lindex $line 0]]
# 		if {![info exist maxWidth] || $maxWidth < $width} {
# 			set maxWidth $width
# 		}
# 	}
# 	set ports {}
# 	set port_map {}
# 	foreach line $lines {
# 		append ports [format "\n\t\t\t%-${maxWidth}s :  %-${maxWidth}s" [lindex $line 0] [lindex $line 1]]
# 		append port_map [format "\n\t\t\t%-${maxWidth}s =>  %-${maxWidth}s," [lindex $line 0] [lindex $line 2]]
# 	}
# 	# Remove the last semi-colon
#   	set index [string last {;} $ports]
#   	set ports [string replace $ports $index $index {}]
# 	# Remove the last ,
#   	set index [string last {,} $port_map]
#   	set port_map [string replace $port_map $index $index {}]
# 
# 	# nepridavat pokud uz tam ta komponenta je
# 	if {[string first $component_name $comps] < 0} {
# 		append comps "\tcomponent ${component_name}\n\t\tport ("
# 		append comps $ports
# 		append comps "\n\t\t);\n\tend component;\n\n"
# 	}
# 	append content "\tinst_${name} : ${component_name}\n"
# 	append content "\t\tport map ("
# 	append content $port_map
# 	append content "\n\t\t);\n"
# }
# proc getHier { cell debounce components modules} {
# 	global debounce_component
# 	upvar $components comps
# 	upvar $modules mods
# 	upvar $debounce debs
# 
# 	set inPins [lsort [get_bd_pins -quiet -of_objects [get_bd_cells $cell] -filter DIR==I]]
# 	array set inputBusPins [list]
# 	array set inputBitPins [list]
# 	sortPins $inPins inputBusPins inputBitPins
# 
# 	set outPins [lsort [get_bd_pins -quiet -of_objects [get_bd_cells $cell] -filter DIR==O]]
# 	array set outputBusPins [list]
# 	array set outputBitPins [list]
# 	sortPins $outPins outputBusPins outputBitPins
# 
# 	set content {}
# 	set name [get_property NAME $cell]
# 	append content [format "\n\t-- %s\n" $name]
# 
# 	set lines [list]
# 	foreach {pin net} [array2sortedList inputBitPins] {
#     	lappend lines [list "$pin" "in  std_logic;" "$net"]
#   	}
# 	foreach {pin busInfo} [array2sortedList inputBusPins] {
# 		lassign $busInfo stop start net
# 		if {$start>$stop} {
# 			lappend lines [list "$pin" "in  std_logic_vector($start downto $stop);" "$net"]
# 		} else {
# 			lappend lines [list "$pin" "in  std_logic_vector($start to $stop);" "$net"]
# 		}
#   	}
# 	foreach {pin net} [array2sortedList outputBitPins] {
#     	lappend lines [list "$pin" "out std_logic;" "$net"]
# 	}
# 	foreach {pin busInfo} [array2sortedList outputBusPins] {
# 		lassign $busInfo stop start net
# 		if {$start>$stop} {
# 			lappend lines [list "$pin"  "out std_logic_vector($start downto $stop);" "$net"]
# 		} else {
# 			lappend lines [list "$pin" "out std_logic_vector($start to $stop);" "$net"]
# 		}
# 	}
# 	# Detect maximum column width to align columns
# 	foreach line $lines {
# 		set width [string length [lindex $line 0]]
# 		if {![info exist maxWidth] || $maxWidth < $width} {
# 			set maxWidth $width
# 		}
# 	}
# 	set ports {}
# 	set port_map {}
# 	foreach line $lines {
# 		append ports [format "\n\t\t\t%-${maxWidth}s :  %-${maxWidth}s" [lindex $line 0] [lindex $line 1]]
# 		append port_map [format "\n\t\t\t%-${maxWidth}s =>  %-${maxWidth}s," [lindex $line 0] [lindex $line 2]]
# 	}
# 	# Remove the last semi-colon
#   	set index [string last {;} $ports]
#   	set ports [string replace $ports $index $index {}]
# 	# Remove the last ,
#   	set index [string last {,} $port_map]
#   	set port_map [string replace $port_map $index $index {}]
# 
# 	set filtr [format {PATH !~ "%s/.*/.*"} $cell]
# 	set nets [lsort [get_bd_nets -quiet -of_objects [get_bd_cells $cell] -regexp -filter $filtr]]
# 	array set busNets [list ]
# 	set bitNets [list]
# 	sortNets $nets busNets bitNets
# 
# 	set lines [list]
# 	# Process single bit nets
# 	foreach net [lsort -dictionary $bitNets] {
# 		lappend lines [list "$net" "  std_logic;"]
# 	}
# 	# Process bus nets
# 	foreach {net busInfo} [array2sortedList busNets] {
# 		lassign $busInfo stop start
# 		if {$start>$stop} {
# 		lappend lines [list "$net" "  std_logic_vector($start downto $stop);"]
# 		} else {
# 		lappend lines [list "$net" "  std_logic_vector($start to $stop);"]
# 		}
# 	}
# 
# 	# Detect maximum column width to align columns
# 	foreach line $lines {
# 		set width [string length [lindex $line 0]]
# 		if {![info exist maxWidth] || $maxWidth < $width} {
# 			set maxWidth $width
# 		}
# 	}
# 
# 	# Build the content of the stub:
# 	set signals {}
# 	foreach line $lines {
# 		append signals [format "\n\tsignal %-${maxWidth}s :  %-${maxWidth}s" [lindex $line 0] [lindex $line 1]]
# 	}
#   set ports2Signals {}
#     foreach net [lsort -dictionary $nets] {
#         set net_name [get_property NAME [get_bd_nets -quiet $net]]
#         set ports_b [get_bd_ports -quiet -of_objects [get_bd_nets -quiet $net]]
#         if {$ports == {}} {
#             break
#         }
#         foreach port [lsort -dictionary $ports_b] {
#             set port_name [get_property NAME [get_bd_pins -quiet $port]]
#             set dir [get_property DIR [get_bd_pins -quiet $port]]
#             if {$dir == "I"} {
#                 append ports2Signals "\t$net_name <= $port_name;\n"    
#             } else {
#                 append ports2Signals "\t$port_name <= $net_name;\n"
#             }
#         }
#     }
#   
# 	set debounce_inner false
#   	set components_inner {}
#   	set modules_inner {}
#   	set body [getIPs $cell debounce_inner components_inner modules_inner]
# 	if {$debounce_inner} {
# 		puts "######################################################################x"
# 		append components_inner $debounce_component
# 		set debs true
#     }
# 	
# 	set comp_name [string replace $cell 0 0 {}]
#     set comp_name [string map {/ _} $comp_name]
#     append comps "\tcomponent ${comp_name}\n\t\tport ("
#     append mods "\n\nlibrary IEEE;\nuse IEEE.std_logic_1164.all;\n\n"
#     append mods "entity ${comp_name} is\n\tport("
#     append mods $ports
#     append comps $ports
#     append mods "\n\t\t);\nend entity ${comp_name};\n\narchitecture Behavioral of ${comp_name} is\n"
#     append mods $components_inner
#     append mods $signals
#     append mods "\nbegin\n"
#     append mods $ports2Signals
#     append mods $body
#     append mods "\nend Behavioral;"
#     append comps "\n\t\t);\n\tend component;\n\n"
#     append content "\tinst_${comp_name} : ${comp_name}\n"
#     append content "\t\tport map ("
#     append content $port_map
#     append content "\n\t\t);\n"
#     append mods $modules_inner
# 
# 	return $content
# }
# proc getIPs { parent debounce components modules} {
#   upvar $debounce deb
#   upvar $components comps
#   upvar $modules mods
#   if {$parent == ""} {
# 	set cells [get_bd_cells]	  
#   } else {
# 	set filtr [format {PATH !~ "%s/.*/.*"} $parent]
# 	set cells [get_bd_cells -of_objects [get_bd_cells $parent] -regexp -filter $filtr]
#   }
#   
#   set content {}
#   foreach cell [lsort -dictionary $cells] {
# 	set type [get_property TYPE [get_bd_cells -quiet $cell]]
# 	set name [get_property NAME [get_bd_cells -quiet $cell]]
# 	set vlnv [get_property VLNV [get_bd_cells -quiet $cell]]
# 	if {$type == "ip"} {
# 		set vlnvs [split $vlnv ":"]
# 		if {[lindex $vlnvs 0] == "FIT"} {
# 		 	switch [lindex $vlnvs 2] {
# 				"or" {
# 					append content [getGate $cell "or"]
# 				}
# 				"and" {
# 					append content [getGate $cell "and"]
# 				}
# 				"xor" {
# 					append content [getGate $cell "xor"]
# 				}
# 				"buf" {
# 					append content [getBuf $cell false]
# 				}
# 				"inv" {
# 					append content [getBuf $cell true]
# 				}
# 				"gnd" {
# 					append content [getSource $cell false]
# 				}
# 				"vcc" {
# 					append content [getSource $cell true]
# 				}
# 				"splitter" {
# 					append content [getSplitter $cell]
# 				}
# 				"mux" {
# 					append content [getMux $cell]
# 				}
# 				"dff" {
# 					append content [getDff $cell]
# 				}
# 				"debounce" {
# 					append content [getDebounce $cell]
# 					set deb true
# 				}
# 			}
# 		} elseif {[lindex $vlnvs 0] == "xilinx.com" && [lindex $vlnvs 1] == "module_ref"} {
# 			append content [getModule_ref $cell comps [lindex $vlnvs 2]]
# 		}
# 			
# 	} elseif {$type == "hier"} {
# 		append content [getHier $cell deb comps mods]
# 	}
#   }
#   return $content
# }
# set debounce_code "\n\n\nlibrary IEEE;
# use IEEE.STD_LOGIC_1164.ALL;
# use ieee.std_logic_unsigned.all;
# 
# entity debounce is
#     generic (
# 		width: integer := 22 -- 100 MHz clock -> 4 - simulation (90 ns); 22 - synthesis (ca. 20 ms)
# 	);
#     port (
# 		clk : in STD_LOGIC;
#         tl_in : in STD_LOGIC;
#         tl_out : out STD_LOGIC
# 	);
# end entity debounce;
# 
# architecture Behavioral of debounce is
# 
# signal cnt       : std_logic_vector(width-1 downto 0) := (others => '0');
# signal reset, ce : std_logic := '0';
# signal tl_prev   : std_logic := '0';
# 
# 
# begin
# 
#     counter: process(clk) begin
#         if rising_edge(clk) then 
#             if (reset = '1') then
#                 cnt <= (others => '0');
#             elsif (ce = '1') then
#                 cnt <= cnt + 1;
#             end if;
#         end if;
#     end process;
# 
#     process(clk) begin
#         if rising_edge(clk) then
#             if (tl_prev /= tl_in) then
#                 reset <= '1';
#             else 
#                 reset <= '0';
#             end if;
#         end if;
#     end process;
#                 
#     process(clk) begin
#         if rising_edge(clk) then
#             if (reset = '1') then
#                 tl_prev <= tl_in;
#             end if;
#         end if;
#     end process;
#                 
#     process(clk) begin
#         if rising_edge(clk) then
#             if ((cnt(width-1) = '1') and (cnt(0) = '0')) then
#                 tl_out <= tl_prev;
#             end if;
#         end if;
#     end process;
#                 
# 
#     ce <= '0' when ((cnt(width-1) = '1') and (cnt(0) = '1'))
#                 else '1';
# 
# end Behavioral;\n"
# proc vhdlTemplate { module } {
#   global debounce_code
#   global debounce_component
# 
#   set inPorts [lsort [get_bd_ports -quiet -filter DIR==I]]
#   array set inputBusPorts [list ]
#   set inputBitPorts [list]
#   sortPorts $inPorts inputBusPorts inputBitPorts
# 
#   set outPorts [lsort [get_bd_ports -quiet -filter DIR==O]]
#   array set outputBusPorts [list ]
#   set outputBitPorts [list]
#   sortPorts $outPorts outputBusPorts outputBitPorts
# 
#   set inoutPorts [lsort [get_bd_ports -quiet -filter DIR==IO]]
#   array set inoutBusPorts [list ]
#   set inoutBitPorts [list]
#   sortPorts $inoutPorts inoutBusPorts inoutBitPorts
# 
#   set lines [list]
#   # Process input single bit ports
# #   lappend lines "-- Input Ports - Single Bit"
#   foreach port [lsort -dictionary $inputBitPorts] {
#     lappend lines [list "$port" "in  std_logic;"]
#   }
#   # Process input bus ports
# #   lappend lines "-- Input Ports - Busses"
#   foreach {port busInfo} [array2sortedList inputBusPorts] {
#     lassign $busInfo stop start
#     if {$start>$stop} {
#       lappend lines [list "$port" "in  std_logic_vector($start downto $stop);"]
#     } else {
#       lappend lines [list "$port" "in  std_logic_vector($start to $stop);"]
#     }
#   }
#   # Process output single bit ports
# #   lappend lines "-- Output Ports - Single Bit"
#   foreach port [lsort -dictionary $outputBitPorts] {
#     lappend lines [list "$port" "out std_logic;"]
#   }
#   # Process output bus ports
# #   lappend lines "-- Output Ports - Busses"
#   foreach {port busInfo} [array2sortedList outputBusPorts] {
#     lassign $busInfo stop start
#     if {$start>$stop} {
#       lappend lines [list "$port"  "out std_logic_vector($start downto $stop);"]
#     } else {
#       lappend lines [list "$port" "out std_logic_vector($start to $stop);"]
#     }
#   }
#   # Process inout single bit ports
# #   lappend lines "-- InOut Ports - Single Bit"
#   foreach port [lsort -dictionary $inoutBitPorts] {
#     lappend lines [list "$port" "inout  std_logic;"]
#   }
#   # Process inout bus ports
# #   lappend lines "-- InOut Ports - Busses"
#   foreach {port busInfo} [array2sortedList inoutBusPorts] {
#     lassign $busInfo stop start
#     if {$start>$stop} {
#       lappend lines [list "$port" "inout  std_logic_vector($start downto $stop);"]
#     } else {
#       lappend lines [list "$port" "inout  std_logic_vector($start to $stop);"]
#     }
#   }
# 
#   # Detect maximum column width to align columns
#   foreach line $lines {
#     if {[regexp {^\s*\-\-} $line]} {
#       # Skip lines that are just comments
#       continue
#     }
#     set width [string length [lindex $line 0]]
#     if {![info exist maxWidth] || $maxWidth < $width} {
#       set maxWidth $width
#     }
#   }
# 
#   # Build the content of the stub:
#   set content {}
#   foreach line $lines {
#     if {[regexp {^\s*\-\-} $line]} {
#       # Lines that are just comments
#       append content "\n      $line"
#       continue
#     }
#     append content [format "\n      %-${maxWidth}s :  %-${maxWidth}s" [lindex $line 0] [lindex $line 1]]
#   }
# 
#   # Remove the last semi-colon
#   set index [string last {;} $content]
#   set content [string replace $content $index $index {}]
# 
# 
#   set nets [lsort [get_bd_nets -quiet]]
#   array set busNets [list ]
#   set bitNets [list]
#   sortNets $nets busNets bitNets
# 
#   set lines [list]
#   # Process single bit nets
#   foreach net [lsort -dictionary $bitNets] {
#     lappend lines [list "$net" "  std_logic;"]
#   }
#   # Process bus nets
#   foreach {net busInfo} [array2sortedList busNets] {
#     lassign $busInfo stop start
#     if {$start>$stop} {
#       lappend lines [list "$net" "  std_logic_vector($start downto $stop);"]
#     } else {
#       lappend lines [list "$net" "  std_logic_vector($start to $stop);"]
#     }
#   }
# 
#   # Detect maximum column width to align columns
#   foreach line $lines {
#     if {[regexp {^\s*\-\-} $line]} {
#       # Skip lines that are just comments
#       continue
#     }
#     set width [string length [lindex $line 0]]
#     if {![info exist maxWidth] || $maxWidth < $width} {
#       set maxWidth $width
#     }
#   }
# 
#   # Build the content of the stub:
#   set signals {}
#   foreach line $lines {
#     if {[regexp {^\s*\-\-} $line]} {
#       # Lines that are just comments
#       append signals "\n      $line"
#       continue
#     }
#     append signals [format "\n      signal %-${maxWidth}s :  %-${maxWidth}s" [lindex $line 0] [lindex $line 1]]
#   }
#   set ports2Signals {}
#   foreach port [lsort -dictionary $inPorts] {
# 	set port_name [get_property NAME [get_bd_ports -quiet $port]]
# 	set net [get_bd_nets -quiet -of_objects [get_bd_ports -quiet $port]]
# 	if {$net != ""} {
# 		set net_name [get_property NAME $net]
# 		append ports2Signals "\t$net_name <= $port_name;\n"
# 	} else {
# 		catch {common::send_msg_id "bd2vhdl   port-2" "CRITICAL WARNING" "${port_name}: port nepripojen!"}
# 	}
#   }
#   foreach port [lsort -dictionary $outPorts] {
# 	set port_name [get_property NAME [get_bd_ports -quiet $port]]
# 	set net [get_bd_nets -quiet -of_objects [get_bd_ports -quiet $port]]
# 	if {$net != ""} {
# 		set net_name [get_property NAME $net]
# 		append ports2Signals "\t$port_name <= $net_name;\n"
# 	} else {
# 		catch {common::send_msg_id "bd2vhdl   port-3" "CRITICAL WARNING" "${port_name}: port nepripojen!"}
# 	}
#   }
#   set debounce false
#   set components {}
#   set modules {}
#   set body [getIPs "" debounce components modules]
#   
#   if {$debounce} {
# 	  append components $debounce_component
#   }
#   # Now that the last semi-colon is replaced, add the header and footer
#   set content [format "library IEEE;
# use IEEE.std_logic_1164.all;
# 
# library xil_defaultlib;
# use xil_defaultlib.all;
# 
# entity ${module}_vhdl is
#    port (%s
#    );
# end entity ${module}_vhdl;
# 
# architecture Behavioral of ${module}_vhdl is
# %s
# %s
# begin
# %s
# %s
# end Behavioral;" $content $components $signals $ports2Signals $body]
# 
#   append content $modules
# 
#   if {$debounce} {
# 	  append content $debounce_code
#   }
# 
#   return $content
# }
# set name [current_bd_design -quiet]
# if {$name == ""} {
#     common::send_msg_id -continue "bd2vhdl design-2" "ERROR" "Je potreba otevrit block design!"
# 	return
# }
# save_bd_design $name
# validate_bd_design -force
# if { [llength [get_bd_ports]] > 0 } {
# 	puts "\n##### ${name} #####"
# 	set content [vhdlTemplate $name]
# 	set PROJ_DIR [get_property DIRECTORY [current_project]]
# 	set PROJ_DIR [file normalize $PROJ_DIR]
# 	set tmp_dir [file join $PROJ_DIR "tmp"]
# 	file mkdir $tmp_dir
# 	set filename "${name}.vhd"
# 	set filename_path [file join $tmp_dir $filename]
# 	# Save the template
# 	set mode {w}
# 	puts "\nCreating VHDL for Design $name in [file normalize $filename]\n"
# 	set tfh [open $filename_path $mode]
# 	puts $tfh $content
# 	close $tfh
# 
# 	import_files -force -norecurse $filename_path
# 	common::send_msg_id "bd2vhdl design-1" "INFO" "${name}_vhdl.vhd vygenerovan"
# } else {
# 	common::send_msg_id -continue "bd2vhdl design-3" "ERROR" "${name} neobsahuje zadne porty!"
# }

##### counter #####

Creating VHDL for Design counter in X:/SAP/lab5/counter.vhd

INFO: [bd2vhdl design-1] counter_vhdl.vhd vygenerovan
update_compile_order -fileset sources_1
set_property top counter_vhdl [current_fileset]
set_property top_lib xil_defaultlib [current_fileset]
set_property top_arch Behavioral [current_fileset]
set_property top_file X:/SAP/lab5/lab5.srcs/sources_1/imports/tmp/counter.vhd [current_fileset]
update_compile_order -fileset sources_1
source X:/SAP/lib_SAP_2022_02_02/gen_bd_vhdl.tcl
# proc sortPorts { ports &bus &bit } {
# 
#   upvar ${&bus} busPorts
#   upvar ${&bit} bitPorts
#   array set busPorts [list]
#   set bitPorts [list]
# 
#   foreach port $ports {
#     set name [get_property -quiet NAME [get_bd_ports $port]]
# 	set busStart [get_property -quiet LEFT [get_bd_ports $port]]
#     set busStop  [get_property -quiet RIGHT  [get_bd_ports $port]]
#     if {$busStart != {}} {
#     #   set busWidth [get_property -quiet BUS_WIDTH [get_ports $port]]
#       array set busPorts [list $name [list $busStop $busStart]]
#     } else {
#       lappend bitPorts $name
#     }
#   }
#   return 0
# }
# proc sortPins { pins &bus &bit } {
# 
#   upvar ${&bus} busPins
#   upvar ${&bit} bitPins
#   array set busPins [list]
#   array set bitPins [list]
# 
#   foreach pin $pins {
#     set name [get_property -quiet NAME [get_bd_pins $pin]]
# 	set dir [get_property -quiet DIR [get_bd_pins $pin]]
# 	set busStart [get_property -quiet LEFT [get_bd_pins $pin]]
#     set busStop  [get_property -quiet RIGHT  [get_bd_pins $pin]]
# 	set net [get_bd_nets -quiet -of_objects [get_bd_pins $pin]]
# 	if {$net != ""} {
# 		set net_name [get_property -quiet NAME $net]
# 	} else {
# 		if {$dir == "I"} {
# 			if {$busStart != {}} {
# 				set net_name "(others => '0')"
# 				catch {common::send_msg_id "bd2vhdl    pin-2" "CRITICAL WARNING" "${pin}: nepripojen, bude pripojen k '0'"}
# 			} else {
# 				set net_name "'0'"
# 				catch {common::send_msg_id "bd2vhdl    pin-2" "CRITICAL WARNING" "${pin}: nepripojen, bude pripojen k '0'"}
# 			}
# 		} else {
# 			set net_name "open"
# 			catch {common::send_msg_id "bd2vhdl    pin-3" "CRITICAL WARNING" "${pin}: pin odstranen, vystup neni pripojen!"}
# 		}
# 	}
# 	if {$busStart != {}} {
# 		array set busPins [list $name [list $busStop $busStart $net_name]]
# 	} else {
# 		array set bitPins [list $name $net_name]
# 	}
#   }
#   return 0
# }
# proc sortNets { nets &bus &bit } {
# 
#   upvar ${&bus} busNets
#   upvar ${&bit} bitNets
#   array set busNets [list ]
#   set bitNets [list]
# 
#   foreach net $nets {
#     set name [get_property -quiet NAME [get_bd_nets $net]]
# 	set pin [lindex [get_bd_pins -of_objects [get_bd_nets $net]] 0]
# 	set busStart [get_property -quiet LEFT [get_bd_pins $pin]]
#     set busStop  [get_property -quiet RIGHT  [get_bd_pins $pin]]
#     if {$busStart != {}} {
#     #   set busWidth [get_property -quiet BUS_WIDTH [get_ports $port]]
#       array set busNets [list $name [list $busStop $busStart]]
#     } else {
#       lappend bitNets $name
#     }
#   }
#   return 0
# }
# proc array2sortedList { &ar } {
# 
#   upvar ${&ar} ar
#   set sortedList [list]
#   foreach key [lsort -dictionary [array names ar]] {
#     lappend sortedList $key
#     lappend sortedList $ar($key)
#   }
#   return $sortedList
# }
# proc getInPinNet { cell pin default_value} {
# 	set pin [get_bd_pins -quiet $pin]
# 	set net [get_bd_nets -quiet -of_objects $pin]
# 	if {$net == ""} {
# 		catch {common::send_msg_id "bd2vhdl    pin-2" "CRITICAL WARNING" "${pin} nepripojen, bude pripojeno k $default_value"}
# 		set net_name $default_value
# 	} else {
# 		set net_name [get_property NAME $net]
# 	}
# 	return $net_name
# }
# proc getGate { cell  function} {
# 	set inputs_count [get_property CONFIG.Inputs [get_bd_cells -quiet $cell]]
# 	set content {}
# 	set prom {}
# 	set name [get_property NAME $cell]
# 	append content [format "\n\t-- %s\n" $name]
# 	for {set i 0} { $i < $inputs_count } { incr i } {
# 		set cfg [format "CONFIG.I%u_Inverted" $i]
# 		set pin [format "%s/I%u" $cell $i]
# 		set inverted [get_property $cfg  [get_bd_cells -quiet $cell]]
# 		#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 		set net_name [getInPinNet $cell $pin "\'0\'"]
# 		#set net_name [get_property NAME $net]
# 		if {$inverted == "true"} {
# 			append prom [format "not(%s)" $net_name]
# 		} else {
# 			append prom [format "%s" $net_name]
# 		}
# 		if {$i < ($inputs_count-1)} {
# 			append prom [format " %s " $function]
# 		}
# 	}
# 	set cfg [format "CONFIG.O_Inverted" $i]
# 	set pin [format "%s/O" $cell]
# 	set inverted [get_property $cfg  [get_bd_cells -quiet $cell]]
# 	set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 	if {$net != ""} {
# 		set out_name [get_property NAME $net]
# 		if {$inverted == "true"} {
# 			append content [format "\t%s <= not(%s);\n" $out_name $prom];	
# 		} else {
# 			append content [format "\t%s <= %s;\n" $out_name $prom];
# 		}
# 		return $content
# 	} else {
# 		catch {common::send_msg_id "bd2vhdl  jadro-3" "CRITICAL WARNING" "${cell}: odstraneno, vystup neni pripojen!"}
# 		return [append content "\t-- odstraneno, vystup neni pripojen\n"]
# 	}
# }
# proc getBuf { cell  function } {
# 	set content {}
# 	set name [get_property NAME $cell]
# 	append content [format "\n\t-- %s\n" $name]
# 
# 	set pin [format "%s/I" $cell]
# 	#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 	#set net_name [get_property NAME $net]
# 	set net_name [getInPinNet $cell $pin "\'0\'"]
# 
# 	set pin [format "%s/O" $cell]
# 	set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 	if {$net != ""} {
# 		set out_name [get_property NAME $net]
# 		if {$function == true} {
# 			append content [format "\t%s <= not(%s);\n" $out_name $net_name];	
# 		} else {
# 			append content  [format "\t%s <= %s;\n" $out_name $net_name];
# 		}
# 		return $content
# 	} else {
# 		catch {common::send_msg_id "bd2vhdl  jadro-3" "CRITICAL WARNING" "${cell}: odstraneno, vystup neni pripojen!"}
# 		return [append content "\t-- odstraneno, vystup neni pripojen\n"]
# 	}
# }
# proc getSource { cell  function } {
# 	set content {}
# 	set name [get_property NAME $cell]
# 	append content [format "\n\t-- %s\n" $name]
# 
# 	set pin [format "%s/O" $cell]
# 	set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 	if {$net != ""} {
# 		set out_name [get_property NAME $net]
# 		if {$function == true} {
# 			append content [format "\t%s <= '1';\n" $out_name];	
# 		} else {
# 			append content [format "\t%s <= '0';\n" $out_name];
# 		}
# 		return $content
# 	} else {
# 		catch {common::send_msg_id "bd2vhdl  jadro-3" "CRITICAL WARNING" "${cell}: odstraneno, vystup neni pripojen!"}
# 		return [append content "\t-- odstraneno, vystup neni pripojen\n"]
# 	}
# }
# proc getSplitter { cell } {
# 	set width [get_property CONFIG.WIDTH [get_bd_cells -quiet $cell]]
# 	set pin [format "%s/I" $cell]
# 	set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 	if {$net != ""} {
# 		set in_name [get_property NAME $net]
# 		set content {}
# 		set name [get_property NAME $cell]
# 		append content [format "\n\t-- %s\n" $name]
# 		for {set i 0} { $i < $width } { incr i } {
# 			set pin [format "%s/O%u" $cell $i]
# 			set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 			if {$net != ""} {
# 				set net_name [get_property NAME $net]
# 				append content [format "\t%s <= %s(%u);\n" $net_name $in_name $i]
# 			} else {
# 				catch {common::send_msg_id "bd2vhdl  jadro-3" "CRITICAL WARNING" "${cell}: ${pin} odstranen, vystup neni pripojen!"}
# 			}
# 		}
# 	} else {
# 		set content {}
# 		set name [get_property NAME $cell]
# 		append content [format "\n\t-- %s\n" $name]
# 		for {set i 0} { $i < $width } { incr i } {
# 			set pin [format "%s/O%u" $cell $i]
# 			set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 			if {$net != ""} {
# 				set net_name [get_property NAME $net]
# 				append content [format "\t%s <= \'0\';\n" $net_name $i]
# 				catch {common::send_msg_id "bd2vhdl  jadro-2" "CRITICAL WARNING" "${cell} nepripojen vstup, ${net_name} bude pripojeno k \'0\'"}
# 			} else {
# 				catch {common::send_msg_id "bd2vhdl  jadro-3" "CRITICAL WARNING" "${cell}: ${pin} odstranen, vystup neni pripojen!"}
# 			}
# 		}
# 	}
# 	return $content
# }
# proc getDff { cell } {
# 	set ce [get_property CONFIG.CE [get_bd_cells -quiet $cell]]
# 	set reset [get_property CONFIG.Reset [get_bd_cells -quiet $cell]]
# 
# 	set content {}
# 	set name [get_property NAME $cell]
# 	append content [format "\n\t-- %s\n" $name]
# 
# 	set pin [format "%s/q" $cell]
# 	set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 	if {$net != ""} {
# 		set out_name [get_property NAME $net]
# 
# 		set pin [format "%s/clk" $cell]
# 		set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 		if {$net == ""} {
# 			catch {common::send_msg_id "bd2vhdl  jadro-3" "CRITICAL WARNING" "${cell}: odstraneno, nejsou pripojene hodiny!"}
# 			return [append content "\t-- odstraneno, , nejsou pripojene hodiny!\n"]
# 		}
# 		#set clk_name [get_property NAME $net]
# 		set clk_name [getInPinNet $cell $pin "\'0\'"]
# 
# 		set pin [format "%s/d" $cell]
# 		#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 		#set in_name [get_property NAME $net]
# 		set in_name [getInPinNet $cell $pin "\'0\'"]
# 
# 		if {$ce == "true"} {
# 			set pin [format "%s/ce" $cell]
# 			#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 			#set ce_name [get_property NAME $net]
# 			set ce_name [getInPinNet $cell $pin "\'1\'"]
# 		}
# 
# 		if {$reset == "true"} {
# 			set pin [format "%s/reset" $cell]
# 			#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 			#set reset_name [get_property NAME $net]
# 			set reset_name [getInPinNet $cell $pin "\'0\'"]
# 		}
# 
# 		append content [format "\tprocess (%s)\n\tbegin\n" $clk_name]
# 		append content [format "\t\tif rising_edge(%s) then\n" $clk_name]
# 		if {$reset == "true"} {
# 			append content [format "\t\t\tif %s = '1' then\n\t\t\t\t%s <= '0';\n\t\t\tels" $reset_name $out_name]
# 		} else {
# 			append content "\t\t\t"
# 		}
# 
# 		if {$ce == "true"} {
# 			append content [format "if %s = '1' then\n" $ce_name]
# 			append content [format "\t\t\t\t%s <= %s;\n" $out_name $in_name]
# 			append content "\t\t\tend if;\n"
# 		} else {
# 			if {$reset == "true"} {
# 				append content [format "e\n\t\t\t\t%s <= %s;\n" $out_name $in_name]
# 				append content "\t\t\tend if;\n"
# 			} else {
# 				append content [format "%s <= %s;\n" $out_name $in_name]
# 			}
# 		}
# 
# 		append content "\t\tend if;\n\tend process;\n";
# 	} else {
# 		catch {common::send_msg_id "bd2vhdl jadro-3" "CRITICAL WARNING" "${cell}: odstraneno, vystup neni pripojen!"}
# 		return [append content "\t-- odstraneno, vystup neni pripojen\n"]
# 	}
# 	return $content
# }
# proc getMux { cell } {
# 	set ports_count [get_property CONFIG.Data_Ports [get_bd_cells -quiet $cell]]
# 	set width [get_property CONFIG.WIDTH [get_bd_cells -quiet $cell]]
# 	set i0_bus [get_property CONFIG.I0_BUS [get_bd_cells -quiet $cell]]
# 	set i1_bus [get_property CONFIG.I1_BUS [get_bd_cells -quiet $cell]]
# 	set i2_bus [get_property CONFIG.I2_BUS [get_bd_cells -quiet $cell]]
# 	set i3_bus [get_property CONFIG.I3_BUS [get_bd_cells -quiet $cell]]
# 	set o_bus [get_property CONFIG.O_BUS [get_bd_cells -quiet $cell]]
# 
# 	set content {}
# 	set name [get_property NAME $cell]
# 	append content [format "\n\t-- %s\n" $name]
# 
# 	for {set i 0} { $i < $width } { incr i } {
# 		if {$o_bus == "true"} {
# 			set pin [format "%s/O" $cell]
# 			set vecO [format "(%u)" $i]
# 		} else {
# 			set pin [format "%s/O_%u" $cell $i]
# 			set vecO ""
# 		}
# 		set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 		if {$net != ""} {
# 			set out_name [get_property NAME $net]
# 
# 			if {$i0_bus == "true"} {
# 				set pin [format "%s/I0" $cell]
# 				set vec0 [format "(%u)" $i]
# 			} else {
# 				set pin [format "%s/I0_%u" $cell $i]
# 				set vec0 ""
# 			}
# 			#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 			#set i0_name [get_property NAME $net]
# 			set i0_name [getInPinNet $cell $pin "\'0\'"]
# 			if {$i0_name == "'0'"} {
# 				set vec0 ""
# 			}
# 
# 			if {$i1_bus == "true"} {
# 				set pin [format "%s/I1" $cell]
# 				set vec1 [format "(%u)" $i]
# 			} else {
# 				set pin [format "%s/I1_%u" $cell $i]
# 				set vec1 ""
# 			}
# 			#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 			#set i1_name [get_property NAME $net]
# 			set i1_name [getInPinNet $cell $pin "\'0\'"]
# 			if {$i1_name == "'0'"} {
# 				set vec1 ""
# 			}
# 
# 			set pin [format "%s/Sel0" $cell]
# 			#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 			#set sel0_name [get_property NAME $net]
# 			set sel0_name [getInPinNet $cell $pin "\'0\'"]
# 
# 			if {$ports_count > 2} {
# 				if {$i2_bus == "true"} {
# 					set pin [format "%s/I2" $cell]
# 					set vec2 [format "(%u)" $i]
# 				} else {
# 					set pin [format "%s/I2_%u" $cell $i]
# 					set vec2 ""
# 				}
# 				#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 				#set i2_name [get_property NAME $net]
# 				set i2_name [getInPinNet $cell $pin "\'0\'"]
# 				if {$i2_name == "'0'"} {
# 					set vec2 ""
# 				}
# 
# 				if {$i3_bus == "true"} {
# 					set pin [format "%s/I3" $cell]
# 					set vec3 [format "(%u)" $i]
# 				} else {
# 					set pin [format "%s/I3_%u" $cell $i]
# 					set vec3 ""
# 				}
# 				#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 				#set i3_name [get_property NAME $net]
# 				set i3_name [getInPinNet $cell $pin "\'0\'"]
# 				if {$i3_name == "'0'"} {
# 					set vec3 ""
# 				}
# 
# 				set pin [format "%s/Sel1" $cell]
# 				#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 				#set sel1_name [get_property NAME $net]
# 				set sel1_name [getInPinNet $cell $pin "\'0\'"]
# 				
# 				if {$sel0_name != "'0'" && $sel1_name != "'0'"} {
# 					append content [format "\t%s%s <= %s%s when %s = '0' and %s = '0' else\n" $out_name $vecO $i0_name $vec0 $sel1_name $sel0_name]
# 					append content [format "\t\t%s%s when %s = '0' and %s = '1' else\n" $i1_name $vec1 $sel1_name $sel0_name]
# 					append content [format "\t\t%s%s when %s = '1' and %s = '0' else\n" $i2_name $vec2 $sel1_name $sel0_name]
# 					append content [format "\t\t%s%s when %s = '1' and %s = '1' else '0';\n\n" $i3_name $vec3 $sel1_name $sel0_name]
# 				} else {
# 					append content [format "\t%s%s <= %s%s;\n" $out_name $vecO $i0_name $vec0]
# 				}
# 			} else {
# 				if {$sel0_name != "'0'"} {
# 					append content [format "\t%s%s <= %s%s when (%s = '1') else %s%s;\n" $out_name $vecO $i1_name $vec1 $sel0_name $i0_name $vec0]
# 				} else {
# 					append content [format "\t%s%s <= %s%s;\n" $out_name $vecO $i0_name $vec0]
# 				}
# 			}
# 		} else {
# 			catch {common::send_msg_id "bd2vhdl  jadro-3" "CRITICAL WARNING" " ${cell}: pin ${pin} odstranen, vystup neni pripojen!"}
# 			return [append content "\t-- ${pin} odstranen, vystup neni pripojen\n"]
# 		}
# 		
# 	}
# 	return $content
# }
# proc getDebounce { cell } {
# 	set width [get_property CONFIG.width [get_bd_cells -quiet $cell]]
# 
# 	set content {}
# 	set name [get_property NAME $cell]
# 	append content [format "\n\t-- %s\n" $name]
# 
# 	set pin [format "%s/tl_out" $cell]
# 	set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 	if {$net != ""} {
# 		set tl_out [get_property NAME $net]
# 
# 		set pin [format "%s/clk" $cell]
# 		set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 		if {$net != ""} {
# 			set clk [get_property NAME $net]
# 
# 			set pin [format "%s/tl_in" $cell]
# 			#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 			#set tl_in [get_property NAME $net]
# 			set tl_in [getInPinNet $cell $pin "\'0\'"]
# 
# 			append content [ format "\t%s : debounce\n\t\tgeneric map (\n\t\t\twidth => %s\n\t\t)\n\t\tport map (\n\t\t\tclk	=> %s,\n\t\t\ttl_in	=> %s,\n\t\t\ttl_out	=> %s\n\t\t);\n" $name $width $clk $tl_in $tl_out]
# 		} else {
# 			catch {common::send_msg_id "bd2vhdl  jadro-3" "CRITICAL WARNING" "${cell}: odstraneno, nejsou pripojene hodiny!"}
# 			return [append content "\t-- odstraneno, , nejsou pripojene hodiny!\n"]	
# 		}
# 	} else {
# 		catch {common::send_msg_id "bd2vhdl  jadro-3" "CRITICAL WARNING" "${cell}: odstraneno, vystup neni pripojen!"}
# 		return [append content "\t-- odstraneno, vystup neni pripojen\n"]
# 	}
# 	
# 	return $content
# }
# set debounce_component "\tcomponent debounce
# \t\tgeneric (
# \t\t\twidth: integer := 22
# \t\t);
# \t\tport (
# \t\t\tclk    : in  std_logic;
# \t\t\ttl_in  : in  std_logic;
# \t\t\ttl_out : out std_logic
# \t\t);
# \tend component;\n"
# proc getModule_ref { cell components component_name} {
# 	upvar $components comps
# 
# 	set inPins [lsort [get_bd_pins -quiet -of_objects [get_bd_cells $cell] -filter DIR==I]]
# 	array set inputBusPins [list]
# 	array set inputBitPins [list]
# 	sortPins $inPins inputBusPins inputBitPins
# 
# 	set outPins [lsort [get_bd_pins -quiet -of_objects [get_bd_cells $cell] -filter DIR==O]]
# 	array set outputBusPins [list]
# 	array set outputBitPins [list]
# 	sortPins $outPins outputBusPins outputBitPins
# 
# 	set content {}
# 	set name [get_property NAME $cell]
# 	append content [format "\n\t-- %s\n" $name]
# 
# 	set lines [list]
# 	foreach {pin net} [array2sortedList inputBitPins] {
#     	lappend lines [list "$pin" "in  std_logic;" "$net"]
#   	}
# 	foreach {pin busInfo} [array2sortedList inputBusPins] {
# 		lassign $busInfo stop start net
# 		if {$start>$stop} {
# 			lappend lines [list "$pin" "in  std_logic_vector($start downto $stop);" "$net"]
# 		} else {
# 			lappend lines [list "$pin" "in  std_logic_vector($start to $stop);" "$net"]
# 		}
#   	}
# 	foreach {pin net} [array2sortedList outputBitPins] {
#     	lappend lines [list "$pin" "out std_logic;" "$net"]
# 	}
# 	foreach {pin busInfo} [array2sortedList outputBusPins] {
# 		lassign $busInfo stop start net
# 		if {$start>$stop} {
# 			lappend lines [list "$pin"  "out std_logic_vector($start downto $stop);" "$net"]
# 		} else {
# 			lappend lines [list "$pin" "out std_logic_vector($start to $stop);" "$net"]
# 		}
# 	}
# 	# Detect maximum column width to align columns
# 	foreach line $lines {
# 		set width [string length [lindex $line 0]]
# 		if {![info exist maxWidth] || $maxWidth < $width} {
# 			set maxWidth $width
# 		}
# 	}
# 	set ports {}
# 	set port_map {}
# 	foreach line $lines {
# 		append ports [format "\n\t\t\t%-${maxWidth}s :  %-${maxWidth}s" [lindex $line 0] [lindex $line 1]]
# 		append port_map [format "\n\t\t\t%-${maxWidth}s =>  %-${maxWidth}s," [lindex $line 0] [lindex $line 2]]
# 	}
# 	# Remove the last semi-colon
#   	set index [string last {;} $ports]
#   	set ports [string replace $ports $index $index {}]
# 	# Remove the last ,
#   	set index [string last {,} $port_map]
#   	set port_map [string replace $port_map $index $index {}]
# 
# 	# nepridavat pokud uz tam ta komponenta je
# 	if {[string first $component_name $comps] < 0} {
# 		append comps "\tcomponent ${component_name}\n\t\tport ("
# 		append comps $ports
# 		append comps "\n\t\t);\n\tend component;\n\n"
# 	}
# 	append content "\tinst_${name} : ${component_name}\n"
# 	append content "\t\tport map ("
# 	append content $port_map
# 	append content "\n\t\t);\n"
# }
# proc getHier { cell debounce components modules} {
# 	global debounce_component
# 	upvar $components comps
# 	upvar $modules mods
# 	upvar $debounce debs
# 
# 	set inPins [lsort [get_bd_pins -quiet -of_objects [get_bd_cells $cell] -filter DIR==I]]
# 	array set inputBusPins [list]
# 	array set inputBitPins [list]
# 	sortPins $inPins inputBusPins inputBitPins
# 
# 	set outPins [lsort [get_bd_pins -quiet -of_objects [get_bd_cells $cell] -filter DIR==O]]
# 	array set outputBusPins [list]
# 	array set outputBitPins [list]
# 	sortPins $outPins outputBusPins outputBitPins
# 
# 	set content {}
# 	set name [get_property NAME $cell]
# 	append content [format "\n\t-- %s\n" $name]
# 
# 	set lines [list]
# 	foreach {pin net} [array2sortedList inputBitPins] {
#     	lappend lines [list "$pin" "in  std_logic;" "$net"]
#   	}
# 	foreach {pin busInfo} [array2sortedList inputBusPins] {
# 		lassign $busInfo stop start net
# 		if {$start>$stop} {
# 			lappend lines [list "$pin" "in  std_logic_vector($start downto $stop);" "$net"]
# 		} else {
# 			lappend lines [list "$pin" "in  std_logic_vector($start to $stop);" "$net"]
# 		}
#   	}
# 	foreach {pin net} [array2sortedList outputBitPins] {
#     	lappend lines [list "$pin" "out std_logic;" "$net"]
# 	}
# 	foreach {pin busInfo} [array2sortedList outputBusPins] {
# 		lassign $busInfo stop start net
# 		if {$start>$stop} {
# 			lappend lines [list "$pin"  "out std_logic_vector($start downto $stop);" "$net"]
# 		} else {
# 			lappend lines [list "$pin" "out std_logic_vector($start to $stop);" "$net"]
# 		}
# 	}
# 	# Detect maximum column width to align columns
# 	foreach line $lines {
# 		set width [string length [lindex $line 0]]
# 		if {![info exist maxWidth] || $maxWidth < $width} {
# 			set maxWidth $width
# 		}
# 	}
# 	set ports {}
# 	set port_map {}
# 	foreach line $lines {
# 		append ports [format "\n\t\t\t%-${maxWidth}s :  %-${maxWidth}s" [lindex $line 0] [lindex $line 1]]
# 		append port_map [format "\n\t\t\t%-${maxWidth}s =>  %-${maxWidth}s," [lindex $line 0] [lindex $line 2]]
# 	}
# 	# Remove the last semi-colon
#   	set index [string last {;} $ports]
#   	set ports [string replace $ports $index $index {}]
# 	# Remove the last ,
#   	set index [string last {,} $port_map]
#   	set port_map [string replace $port_map $index $index {}]
# 
# 	set filtr [format {PATH !~ "%s/.*/.*"} $cell]
# 	set nets [lsort [get_bd_nets -quiet -of_objects [get_bd_cells $cell] -regexp -filter $filtr]]
# 	array set busNets [list ]
# 	set bitNets [list]
# 	sortNets $nets busNets bitNets
# 
# 	set lines [list]
# 	# Process single bit nets
# 	foreach net [lsort -dictionary $bitNets] {
# 		lappend lines [list "$net" "  std_logic;"]
# 	}
# 	# Process bus nets
# 	foreach {net busInfo} [array2sortedList busNets] {
# 		lassign $busInfo stop start
# 		if {$start>$stop} {
# 		lappend lines [list "$net" "  std_logic_vector($start downto $stop);"]
# 		} else {
# 		lappend lines [list "$net" "  std_logic_vector($start to $stop);"]
# 		}
# 	}
# 
# 	# Detect maximum column width to align columns
# 	foreach line $lines {
# 		set width [string length [lindex $line 0]]
# 		if {![info exist maxWidth] || $maxWidth < $width} {
# 			set maxWidth $width
# 		}
# 	}
# 
# 	# Build the content of the stub:
# 	set signals {}
# 	foreach line $lines {
# 		append signals [format "\n\tsignal %-${maxWidth}s :  %-${maxWidth}s" [lindex $line 0] [lindex $line 1]]
# 	}
#   set ports2Signals {}
#     foreach net [lsort -dictionary $nets] {
#         set net_name [get_property NAME [get_bd_nets -quiet $net]]
#         set ports_b [get_bd_ports -quiet -of_objects [get_bd_nets -quiet $net]]
#         if {$ports == {}} {
#             break
#         }
#         foreach port [lsort -dictionary $ports_b] {
#             set port_name [get_property NAME [get_bd_pins -quiet $port]]
#             set dir [get_property DIR [get_bd_pins -quiet $port]]
#             if {$dir == "I"} {
#                 append ports2Signals "\t$net_name <= $port_name;\n"    
#             } else {
#                 append ports2Signals "\t$port_name <= $net_name;\n"
#             }
#         }
#     }
#   
# 	set debounce_inner false
#   	set components_inner {}
#   	set modules_inner {}
#   	set body [getIPs $cell debounce_inner components_inner modules_inner]
# 	if {$debounce_inner} {
# 		puts "######################################################################x"
# 		append components_inner $debounce_component
# 		set debs true
#     }
# 	
# 	set comp_name [string replace $cell 0 0 {}]
#     set comp_name [string map {/ _} $comp_name]
#     append comps "\tcomponent ${comp_name}\n\t\tport ("
#     append mods "\n\nlibrary IEEE;\nuse IEEE.std_logic_1164.all;\n\n"
#     append mods "entity ${comp_name} is\n\tport("
#     append mods $ports
#     append comps $ports
#     append mods "\n\t\t);\nend entity ${comp_name};\n\narchitecture Behavioral of ${comp_name} is\n"
#     append mods $components_inner
#     append mods $signals
#     append mods "\nbegin\n"
#     append mods $ports2Signals
#     append mods $body
#     append mods "\nend Behavioral;"
#     append comps "\n\t\t);\n\tend component;\n\n"
#     append content "\tinst_${comp_name} : ${comp_name}\n"
#     append content "\t\tport map ("
#     append content $port_map
#     append content "\n\t\t);\n"
#     append mods $modules_inner
# 
# 	return $content
# }
# proc getIPs { parent debounce components modules} {
#   upvar $debounce deb
#   upvar $components comps
#   upvar $modules mods
#   if {$parent == ""} {
# 	set cells [get_bd_cells]	  
#   } else {
# 	set filtr [format {PATH !~ "%s/.*/.*"} $parent]
# 	set cells [get_bd_cells -of_objects [get_bd_cells $parent] -regexp -filter $filtr]
#   }
#   
#   set content {}
#   foreach cell [lsort -dictionary $cells] {
# 	set type [get_property TYPE [get_bd_cells -quiet $cell]]
# 	set name [get_property NAME [get_bd_cells -quiet $cell]]
# 	set vlnv [get_property VLNV [get_bd_cells -quiet $cell]]
# 	if {$type == "ip"} {
# 		set vlnvs [split $vlnv ":"]
# 		if {[lindex $vlnvs 0] == "FIT"} {
# 		 	switch [lindex $vlnvs 2] {
# 				"or" {
# 					append content [getGate $cell "or"]
# 				}
# 				"and" {
# 					append content [getGate $cell "and"]
# 				}
# 				"xor" {
# 					append content [getGate $cell "xor"]
# 				}
# 				"buf" {
# 					append content [getBuf $cell false]
# 				}
# 				"inv" {
# 					append content [getBuf $cell true]
# 				}
# 				"gnd" {
# 					append content [getSource $cell false]
# 				}
# 				"vcc" {
# 					append content [getSource $cell true]
# 				}
# 				"splitter" {
# 					append content [getSplitter $cell]
# 				}
# 				"mux" {
# 					append content [getMux $cell]
# 				}
# 				"dff" {
# 					append content [getDff $cell]
# 				}
# 				"debounce" {
# 					append content [getDebounce $cell]
# 					set deb true
# 				}
# 			}
# 		} elseif {[lindex $vlnvs 0] == "xilinx.com" && [lindex $vlnvs 1] == "module_ref"} {
# 			append content [getModule_ref $cell comps [lindex $vlnvs 2]]
# 		}
# 			
# 	} elseif {$type == "hier"} {
# 		append content [getHier $cell deb comps mods]
# 	}
#   }
#   return $content
# }
# set debounce_code "\n\n\nlibrary IEEE;
# use IEEE.STD_LOGIC_1164.ALL;
# use ieee.std_logic_unsigned.all;
# 
# entity debounce is
#     generic (
# 		width: integer := 22 -- 100 MHz clock -> 4 - simulation (90 ns); 22 - synthesis (ca. 20 ms)
# 	);
#     port (
# 		clk : in STD_LOGIC;
#         tl_in : in STD_LOGIC;
#         tl_out : out STD_LOGIC
# 	);
# end entity debounce;
# 
# architecture Behavioral of debounce is
# 
# signal cnt       : std_logic_vector(width-1 downto 0) := (others => '0');
# signal reset, ce : std_logic := '0';
# signal tl_prev   : std_logic := '0';
# 
# 
# begin
# 
#     counter: process(clk) begin
#         if rising_edge(clk) then 
#             if (reset = '1') then
#                 cnt <= (others => '0');
#             elsif (ce = '1') then
#                 cnt <= cnt + 1;
#             end if;
#         end if;
#     end process;
# 
#     process(clk) begin
#         if rising_edge(clk) then
#             if (tl_prev /= tl_in) then
#                 reset <= '1';
#             else 
#                 reset <= '0';
#             end if;
#         end if;
#     end process;
#                 
#     process(clk) begin
#         if rising_edge(clk) then
#             if (reset = '1') then
#                 tl_prev <= tl_in;
#             end if;
#         end if;
#     end process;
#                 
#     process(clk) begin
#         if rising_edge(clk) then
#             if ((cnt(width-1) = '1') and (cnt(0) = '0')) then
#                 tl_out <= tl_prev;
#             end if;
#         end if;
#     end process;
#                 
# 
#     ce <= '0' when ((cnt(width-1) = '1') and (cnt(0) = '1'))
#                 else '1';
# 
# end Behavioral;\n"
# proc vhdlTemplate { module } {
#   global debounce_code
#   global debounce_component
# 
#   set inPorts [lsort [get_bd_ports -quiet -filter DIR==I]]
#   array set inputBusPorts [list ]
#   set inputBitPorts [list]
#   sortPorts $inPorts inputBusPorts inputBitPorts
# 
#   set outPorts [lsort [get_bd_ports -quiet -filter DIR==O]]
#   array set outputBusPorts [list ]
#   set outputBitPorts [list]
#   sortPorts $outPorts outputBusPorts outputBitPorts
# 
#   set inoutPorts [lsort [get_bd_ports -quiet -filter DIR==IO]]
#   array set inoutBusPorts [list ]
#   set inoutBitPorts [list]
#   sortPorts $inoutPorts inoutBusPorts inoutBitPorts
# 
#   set lines [list]
#   # Process input single bit ports
# #   lappend lines "-- Input Ports - Single Bit"
#   foreach port [lsort -dictionary $inputBitPorts] {
#     lappend lines [list "$port" "in  std_logic;"]
#   }
#   # Process input bus ports
# #   lappend lines "-- Input Ports - Busses"
#   foreach {port busInfo} [array2sortedList inputBusPorts] {
#     lassign $busInfo stop start
#     if {$start>$stop} {
#       lappend lines [list "$port" "in  std_logic_vector($start downto $stop);"]
#     } else {
#       lappend lines [list "$port" "in  std_logic_vector($start to $stop);"]
#     }
#   }
#   # Process output single bit ports
# #   lappend lines "-- Output Ports - Single Bit"
#   foreach port [lsort -dictionary $outputBitPorts] {
#     lappend lines [list "$port" "out std_logic;"]
#   }
#   # Process output bus ports
# #   lappend lines "-- Output Ports - Busses"
#   foreach {port busInfo} [array2sortedList outputBusPorts] {
#     lassign $busInfo stop start
#     if {$start>$stop} {
#       lappend lines [list "$port"  "out std_logic_vector($start downto $stop);"]
#     } else {
#       lappend lines [list "$port" "out std_logic_vector($start to $stop);"]
#     }
#   }
#   # Process inout single bit ports
# #   lappend lines "-- InOut Ports - Single Bit"
#   foreach port [lsort -dictionary $inoutBitPorts] {
#     lappend lines [list "$port" "inout  std_logic;"]
#   }
#   # Process inout bus ports
# #   lappend lines "-- InOut Ports - Busses"
#   foreach {port busInfo} [array2sortedList inoutBusPorts] {
#     lassign $busInfo stop start
#     if {$start>$stop} {
#       lappend lines [list "$port" "inout  std_logic_vector($start downto $stop);"]
#     } else {
#       lappend lines [list "$port" "inout  std_logic_vector($start to $stop);"]
#     }
#   }
# 
#   # Detect maximum column width to align columns
#   foreach line $lines {
#     if {[regexp {^\s*\-\-} $line]} {
#       # Skip lines that are just comments
#       continue
#     }
#     set width [string length [lindex $line 0]]
#     if {![info exist maxWidth] || $maxWidth < $width} {
#       set maxWidth $width
#     }
#   }
# 
#   # Build the content of the stub:
#   set content {}
#   foreach line $lines {
#     if {[regexp {^\s*\-\-} $line]} {
#       # Lines that are just comments
#       append content "\n      $line"
#       continue
#     }
#     append content [format "\n      %-${maxWidth}s :  %-${maxWidth}s" [lindex $line 0] [lindex $line 1]]
#   }
# 
#   # Remove the last semi-colon
#   set index [string last {;} $content]
#   set content [string replace $content $index $index {}]
# 
# 
#   set nets [lsort [get_bd_nets -quiet]]
#   array set busNets [list ]
#   set bitNets [list]
#   sortNets $nets busNets bitNets
# 
#   set lines [list]
#   # Process single bit nets
#   foreach net [lsort -dictionary $bitNets] {
#     lappend lines [list "$net" "  std_logic;"]
#   }
#   # Process bus nets
#   foreach {net busInfo} [array2sortedList busNets] {
#     lassign $busInfo stop start
#     if {$start>$stop} {
#       lappend lines [list "$net" "  std_logic_vector($start downto $stop);"]
#     } else {
#       lappend lines [list "$net" "  std_logic_vector($start to $stop);"]
#     }
#   }
# 
#   # Detect maximum column width to align columns
#   foreach line $lines {
#     if {[regexp {^\s*\-\-} $line]} {
#       # Skip lines that are just comments
#       continue
#     }
#     set width [string length [lindex $line 0]]
#     if {![info exist maxWidth] || $maxWidth < $width} {
#       set maxWidth $width
#     }
#   }
# 
#   # Build the content of the stub:
#   set signals {}
#   foreach line $lines {
#     if {[regexp {^\s*\-\-} $line]} {
#       # Lines that are just comments
#       append signals "\n      $line"
#       continue
#     }
#     append signals [format "\n      signal %-${maxWidth}s :  %-${maxWidth}s" [lindex $line 0] [lindex $line 1]]
#   }
#   set ports2Signals {}
#   foreach port [lsort -dictionary $inPorts] {
# 	set port_name [get_property NAME [get_bd_ports -quiet $port]]
# 	set net [get_bd_nets -quiet -of_objects [get_bd_ports -quiet $port]]
# 	if {$net != ""} {
# 		set net_name [get_property NAME $net]
# 		append ports2Signals "\t$net_name <= $port_name;\n"
# 	} else {
# 		catch {common::send_msg_id "bd2vhdl   port-2" "CRITICAL WARNING" "${port_name}: port nepripojen!"}
# 	}
#   }
#   foreach port [lsort -dictionary $outPorts] {
# 	set port_name [get_property NAME [get_bd_ports -quiet $port]]
# 	set net [get_bd_nets -quiet -of_objects [get_bd_ports -quiet $port]]
# 	if {$net != ""} {
# 		set net_name [get_property NAME $net]
# 		append ports2Signals "\t$port_name <= $net_name;\n"
# 	} else {
# 		catch {common::send_msg_id "bd2vhdl   port-3" "CRITICAL WARNING" "${port_name}: port nepripojen!"}
# 	}
#   }
#   set debounce false
#   set components {}
#   set modules {}
#   set body [getIPs "" debounce components modules]
#   
#   if {$debounce} {
# 	  append components $debounce_component
#   }
#   # Now that the last semi-colon is replaced, add the header and footer
#   set content [format "library IEEE;
# use IEEE.std_logic_1164.all;
# 
# library xil_defaultlib;
# use xil_defaultlib.all;
# 
# entity ${module}_vhdl is
#    port (%s
#    );
# end entity ${module}_vhdl;
# 
# architecture Behavioral of ${module}_vhdl is
# %s
# %s
# begin
# %s
# %s
# end Behavioral;" $content $components $signals $ports2Signals $body]
# 
#   append content $modules
# 
#   if {$debounce} {
# 	  append content $debounce_code
#   }
# 
#   return $content
# }
# set name [current_bd_design -quiet]
# if {$name == ""} {
#     common::send_msg_id -continue "bd2vhdl design-2" "ERROR" "Je potreba otevrit block design!"
# 	return
# }
# save_bd_design $name
Wrote  : <X:/SAP/lab5/lab5.srcs/sources_1/bd/counter/counter.bd> 
# validate_bd_design -force
# if { [llength [get_bd_ports]] > 0 } {
# 	puts "\n##### ${name} #####"
# 	set content [vhdlTemplate $name]
# 	set PROJ_DIR [get_property DIRECTORY [current_project]]
# 	set PROJ_DIR [file normalize $PROJ_DIR]
# 	set tmp_dir [file join $PROJ_DIR "tmp"]
# 	file mkdir $tmp_dir
# 	set filename "${name}.vhd"
# 	set filename_path [file join $tmp_dir $filename]
# 	# Save the template
# 	set mode {w}
# 	puts "\nCreating VHDL for Design $name in [file normalize $filename]\n"
# 	set tfh [open $filename_path $mode]
# 	puts $tfh $content
# 	close $tfh
# 
# 	import_files -force -norecurse $filename_path
# 	common::send_msg_id "bd2vhdl design-1" "INFO" "${name}_vhdl.vhd vygenerovan"
# } else {
# 	common::send_msg_id -continue "bd2vhdl design-3" "ERROR" "${name} neobsahuje zadne porty!"
# }

##### counter #####

Creating VHDL for Design counter in X:/SAP/lab5/counter.vhd

INFO: [bd2vhdl design-1] counter_vhdl.vhd vygenerovan
open_bd_design {X:/SAP/lab5/lab5.srcs/sources_1/bd/counter_full/counter_full.bd}
open_bd_design {X:/SAP/lab5/lab5.srcs/sources_1/bd/counter_full/counter_full.bd}
delete_bd_objs [get_bd_nets inc_1] [get_bd_nets reset_1] [get_bd_nets counter_vhdl_0_y1] [get_bd_nets debounce_0_tl_out] [get_bd_nets counter_vhdl_0_y0] [get_bd_nets counter_vhdl_0_y2] [get_bd_cells counter_vhdl_0]
create_bd_cell -type module -reference counter_vhdl counter_vhdl_0
WARNING: [IP_Flow 19-3571] IP 'counter_full_counter_vhdl_0_2' is restricted:
* Detected changes to module reference file(s).
Please select 'Report IP Status' from the 'Tools/Report' menu or run Tcl command 'report_ip_status' for more information.
set_property top counter_full_vhdl [current_fileset]
update_compile_order -fileset sources_1
connect_bd_net [get_bd_ports reset] [get_bd_pins counter_vhdl_0/reset]
connect_bd_net [get_bd_ports inc] [get_bd_pins counter_vhdl_0/inc]
connect_bd_net [get_bd_pins debounce_0/tl_out] [get_bd_pins counter_vhdl_0/clk]
WARNING: [BD 41-1731] Type mismatch between connected pins: /debounce_0/tl_out(undef) and /counter_vhdl_0/clk(clk)
connect_bd_net [get_bd_pins counter_vhdl_0/y0] [get_bd_pins decoder_7seg_0/a]
connect_bd_net [get_bd_pins counter_vhdl_0/y1] [get_bd_pins decoder_7seg_0/b]
connect_bd_net [get_bd_pins counter_vhdl_0/y2] [get_bd_pins decoder_7seg_0/c]
save_bd_design
Wrote  : <X:/SAP/lab5/lab5.srcs/sources_1/bd/counter_full/counter_full.bd> 
Wrote  : <X:/SAP/lab5/lab5.srcs/sources_1/bd/counter_full/ui/bd_7d1008b2.ui> 
source X:/SAP/lib_SAP_2022_02_02/gen_bd_vhdl.tcl
# proc sortPorts { ports &bus &bit } {
# 
#   upvar ${&bus} busPorts
#   upvar ${&bit} bitPorts
#   array set busPorts [list]
#   set bitPorts [list]
# 
#   foreach port $ports {
#     set name [get_property -quiet NAME [get_bd_ports $port]]
# 	set busStart [get_property -quiet LEFT [get_bd_ports $port]]
#     set busStop  [get_property -quiet RIGHT  [get_bd_ports $port]]
#     if {$busStart != {}} {
#     #   set busWidth [get_property -quiet BUS_WIDTH [get_ports $port]]
#       array set busPorts [list $name [list $busStop $busStart]]
#     } else {
#       lappend bitPorts $name
#     }
#   }
#   return 0
# }
# proc sortPins { pins &bus &bit } {
# 
#   upvar ${&bus} busPins
#   upvar ${&bit} bitPins
#   array set busPins [list]
#   array set bitPins [list]
# 
#   foreach pin $pins {
#     set name [get_property -quiet NAME [get_bd_pins $pin]]
# 	set dir [get_property -quiet DIR [get_bd_pins $pin]]
# 	set busStart [get_property -quiet LEFT [get_bd_pins $pin]]
#     set busStop  [get_property -quiet RIGHT  [get_bd_pins $pin]]
# 	set net [get_bd_nets -quiet -of_objects [get_bd_pins $pin]]
# 	if {$net != ""} {
# 		set net_name [get_property -quiet NAME $net]
# 	} else {
# 		if {$dir == "I"} {
# 			if {$busStart != {}} {
# 				set net_name "(others => '0')"
# 				catch {common::send_msg_id "bd2vhdl    pin-2" "CRITICAL WARNING" "${pin}: nepripojen, bude pripojen k '0'"}
# 			} else {
# 				set net_name "'0'"
# 				catch {common::send_msg_id "bd2vhdl    pin-2" "CRITICAL WARNING" "${pin}: nepripojen, bude pripojen k '0'"}
# 			}
# 		} else {
# 			set net_name "open"
# 			catch {common::send_msg_id "bd2vhdl    pin-3" "CRITICAL WARNING" "${pin}: pin odstranen, vystup neni pripojen!"}
# 		}
# 	}
# 	if {$busStart != {}} {
# 		array set busPins [list $name [list $busStop $busStart $net_name]]
# 	} else {
# 		array set bitPins [list $name $net_name]
# 	}
#   }
#   return 0
# }
# proc sortNets { nets &bus &bit } {
# 
#   upvar ${&bus} busNets
#   upvar ${&bit} bitNets
#   array set busNets [list ]
#   set bitNets [list]
# 
#   foreach net $nets {
#     set name [get_property -quiet NAME [get_bd_nets $net]]
# 	set pin [lindex [get_bd_pins -of_objects [get_bd_nets $net]] 0]
# 	set busStart [get_property -quiet LEFT [get_bd_pins $pin]]
#     set busStop  [get_property -quiet RIGHT  [get_bd_pins $pin]]
#     if {$busStart != {}} {
#     #   set busWidth [get_property -quiet BUS_WIDTH [get_ports $port]]
#       array set busNets [list $name [list $busStop $busStart]]
#     } else {
#       lappend bitNets $name
#     }
#   }
#   return 0
# }
# proc array2sortedList { &ar } {
# 
#   upvar ${&ar} ar
#   set sortedList [list]
#   foreach key [lsort -dictionary [array names ar]] {
#     lappend sortedList $key
#     lappend sortedList $ar($key)
#   }
#   return $sortedList
# }
# proc getInPinNet { cell pin default_value} {
# 	set pin [get_bd_pins -quiet $pin]
# 	set net [get_bd_nets -quiet -of_objects $pin]
# 	if {$net == ""} {
# 		catch {common::send_msg_id "bd2vhdl    pin-2" "CRITICAL WARNING" "${pin} nepripojen, bude pripojeno k $default_value"}
# 		set net_name $default_value
# 	} else {
# 		set net_name [get_property NAME $net]
# 	}
# 	return $net_name
# }
# proc getGate { cell  function} {
# 	set inputs_count [get_property CONFIG.Inputs [get_bd_cells -quiet $cell]]
# 	set content {}
# 	set prom {}
# 	set name [get_property NAME $cell]
# 	append content [format "\n\t-- %s\n" $name]
# 	for {set i 0} { $i < $inputs_count } { incr i } {
# 		set cfg [format "CONFIG.I%u_Inverted" $i]
# 		set pin [format "%s/I%u" $cell $i]
# 		set inverted [get_property $cfg  [get_bd_cells -quiet $cell]]
# 		#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 		set net_name [getInPinNet $cell $pin "\'0\'"]
# 		#set net_name [get_property NAME $net]
# 		if {$inverted == "true"} {
# 			append prom [format "not(%s)" $net_name]
# 		} else {
# 			append prom [format "%s" $net_name]
# 		}
# 		if {$i < ($inputs_count-1)} {
# 			append prom [format " %s " $function]
# 		}
# 	}
# 	set cfg [format "CONFIG.O_Inverted" $i]
# 	set pin [format "%s/O" $cell]
# 	set inverted [get_property $cfg  [get_bd_cells -quiet $cell]]
# 	set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 	if {$net != ""} {
# 		set out_name [get_property NAME $net]
# 		if {$inverted == "true"} {
# 			append content [format "\t%s <= not(%s);\n" $out_name $prom];	
# 		} else {
# 			append content [format "\t%s <= %s;\n" $out_name $prom];
# 		}
# 		return $content
# 	} else {
# 		catch {common::send_msg_id "bd2vhdl  jadro-3" "CRITICAL WARNING" "${cell}: odstraneno, vystup neni pripojen!"}
# 		return [append content "\t-- odstraneno, vystup neni pripojen\n"]
# 	}
# }
# proc getBuf { cell  function } {
# 	set content {}
# 	set name [get_property NAME $cell]
# 	append content [format "\n\t-- %s\n" $name]
# 
# 	set pin [format "%s/I" $cell]
# 	#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 	#set net_name [get_property NAME $net]
# 	set net_name [getInPinNet $cell $pin "\'0\'"]
# 
# 	set pin [format "%s/O" $cell]
# 	set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 	if {$net != ""} {
# 		set out_name [get_property NAME $net]
# 		if {$function == true} {
# 			append content [format "\t%s <= not(%s);\n" $out_name $net_name];	
# 		} else {
# 			append content  [format "\t%s <= %s;\n" $out_name $net_name];
# 		}
# 		return $content
# 	} else {
# 		catch {common::send_msg_id "bd2vhdl  jadro-3" "CRITICAL WARNING" "${cell}: odstraneno, vystup neni pripojen!"}
# 		return [append content "\t-- odstraneno, vystup neni pripojen\n"]
# 	}
# }
# proc getSource { cell  function } {
# 	set content {}
# 	set name [get_property NAME $cell]
# 	append content [format "\n\t-- %s\n" $name]
# 
# 	set pin [format "%s/O" $cell]
# 	set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 	if {$net != ""} {
# 		set out_name [get_property NAME $net]
# 		if {$function == true} {
# 			append content [format "\t%s <= '1';\n" $out_name];	
# 		} else {
# 			append content [format "\t%s <= '0';\n" $out_name];
# 		}
# 		return $content
# 	} else {
# 		catch {common::send_msg_id "bd2vhdl  jadro-3" "CRITICAL WARNING" "${cell}: odstraneno, vystup neni pripojen!"}
# 		return [append content "\t-- odstraneno, vystup neni pripojen\n"]
# 	}
# }
# proc getSplitter { cell } {
# 	set width [get_property CONFIG.WIDTH [get_bd_cells -quiet $cell]]
# 	set pin [format "%s/I" $cell]
# 	set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 	if {$net != ""} {
# 		set in_name [get_property NAME $net]
# 		set content {}
# 		set name [get_property NAME $cell]
# 		append content [format "\n\t-- %s\n" $name]
# 		for {set i 0} { $i < $width } { incr i } {
# 			set pin [format "%s/O%u" $cell $i]
# 			set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 			if {$net != ""} {
# 				set net_name [get_property NAME $net]
# 				append content [format "\t%s <= %s(%u);\n" $net_name $in_name $i]
# 			} else {
# 				catch {common::send_msg_id "bd2vhdl  jadro-3" "CRITICAL WARNING" "${cell}: ${pin} odstranen, vystup neni pripojen!"}
# 			}
# 		}
# 	} else {
# 		set content {}
# 		set name [get_property NAME $cell]
# 		append content [format "\n\t-- %s\n" $name]
# 		for {set i 0} { $i < $width } { incr i } {
# 			set pin [format "%s/O%u" $cell $i]
# 			set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 			if {$net != ""} {
# 				set net_name [get_property NAME $net]
# 				append content [format "\t%s <= \'0\';\n" $net_name $i]
# 				catch {common::send_msg_id "bd2vhdl  jadro-2" "CRITICAL WARNING" "${cell} nepripojen vstup, ${net_name} bude pripojeno k \'0\'"}
# 			} else {
# 				catch {common::send_msg_id "bd2vhdl  jadro-3" "CRITICAL WARNING" "${cell}: ${pin} odstranen, vystup neni pripojen!"}
# 			}
# 		}
# 	}
# 	return $content
# }
# proc getDff { cell } {
# 	set ce [get_property CONFIG.CE [get_bd_cells -quiet $cell]]
# 	set reset [get_property CONFIG.Reset [get_bd_cells -quiet $cell]]
# 
# 	set content {}
# 	set name [get_property NAME $cell]
# 	append content [format "\n\t-- %s\n" $name]
# 
# 	set pin [format "%s/q" $cell]
# 	set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 	if {$net != ""} {
# 		set out_name [get_property NAME $net]
# 
# 		set pin [format "%s/clk" $cell]
# 		set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 		if {$net == ""} {
# 			catch {common::send_msg_id "bd2vhdl  jadro-3" "CRITICAL WARNING" "${cell}: odstraneno, nejsou pripojene hodiny!"}
# 			return [append content "\t-- odstraneno, , nejsou pripojene hodiny!\n"]
# 		}
# 		#set clk_name [get_property NAME $net]
# 		set clk_name [getInPinNet $cell $pin "\'0\'"]
# 
# 		set pin [format "%s/d" $cell]
# 		#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 		#set in_name [get_property NAME $net]
# 		set in_name [getInPinNet $cell $pin "\'0\'"]
# 
# 		if {$ce == "true"} {
# 			set pin [format "%s/ce" $cell]
# 			#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 			#set ce_name [get_property NAME $net]
# 			set ce_name [getInPinNet $cell $pin "\'1\'"]
# 		}
# 
# 		if {$reset == "true"} {
# 			set pin [format "%s/reset" $cell]
# 			#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 			#set reset_name [get_property NAME $net]
# 			set reset_name [getInPinNet $cell $pin "\'0\'"]
# 		}
# 
# 		append content [format "\tprocess (%s)\n\tbegin\n" $clk_name]
# 		append content [format "\t\tif rising_edge(%s) then\n" $clk_name]
# 		if {$reset == "true"} {
# 			append content [format "\t\t\tif %s = '1' then\n\t\t\t\t%s <= '0';\n\t\t\tels" $reset_name $out_name]
# 		} else {
# 			append content "\t\t\t"
# 		}
# 
# 		if {$ce == "true"} {
# 			append content [format "if %s = '1' then\n" $ce_name]
# 			append content [format "\t\t\t\t%s <= %s;\n" $out_name $in_name]
# 			append content "\t\t\tend if;\n"
# 		} else {
# 			if {$reset == "true"} {
# 				append content [format "e\n\t\t\t\t%s <= %s;\n" $out_name $in_name]
# 				append content "\t\t\tend if;\n"
# 			} else {
# 				append content [format "%s <= %s;\n" $out_name $in_name]
# 			}
# 		}
# 
# 		append content "\t\tend if;\n\tend process;\n";
# 	} else {
# 		catch {common::send_msg_id "bd2vhdl jadro-3" "CRITICAL WARNING" "${cell}: odstraneno, vystup neni pripojen!"}
# 		return [append content "\t-- odstraneno, vystup neni pripojen\n"]
# 	}
# 	return $content
# }
# proc getMux { cell } {
# 	set ports_count [get_property CONFIG.Data_Ports [get_bd_cells -quiet $cell]]
# 	set width [get_property CONFIG.WIDTH [get_bd_cells -quiet $cell]]
# 	set i0_bus [get_property CONFIG.I0_BUS [get_bd_cells -quiet $cell]]
# 	set i1_bus [get_property CONFIG.I1_BUS [get_bd_cells -quiet $cell]]
# 	set i2_bus [get_property CONFIG.I2_BUS [get_bd_cells -quiet $cell]]
# 	set i3_bus [get_property CONFIG.I3_BUS [get_bd_cells -quiet $cell]]
# 	set o_bus [get_property CONFIG.O_BUS [get_bd_cells -quiet $cell]]
# 
# 	set content {}
# 	set name [get_property NAME $cell]
# 	append content [format "\n\t-- %s\n" $name]
# 
# 	for {set i 0} { $i < $width } { incr i } {
# 		if {$o_bus == "true"} {
# 			set pin [format "%s/O" $cell]
# 			set vecO [format "(%u)" $i]
# 		} else {
# 			set pin [format "%s/O_%u" $cell $i]
# 			set vecO ""
# 		}
# 		set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 		if {$net != ""} {
# 			set out_name [get_property NAME $net]
# 
# 			if {$i0_bus == "true"} {
# 				set pin [format "%s/I0" $cell]
# 				set vec0 [format "(%u)" $i]
# 			} else {
# 				set pin [format "%s/I0_%u" $cell $i]
# 				set vec0 ""
# 			}
# 			#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 			#set i0_name [get_property NAME $net]
# 			set i0_name [getInPinNet $cell $pin "\'0\'"]
# 			if {$i0_name == "'0'"} {
# 				set vec0 ""
# 			}
# 
# 			if {$i1_bus == "true"} {
# 				set pin [format "%s/I1" $cell]
# 				set vec1 [format "(%u)" $i]
# 			} else {
# 				set pin [format "%s/I1_%u" $cell $i]
# 				set vec1 ""
# 			}
# 			#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 			#set i1_name [get_property NAME $net]
# 			set i1_name [getInPinNet $cell $pin "\'0\'"]
# 			if {$i1_name == "'0'"} {
# 				set vec1 ""
# 			}
# 
# 			set pin [format "%s/Sel0" $cell]
# 			#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 			#set sel0_name [get_property NAME $net]
# 			set sel0_name [getInPinNet $cell $pin "\'0\'"]
# 
# 			if {$ports_count > 2} {
# 				if {$i2_bus == "true"} {
# 					set pin [format "%s/I2" $cell]
# 					set vec2 [format "(%u)" $i]
# 				} else {
# 					set pin [format "%s/I2_%u" $cell $i]
# 					set vec2 ""
# 				}
# 				#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 				#set i2_name [get_property NAME $net]
# 				set i2_name [getInPinNet $cell $pin "\'0\'"]
# 				if {$i2_name == "'0'"} {
# 					set vec2 ""
# 				}
# 
# 				if {$i3_bus == "true"} {
# 					set pin [format "%s/I3" $cell]
# 					set vec3 [format "(%u)" $i]
# 				} else {
# 					set pin [format "%s/I3_%u" $cell $i]
# 					set vec3 ""
# 				}
# 				#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 				#set i3_name [get_property NAME $net]
# 				set i3_name [getInPinNet $cell $pin "\'0\'"]
# 				if {$i3_name == "'0'"} {
# 					set vec3 ""
# 				}
# 
# 				set pin [format "%s/Sel1" $cell]
# 				#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 				#set sel1_name [get_property NAME $net]
# 				set sel1_name [getInPinNet $cell $pin "\'0\'"]
# 				
# 				if {$sel0_name != "'0'" && $sel1_name != "'0'"} {
# 					append content [format "\t%s%s <= %s%s when %s = '0' and %s = '0' else\n" $out_name $vecO $i0_name $vec0 $sel1_name $sel0_name]
# 					append content [format "\t\t%s%s when %s = '0' and %s = '1' else\n" $i1_name $vec1 $sel1_name $sel0_name]
# 					append content [format "\t\t%s%s when %s = '1' and %s = '0' else\n" $i2_name $vec2 $sel1_name $sel0_name]
# 					append content [format "\t\t%s%s when %s = '1' and %s = '1' else '0';\n\n" $i3_name $vec3 $sel1_name $sel0_name]
# 				} else {
# 					append content [format "\t%s%s <= %s%s;\n" $out_name $vecO $i0_name $vec0]
# 				}
# 			} else {
# 				if {$sel0_name != "'0'"} {
# 					append content [format "\t%s%s <= %s%s when (%s = '1') else %s%s;\n" $out_name $vecO $i1_name $vec1 $sel0_name $i0_name $vec0]
# 				} else {
# 					append content [format "\t%s%s <= %s%s;\n" $out_name $vecO $i0_name $vec0]
# 				}
# 			}
# 		} else {
# 			catch {common::send_msg_id "bd2vhdl  jadro-3" "CRITICAL WARNING" " ${cell}: pin ${pin} odstranen, vystup neni pripojen!"}
# 			return [append content "\t-- ${pin} odstranen, vystup neni pripojen\n"]
# 		}
# 		
# 	}
# 	return $content
# }
# proc getDebounce { cell } {
# 	set width [get_property CONFIG.width [get_bd_cells -quiet $cell]]
# 
# 	set content {}
# 	set name [get_property NAME $cell]
# 	append content [format "\n\t-- %s\n" $name]
# 
# 	set pin [format "%s/tl_out" $cell]
# 	set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 	if {$net != ""} {
# 		set tl_out [get_property NAME $net]
# 
# 		set pin [format "%s/clk" $cell]
# 		set net [get_bd_nets -quiet -of_objects [get_bd_pins -quiet $pin]]
# 		if {$net != ""} {
# 			set clk [get_property NAME $net]
# 
# 			set pin [format "%s/tl_in" $cell]
# 			#set net [get_bd_nets -of_objects [get_bd_pins -quiet $pin]]
# 			#set tl_in [get_property NAME $net]
# 			set tl_in [getInPinNet $cell $pin "\'0\'"]
# 
# 			append content [ format "\t%s : debounce\n\t\tgeneric map (\n\t\t\twidth => %s\n\t\t)\n\t\tport map (\n\t\t\tclk	=> %s,\n\t\t\ttl_in	=> %s,\n\t\t\ttl_out	=> %s\n\t\t);\n" $name $width $clk $tl_in $tl_out]
# 		} else {
# 			catch {common::send_msg_id "bd2vhdl  jadro-3" "CRITICAL WARNING" "${cell}: odstraneno, nejsou pripojene hodiny!"}
# 			return [append content "\t-- odstraneno, , nejsou pripojene hodiny!\n"]	
# 		}
# 	} else {
# 		catch {common::send_msg_id "bd2vhdl  jadro-3" "CRITICAL WARNING" "${cell}: odstraneno, vystup neni pripojen!"}
# 		return [append content "\t-- odstraneno, vystup neni pripojen\n"]
# 	}
# 	
# 	return $content
# }
# set debounce_component "\tcomponent debounce
# \t\tgeneric (
# \t\t\twidth: integer := 22
# \t\t);
# \t\tport (
# \t\t\tclk    : in  std_logic;
# \t\t\ttl_in  : in  std_logic;
# \t\t\ttl_out : out std_logic
# \t\t);
# \tend component;\n"
# proc getModule_ref { cell components component_name} {
# 	upvar $components comps
# 
# 	set inPins [lsort [get_bd_pins -quiet -of_objects [get_bd_cells $cell] -filter DIR==I]]
# 	array set inputBusPins [list]
# 	array set inputBitPins [list]
# 	sortPins $inPins inputBusPins inputBitPins
# 
# 	set outPins [lsort [get_bd_pins -quiet -of_objects [get_bd_cells $cell] -filter DIR==O]]
# 	array set outputBusPins [list]
# 	array set outputBitPins [list]
# 	sortPins $outPins outputBusPins outputBitPins
# 
# 	set content {}
# 	set name [get_property NAME $cell]
# 	append content [format "\n\t-- %s\n" $name]
# 
# 	set lines [list]
# 	foreach {pin net} [array2sortedList inputBitPins] {
#     	lappend lines [list "$pin" "in  std_logic;" "$net"]
#   	}
# 	foreach {pin busInfo} [array2sortedList inputBusPins] {
# 		lassign $busInfo stop start net
# 		if {$start>$stop} {
# 			lappend lines [list "$pin" "in  std_logic_vector($start downto $stop);" "$net"]
# 		} else {
# 			lappend lines [list "$pin" "in  std_logic_vector($start to $stop);" "$net"]
# 		}
#   	}
# 	foreach {pin net} [array2sortedList outputBitPins] {
#     	lappend lines [list "$pin" "out std_logic;" "$net"]
# 	}
# 	foreach {pin busInfo} [array2sortedList outputBusPins] {
# 		lassign $busInfo stop start net
# 		if {$start>$stop} {
# 			lappend lines [list "$pin"  "out std_logic_vector($start downto $stop);" "$net"]
# 		} else {
# 			lappend lines [list "$pin" "out std_logic_vector($start to $stop);" "$net"]
# 		}
# 	}
# 	# Detect maximum column width to align columns
# 	foreach line $lines {
# 		set width [string length [lindex $line 0]]
# 		if {![info exist maxWidth] || $maxWidth < $width} {
# 			set maxWidth $width
# 		}
# 	}
# 	set ports {}
# 	set port_map {}
# 	foreach line $lines {
# 		append ports [format "\n\t\t\t%-${maxWidth}s :  %-${maxWidth}s" [lindex $line 0] [lindex $line 1]]
# 		append port_map [format "\n\t\t\t%-${maxWidth}s =>  %-${maxWidth}s," [lindex $line 0] [lindex $line 2]]
# 	}
# 	# Remove the last semi-colon
#   	set index [string last {;} $ports]
#   	set ports [string replace $ports $index $index {}]
# 	# Remove the last ,
#   	set index [string last {,} $port_map]
#   	set port_map [string replace $port_map $index $index {}]
# 
# 	# nepridavat pokud uz tam ta komponenta je
# 	if {[string first $component_name $comps] < 0} {
# 		append comps "\tcomponent ${component_name}\n\t\tport ("
# 		append comps $ports
# 		append comps "\n\t\t);\n\tend component;\n\n"
# 	}
# 	append content "\tinst_${name} : ${component_name}\n"
# 	append content "\t\tport map ("
# 	append content $port_map
# 	append content "\n\t\t);\n"
# }
# proc getHier { cell debounce components modules} {
# 	global debounce_component
# 	upvar $components comps
# 	upvar $modules mods
# 	upvar $debounce debs
# 
# 	set inPins [lsort [get_bd_pins -quiet -of_objects [get_bd_cells $cell] -filter DIR==I]]
# 	array set inputBusPins [list]
# 	array set inputBitPins [list]
# 	sortPins $inPins inputBusPins inputBitPins
# 
# 	set outPins [lsort [get_bd_pins -quiet -of_objects [get_bd_cells $cell] -filter DIR==O]]
# 	array set outputBusPins [list]
# 	array set outputBitPins [list]
# 	sortPins $outPins outputBusPins outputBitPins
# 
# 	set content {}
# 	set name [get_property NAME $cell]
# 	append content [format "\n\t-- %s\n" $name]
# 
# 	set lines [list]
# 	foreach {pin net} [array2sortedList inputBitPins] {
#     	lappend lines [list "$pin" "in  std_logic;" "$net"]
#   	}
# 	foreach {pin busInfo} [array2sortedList inputBusPins] {
# 		lassign $busInfo stop start net
# 		if {$start>$stop} {
# 			lappend lines [list "$pin" "in  std_logic_vector($start downto $stop);" "$net"]
# 		} else {
# 			lappend lines [list "$pin" "in  std_logic_vector($start to $stop);" "$net"]
# 		}
#   	}
# 	foreach {pin net} [array2sortedList outputBitPins] {
#     	lappend lines [list "$pin" "out std_logic;" "$net"]
# 	}
# 	foreach {pin busInfo} [array2sortedList outputBusPins] {
# 		lassign $busInfo stop start net
# 		if {$start>$stop} {
# 			lappend lines [list "$pin"  "out std_logic_vector($start downto $stop);" "$net"]
# 		} else {
# 			lappend lines [list "$pin" "out std_logic_vector($start to $stop);" "$net"]
# 		}
# 	}
# 	# Detect maximum column width to align columns
# 	foreach line $lines {
# 		set width [string length [lindex $line 0]]
# 		if {![info exist maxWidth] || $maxWidth < $width} {
# 			set maxWidth $width
# 		}
# 	}
# 	set ports {}
# 	set port_map {}
# 	foreach line $lines {
# 		append ports [format "\n\t\t\t%-${maxWidth}s :  %-${maxWidth}s" [lindex $line 0] [lindex $line 1]]
# 		append port_map [format "\n\t\t\t%-${maxWidth}s =>  %-${maxWidth}s," [lindex $line 0] [lindex $line 2]]
# 	}
# 	# Remove the last semi-colon
#   	set index [string last {;} $ports]
#   	set ports [string replace $ports $index $index {}]
# 	# Remove the last ,
#   	set index [string last {,} $port_map]
#   	set port_map [string replace $port_map $index $index {}]
# 
# 	set filtr [format {PATH !~ "%s/.*/.*"} $cell]
# 	set nets [lsort [get_bd_nets -quiet -of_objects [get_bd_cells $cell] -regexp -filter $filtr]]
# 	array set busNets [list ]
# 	set bitNets [list]
# 	sortNets $nets busNets bitNets
# 
# 	set lines [list]
# 	# Process single bit nets
# 	foreach net [lsort -dictionary $bitNets] {
# 		lappend lines [list "$net" "  std_logic;"]
# 	}
# 	# Process bus nets
# 	foreach {net busInfo} [array2sortedList busNets] {
# 		lassign $busInfo stop start
# 		if {$start>$stop} {
# 		lappend lines [list "$net" "  std_logic_vector($start downto $stop);"]
# 		} else {
# 		lappend lines [list "$net" "  std_logic_vector($start to $stop);"]
# 		}
# 	}
# 
# 	# Detect maximum column width to align columns
# 	foreach line $lines {
# 		set width [string length [lindex $line 0]]
# 		if {![info exist maxWidth] || $maxWidth < $width} {
# 			set maxWidth $width
# 		}
# 	}
# 
# 	# Build the content of the stub:
# 	set signals {}
# 	foreach line $lines {
# 		append signals [format "\n\tsignal %-${maxWidth}s :  %-${maxWidth}s" [lindex $line 0] [lindex $line 1]]
# 	}
#   set ports2Signals {}
#     foreach net [lsort -dictionary $nets] {
#         set net_name [get_property NAME [get_bd_nets -quiet $net]]
#         set ports_b [get_bd_ports -quiet -of_objects [get_bd_nets -quiet $net]]
#         if {$ports == {}} {
#             break
#         }
#         foreach port [lsort -dictionary $ports_b] {
#             set port_name [get_property NAME [get_bd_pins -quiet $port]]
#             set dir [get_property DIR [get_bd_pins -quiet $port]]
#             if {$dir == "I"} {
#                 append ports2Signals "\t$net_name <= $port_name;\n"    
#             } else {
#                 append ports2Signals "\t$port_name <= $net_name;\n"
#             }
#         }
#     }
#   
# 	set debounce_inner false
#   	set components_inner {}
#   	set modules_inner {}
#   	set body [getIPs $cell debounce_inner components_inner modules_inner]
# 	if {$debounce_inner} {
# 		puts "######################################################################x"
# 		append components_inner $debounce_component
# 		set debs true
#     }
# 	
# 	set comp_name [string replace $cell 0 0 {}]
#     set comp_name [string map {/ _} $comp_name]
#     append comps "\tcomponent ${comp_name}\n\t\tport ("
#     append mods "\n\nlibrary IEEE;\nuse IEEE.std_logic_1164.all;\n\n"
#     append mods "entity ${comp_name} is\n\tport("
#     append mods $ports
#     append comps $ports
#     append mods "\n\t\t);\nend entity ${comp_name};\n\narchitecture Behavioral of ${comp_name} is\n"
#     append mods $components_inner
#     append mods $signals
#     append mods "\nbegin\n"
#     append mods $ports2Signals
#     append mods $body
#     append mods "\nend Behavioral;"
#     append comps "\n\t\t);\n\tend component;\n\n"
#     append content "\tinst_${comp_name} : ${comp_name}\n"
#     append content "\t\tport map ("
#     append content $port_map
#     append content "\n\t\t);\n"
#     append mods $modules_inner
# 
# 	return $content
# }
# proc getIPs { parent debounce components modules} {
#   upvar $debounce deb
#   upvar $components comps
#   upvar $modules mods
#   if {$parent == ""} {
# 	set cells [get_bd_cells]	  
#   } else {
# 	set filtr [format {PATH !~ "%s/.*/.*"} $parent]
# 	set cells [get_bd_cells -of_objects [get_bd_cells $parent] -regexp -filter $filtr]
#   }
#   
#   set content {}
#   foreach cell [lsort -dictionary $cells] {
# 	set type [get_property TYPE [get_bd_cells -quiet $cell]]
# 	set name [get_property NAME [get_bd_cells -quiet $cell]]
# 	set vlnv [get_property VLNV [get_bd_cells -quiet $cell]]
# 	if {$type == "ip"} {
# 		set vlnvs [split $vlnv ":"]
# 		if {[lindex $vlnvs 0] == "FIT"} {
# 		 	switch [lindex $vlnvs 2] {
# 				"or" {
# 					append content [getGate $cell "or"]
# 				}
# 				"and" {
# 					append content [getGate $cell "and"]
# 				}
# 				"xor" {
# 					append content [getGate $cell "xor"]
# 				}
# 				"buf" {
# 					append content [getBuf $cell false]
# 				}
# 				"inv" {
# 					append content [getBuf $cell true]
# 				}
# 				"gnd" {
# 					append content [getSource $cell false]
# 				}
# 				"vcc" {
# 					append content [getSource $cell true]
# 				}
# 				"splitter" {
# 					append content [getSplitter $cell]
# 				}
# 				"mux" {
# 					append content [getMux $cell]
# 				}
# 				"dff" {
# 					append content [getDff $cell]
# 				}
# 				"debounce" {
# 					append content [getDebounce $cell]
# 					set deb true
# 				}
# 			}
# 		} elseif {[lindex $vlnvs 0] == "xilinx.com" && [lindex $vlnvs 1] == "module_ref"} {
# 			append content [getModule_ref $cell comps [lindex $vlnvs 2]]
# 		}
# 			
# 	} elseif {$type == "hier"} {
# 		append content [getHier $cell deb comps mods]
# 	}
#   }
#   return $content
# }
# set debounce_code "\n\n\nlibrary IEEE;
# use IEEE.STD_LOGIC_1164.ALL;
# use ieee.std_logic_unsigned.all;
# 
# entity debounce is
#     generic (
# 		width: integer := 22 -- 100 MHz clock -> 4 - simulation (90 ns); 22 - synthesis (ca. 20 ms)
# 	);
#     port (
# 		clk : in STD_LOGIC;
#         tl_in : in STD_LOGIC;
#         tl_out : out STD_LOGIC
# 	);
# end entity debounce;
# 
# architecture Behavioral of debounce is
# 
# signal cnt       : std_logic_vector(width-1 downto 0) := (others => '0');
# signal reset, ce : std_logic := '0';
# signal tl_prev   : std_logic := '0';
# 
# 
# begin
# 
#     counter: process(clk) begin
#         if rising_edge(clk) then 
#             if (reset = '1') then
#                 cnt <= (others => '0');
#             elsif (ce = '1') then
#                 cnt <= cnt + 1;
#             end if;
#         end if;
#     end process;
# 
#     process(clk) begin
#         if rising_edge(clk) then
#             if (tl_prev /= tl_in) then
#                 reset <= '1';
#             else 
#                 reset <= '0';
#             end if;
#         end if;
#     end process;
#                 
#     process(clk) begin
#         if rising_edge(clk) then
#             if (reset = '1') then
#                 tl_prev <= tl_in;
#             end if;
#         end if;
#     end process;
#                 
#     process(clk) begin
#         if rising_edge(clk) then
#             if ((cnt(width-1) = '1') and (cnt(0) = '0')) then
#                 tl_out <= tl_prev;
#             end if;
#         end if;
#     end process;
#                 
# 
#     ce <= '0' when ((cnt(width-1) = '1') and (cnt(0) = '1'))
#                 else '1';
# 
# end Behavioral;\n"
# proc vhdlTemplate { module } {
#   global debounce_code
#   global debounce_component
# 
#   set inPorts [lsort [get_bd_ports -quiet -filter DIR==I]]
#   array set inputBusPorts [list ]
#   set inputBitPorts [list]
#   sortPorts $inPorts inputBusPorts inputBitPorts
# 
#   set outPorts [lsort [get_bd_ports -quiet -filter DIR==O]]
#   array set outputBusPorts [list ]
#   set outputBitPorts [list]
#   sortPorts $outPorts outputBusPorts outputBitPorts
# 
#   set inoutPorts [lsort [get_bd_ports -quiet -filter DIR==IO]]
#   array set inoutBusPorts [list ]
#   set inoutBitPorts [list]
#   sortPorts $inoutPorts inoutBusPorts inoutBitPorts
# 
#   set lines [list]
#   # Process input single bit ports
# #   lappend lines "-- Input Ports - Single Bit"
#   foreach port [lsort -dictionary $inputBitPorts] {
#     lappend lines [list "$port" "in  std_logic;"]
#   }
#   # Process input bus ports
# #   lappend lines "-- Input Ports - Busses"
#   foreach {port busInfo} [array2sortedList inputBusPorts] {
#     lassign $busInfo stop start
#     if {$start>$stop} {
#       lappend lines [list "$port" "in  std_logic_vector($start downto $stop);"]
#     } else {
#       lappend lines [list "$port" "in  std_logic_vector($start to $stop);"]
#     }
#   }
#   # Process output single bit ports
# #   lappend lines "-- Output Ports - Single Bit"
#   foreach port [lsort -dictionary $outputBitPorts] {
#     lappend lines [list "$port" "out std_logic;"]
#   }
#   # Process output bus ports
# #   lappend lines "-- Output Ports - Busses"
#   foreach {port busInfo} [array2sortedList outputBusPorts] {
#     lassign $busInfo stop start
#     if {$start>$stop} {
#       lappend lines [list "$port"  "out std_logic_vector($start downto $stop);"]
#     } else {
#       lappend lines [list "$port" "out std_logic_vector($start to $stop);"]
#     }
#   }
#   # Process inout single bit ports
# #   lappend lines "-- InOut Ports - Single Bit"
#   foreach port [lsort -dictionary $inoutBitPorts] {
#     lappend lines [list "$port" "inout  std_logic;"]
#   }
#   # Process inout bus ports
# #   lappend lines "-- InOut Ports - Busses"
#   foreach {port busInfo} [array2sortedList inoutBusPorts] {
#     lassign $busInfo stop start
#     if {$start>$stop} {
#       lappend lines [list "$port" "inout  std_logic_vector($start downto $stop);"]
#     } else {
#       lappend lines [list "$port" "inout  std_logic_vector($start to $stop);"]
#     }
#   }
# 
#   # Detect maximum column width to align columns
#   foreach line $lines {
#     if {[regexp {^\s*\-\-} $line]} {
#       # Skip lines that are just comments
#       continue
#     }
#     set width [string length [lindex $line 0]]
#     if {![info exist maxWidth] || $maxWidth < $width} {
#       set maxWidth $width
#     }
#   }
# 
#   # Build the content of the stub:
#   set content {}
#   foreach line $lines {
#     if {[regexp {^\s*\-\-} $line]} {
#       # Lines that are just comments
#       append content "\n      $line"
#       continue
#     }
#     append content [format "\n      %-${maxWidth}s :  %-${maxWidth}s" [lindex $line 0] [lindex $line 1]]
#   }
# 
#   # Remove the last semi-colon
#   set index [string last {;} $content]
#   set content [string replace $content $index $index {}]
# 
# 
#   set nets [lsort [get_bd_nets -quiet]]
#   array set busNets [list ]
#   set bitNets [list]
#   sortNets $nets busNets bitNets
# 
#   set lines [list]
#   # Process single bit nets
#   foreach net [lsort -dictionary $bitNets] {
#     lappend lines [list "$net" "  std_logic;"]
#   }
#   # Process bus nets
#   foreach {net busInfo} [array2sortedList busNets] {
#     lassign $busInfo stop start
#     if {$start>$stop} {
#       lappend lines [list "$net" "  std_logic_vector($start downto $stop);"]
#     } else {
#       lappend lines [list "$net" "  std_logic_vector($start to $stop);"]
#     }
#   }
# 
#   # Detect maximum column width to align columns
#   foreach line $lines {
#     if {[regexp {^\s*\-\-} $line]} {
#       # Skip lines that are just comments
#       continue
#     }
#     set width [string length [lindex $line 0]]
#     if {![info exist maxWidth] || $maxWidth < $width} {
#       set maxWidth $width
#     }
#   }
# 
#   # Build the content of the stub:
#   set signals {}
#   foreach line $lines {
#     if {[regexp {^\s*\-\-} $line]} {
#       # Lines that are just comments
#       append signals "\n      $line"
#       continue
#     }
#     append signals [format "\n      signal %-${maxWidth}s :  %-${maxWidth}s" [lindex $line 0] [lindex $line 1]]
#   }
#   set ports2Signals {}
#   foreach port [lsort -dictionary $inPorts] {
# 	set port_name [get_property NAME [get_bd_ports -quiet $port]]
# 	set net [get_bd_nets -quiet -of_objects [get_bd_ports -quiet $port]]
# 	if {$net != ""} {
# 		set net_name [get_property NAME $net]
# 		append ports2Signals "\t$net_name <= $port_name;\n"
# 	} else {
# 		catch {common::send_msg_id "bd2vhdl   port-2" "CRITICAL WARNING" "${port_name}: port nepripojen!"}
# 	}
#   }
#   foreach port [lsort -dictionary $outPorts] {
# 	set port_name [get_property NAME [get_bd_ports -quiet $port]]
# 	set net [get_bd_nets -quiet -of_objects [get_bd_ports -quiet $port]]
# 	if {$net != ""} {
# 		set net_name [get_property NAME $net]
# 		append ports2Signals "\t$port_name <= $net_name;\n"
# 	} else {
# 		catch {common::send_msg_id "bd2vhdl   port-3" "CRITICAL WARNING" "${port_name}: port nepripojen!"}
# 	}
#   }
#   set debounce false
#   set components {}
#   set modules {}
#   set body [getIPs "" debounce components modules]
#   
#   if {$debounce} {
# 	  append components $debounce_component
#   }
#   # Now that the last semi-colon is replaced, add the header and footer
#   set content [format "library IEEE;
# use IEEE.std_logic_1164.all;
# 
# library xil_defaultlib;
# use xil_defaultlib.all;
# 
# entity ${module}_vhdl is
#    port (%s
#    );
# end entity ${module}_vhdl;
# 
# architecture Behavioral of ${module}_vhdl is
# %s
# %s
# begin
# %s
# %s
# end Behavioral;" $content $components $signals $ports2Signals $body]
# 
#   append content $modules
# 
#   if {$debounce} {
# 	  append content $debounce_code
#   }
# 
#   return $content
# }
# set name [current_bd_design -quiet]
# if {$name == ""} {
#     common::send_msg_id -continue "bd2vhdl design-2" "ERROR" "Je potreba otevrit block design!"
# 	return
# }
# save_bd_design $name
# validate_bd_design -force
CRITICAL WARNING: [BD 41-1348] Reset pin /counter_vhdl_0/reset (associated clock /counter_vhdl_0/clk) is connected to asynchronous reset source /reset.
This may prevent design from meeting timing. Please add Processor System Reset module to create a reset that is synchronous to the associated clock source /debounce_0/tl_out.
# if { [llength [get_bd_ports]] > 0 } {
# 	puts "\n##### ${name} #####"
# 	set content [vhdlTemplate $name]
# 	set PROJ_DIR [get_property DIRECTORY [current_project]]
# 	set PROJ_DIR [file normalize $PROJ_DIR]
# 	set tmp_dir [file join $PROJ_DIR "tmp"]
# 	file mkdir $tmp_dir
# 	set filename "${name}.vhd"
# 	set filename_path [file join $tmp_dir $filename]
# 	# Save the template
# 	set mode {w}
# 	puts "\nCreating VHDL for Design $name in [file normalize $filename]\n"
# 	set tfh [open $filename_path $mode]
# 	puts $tfh $content
# 	close $tfh
# 
# 	import_files -force -norecurse $filename_path
# 	common::send_msg_id "bd2vhdl design-1" "INFO" "${name}_vhdl.vhd vygenerovan"
# } else {
# 	common::send_msg_id -continue "bd2vhdl design-3" "ERROR" "${name} neobsahuje zadne porty!"
# }

##### counter_full #####

Creating VHDL for Design counter_full in X:/SAP/lab5/counter_full.vhd

INFO: [bd2vhdl design-1] counter_full_vhdl.vhd vygenerovan
save_bd_design
Wrote  : <X:/SAP/lab5/lab5.srcs/sources_1/bd/counter_full/counter_full.bd> 
reset_run synth_1
update_module_reference counter_output_logic_0_1
INFO: [IP_Flow 19-234] Refreshing IP repositories
INFO: [IP_Flow 19-1700] Loaded user IP repository 'x:/SAP/lib_SAP_2022_02_02'.
Upgrading 'X:/SAP/lab5/lab5.srcs/sources_1/bd/counter/counter.bd'
INFO: [IP_Flow 19-1972] Upgraded counter_output_logic_0_1 from output_logic_v1_0 1.0 to output_logic_v1_0 1.0
Wrote  : <X:/SAP/lab5/lab5.srcs/sources_1/bd/counter/counter.bd> 
update_module_reference counter_full_counter_vhdl_0_2
INFO: [IP_Flow 19-5107] Inferred bus interface 'reset' of definition 'xilinx.com:signal:reset:1.0' (from Xilinx Repository).
INFO: [IP_Flow 19-5107] Inferred bus interface 'clk' of definition 'xilinx.com:signal:clock:1.0' (from Xilinx Repository).
INFO: [IP_Flow 19-4728] Bus Interface 'clk': Added interface parameter 'ASSOCIATED_RESET' with value 'reset'.
WARNING: [IP_Flow 19-3153] Bus Interface 'clk': ASSOCIATED_BUSIF bus parameter is missing.
INFO: [IP_Flow 19-234] Refreshing IP repositories
INFO: [IP_Flow 19-1700] Loaded user IP repository 'x:/SAP/lib_SAP_2022_02_02'.
Upgrading 'X:/SAP/lab5/lab5.srcs/sources_1/bd/counter_full/counter_full.bd'
INFO: [IP_Flow 19-1972] Upgraded counter_full_counter_vhdl_0_2 from counter_vhdl_v1_0 1.0 to counter_vhdl_v1_0 1.0
WARNING: [BD 41-1731] Type mismatch between connected pins: /debounce_0/tl_out(undef) and /counter_vhdl_0_upgraded_ipi/clk(clk)
Wrote  : <X:/SAP/lab5/lab5.srcs/sources_1/bd/counter_full/counter_full.bd> 
launch_runs synth_1 -jobs 4
[Tue Mar 15 08:35:13 2022] Launched synth_1...
Run output will be captured here: X:/SAP/lab5/lab5.runs/synth_1/runme.log
launch_runs impl_1 -jobs 4
[Tue Mar 15 08:35:51 2022] Launched impl_1...
Run output will be captured here: X:/SAP/lab5/lab5.runs/impl_1/runme.log
launch_runs impl_1 -to_step write_bitstream -jobs 4
[Tue Mar 15 08:37:13 2022] Launched impl_1...
Run output will be captured here: X:/SAP/lab5/lab5.runs/impl_1/runme.log
reset_run synth_1
launch_runs synth_1 -jobs 4
[Tue Mar 15 08:38:22 2022] Launched synth_1...
Run output will be captured here: X:/SAP/lab5/lab5.runs/synth_1/runme.log
open_run synth_1 -name synth_1
Design is defaulting to impl run constrset: constrs_1
Design is defaulting to synth run part: xc7a35tcpg236-1
INFO: [Netlist 29-17] Analyzing 10 Unisim elements for replacement
INFO: [Netlist 29-28] Unisim Transformation completed in 0 CPU seconds
INFO: [Project 1-479] Netlist was created with Vivado 2018.2.1
INFO: [Device 21-403] Loading part xc7a35tcpg236-1
INFO: [Project 1-570] Preparing netlist for logic optimization
INFO: [Opt 31-138] Pushed 0 inverter(s) to 0 load pin(s).
INFO: [Project 1-111] Unisim Transformation Summary:
No Unisim elements were transformed.

open_run: Time (s): cpu = 00:00:14 ; elapsed = 00:00:13 . Memory (MB): peak = 1502.363 ; gain = 403.352
set_property iostandard LVCMOS33 [get_ports [list clk f_a f_b f_c f_d f_e f_f f_g inc reset tl_in]]
set_property drive 12 [get_ports [list f_a f_b f_c f_d f_e f_f f_g]]
set_property slew SLOW [get_ports [list f_a f_b f_c f_d f_e f_f f_g]]
place_ports clk W5
set_property package_pin "" [get_ports [list  f_a]]
set_property package_pin "" [get_ports [list  f_g]]
place_ports reset T17
place_ports tl_in W19
place_ports inc V17
place_ports f_a W7
place_ports f_b W6
place_ports f_c U8
place_ports f_d V8
place_ports f_e U5
place_ports f_f V5
place_ports f_g U7
file mkdir X:/SAP/lab5/lab5.srcs/constrs_1/new
close [ open X:/SAP/lab5/lab5.srcs/constrs_1/new/counter.xdc w ]
add_files -fileset constrs_1 X:/SAP/lab5/lab5.srcs/constrs_1/new/counter.xdc
set_property target_constrs_file X:/SAP/lab5/lab5.srcs/constrs_1/new/counter.xdc [current_fileset -constrset]
save_constraints -force
reset_run synth_1
launch_runs impl_1 -jobs 4
WARNING: [Project 1-478] Design 'synth_1' is stale and will not be used when launching 'impl_1'
[Tue Mar 15 08:41:18 2022] Launched synth_1...
Run output will be captured here: X:/SAP/lab5/lab5.runs/synth_1/runme.log
[Tue Mar 15 08:41:18 2022] Launched impl_1...
Run output will be captured here: X:/SAP/lab5/lab5.runs/impl_1/runme.log
launch_runs impl_1 -to_step write_bitstream -jobs 4
[Tue Mar 15 08:43:33 2022] Launched impl_1...
Run output will be captured here: X:/SAP/lab5/lab5.runs/impl_1/runme.log
open_hw
connect_hw_server
INFO: [Labtools 27-2285] Connecting to hw_server url TCP:localhost:3121
INFO: [Labtools 27-2222] Launching hw_server...
INFO: [Labtools 27-2221] Launch Output:

****** Xilinx hw_server v2018.2.1
  **** Build date : Jul 26 2018-19:38:10
    ** Copyright 1986-2018 Xilinx, Inc. All Rights Reserved.


open_hw_target
INFO: [Labtoolstcl 44-466] Opening hw_target localhost:3121/xilinx_tcf/Digilent/210183AA0E48A
set_property PROGRAM.FILE {X:/SAP/lab5/lab5.runs/impl_1/counter_full_vhdl.bit} [get_hw_devices xc7a35t_0]
current_hw_device [get_hw_devices xc7a35t_0]
refresh_hw_device -update_hw_probes false [lindex [get_hw_devices xc7a35t_0] 0]
INFO: [Labtools 27-1435] Device xc7a35t (JTAG device index = 0) is not programmed (DONE status = 0).
set_property PROBES.FILE {} [get_hw_devices xc7a35t_0]
set_property FULL_PROBES.FILE {} [get_hw_devices xc7a35t_0]
set_property PROGRAM.FILE {X:/SAP/lab5/lab5.runs/impl_1/counter_full_vhdl.bit} [get_hw_devices xc7a35t_0]
program_hw_devices [get_hw_devices xc7a35t_0]
INFO: [Labtools 27-3164] End of startup status: HIGH
refresh_hw_device [lindex [get_hw_devices xc7a35t_0] 0]
INFO: [Labtools 27-1434] Device xc7a35t (JTAG device index = 0) is programmed with a design that has no supported debug core(s) in it.
WARNING: [Labtools 27-3361] The debug hub core was not detected.
Resolution: 
1. Make sure the clock connected to the debug hub (dbg_hub) core is a free running clock and is active.
2. Make sure the BSCAN_SWITCH_USER_MASK device property in Vivado Hardware Manager reflects the user scan chain setting in the design and refresh the device.  To determine the user scan chain setting in the design, open the implemented design and use 'get_property C_USER_SCAN_CHAIN [get_debug_cores dbg_hub]'.
For more details on setting the scan chain property, consult the Vivado Debug and Programming User Guide (UG908).
open_bd_design {X:/SAP/lab5/lab5.srcs/sources_1/bd/counter_full/counter_full.bd}
open_bd_design {X:/SAP/lab5/lab5.srcs/sources_1/bd/counter/counter.bd}
exit
INFO: [Common 17-206] Exiting Vivado at Tue Mar 15 08:47:33 2022...
